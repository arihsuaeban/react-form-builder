{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.find\");\n\nrequire(\"core-js/modules/es.array.find-index\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.array.sort\");\n\nrequire(\"core-js/modules/es.array.splice\");\n\nrequire(\"core-js/modules/es.map\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.regexp.flags\");\n\nrequire(\"core-js/modules/es.string.includes\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.match\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/es.string.starts-with\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Webform = _interopRequireDefault(require(\"./Webform\"));\n\nvar _Component2 = _interopRequireDefault(require(\"./components/_classes/component/Component\"));\n\nvar _tippy = _interopRequireDefault(require(\"tippy.js\"));\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _Components = _interopRequireDefault(require(\"./components/Components\"));\n\nvar _Formio = require(\"./Formio\");\n\nvar _utils = require(\"./utils/utils\");\n\nvar _formUtils = require(\"./utils/formUtils\");\n\nvar _builder = _interopRequireDefault(require(\"./utils/builder\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nrequire('./components/builder');\n\nvar Templates = _Formio.GlobalFormio.Templates;\n\nif (!Templates) {\n  Templates = require('./templates/Templates').default;\n}\n\nvar dragula;\n\nif (typeof window !== 'undefined') {\n  // Import from \"dist\" because it would require and \"global\" would not be defined in Angular apps.\n  dragula = require('dragula/dist/dragula');\n}\n\nvar WebformBuilder = /*#__PURE__*/function (_Component) {\n  _inherits(WebformBuilder, _Component);\n\n  var _super = _createSuper(WebformBuilder); // eslint-disable-next-line max-statements\n\n\n  function WebformBuilder() {\n    var _this;\n\n    _classCallCheck(this, WebformBuilder);\n\n    var element, options;\n\n    if (arguments[0] instanceof HTMLElement || arguments[1]) {\n      element = arguments[0];\n      options = arguments[1];\n    } else {\n      options = arguments[0];\n    } // Reset skipInit in case PDFBuilder has set it.\n\n\n    options.skipInit = false;\n    options.display = options.display || 'form';\n    _this = _super.call(this, null, options);\n    _this.element = element;\n    _this.builderHeight = 0;\n    _this.schemas = {};\n    _this.repeatablePaths = [];\n    _this.sideBarScroll = _lodash.default.get(_this.options, 'sideBarScroll', true);\n    _this.sideBarScrollOffset = _lodash.default.get(_this.options, 'sideBarScrollOffset', 0);\n    _this.dragDropEnabled = true; // Setup the builder options.\n\n    _this.builder = _lodash.default.defaultsDeep({}, _this.options.builder, _this.defaultGroups); // Turn off if explicitely said to do so...\n\n    _lodash.default.each(_this.defaultGroups, function (config, key) {\n      if (config === false) {\n        _this.builder[key] = false;\n      }\n    }); // Add the groups.\n\n\n    _this.groups = {};\n    _this.groupOrder = [];\n\n    var _loop = function _loop(group) {\n      if (_this.builder[group]) {\n        _this.builder[group].key = group;\n        _this.groups[group] = _this.builder[group];\n        _this.groups[group].components = _this.groups[group].components || {};\n        _this.groups[group].componentOrder = _this.groups[group].componentOrder || [];\n        _this.groups[group].subgroups = Object.keys(_this.groups[group].groups || {}).map(function (groupKey) {\n          _this.groups[group].groups[groupKey].componentOrder = Object.keys(_this.groups[group].groups[groupKey].components).map(function (key) {\n            return key;\n          });\n          return _this.groups[group].groups[groupKey];\n        });\n\n        _this.groupOrder.push(_this.groups[group]);\n      }\n    };\n\n    for (var group in _this.builder) {\n      _loop(group);\n    }\n\n    _this.groupOrder = _this.groupOrder.filter(function (group) {\n      return group && !group.ignore;\n    }).sort(function (a, b) {\n      return a.weight - b.weight;\n    }).map(function (group) {\n      return group.key;\n    });\n\n    for (var type in _Components.default.components) {\n      var component = _Components.default.components[type];\n\n      if (component.builderInfo && component.builderInfo.schema) {\n        _this.schemas[type] = component.builderInfo.schema;\n        component.type = type;\n        var builderInfo = component.builderInfo;\n        builderInfo.key = component.type;\n\n        _this.addBuilderComponentInfo(builderInfo);\n      }\n    } // Filter out any extra components.\n    // Add the components in each group.\n\n\n    for (var _group in _this.groups) {\n      var info = _this.groups[_group];\n\n      for (var key in info.components) {\n        var compKey = _group === 'resource' ? \"component-\".concat(key) : key;\n        var comp = info.components[compKey];\n\n        if (comp === true && _Components.default.components[key] && _Components.default.components[key].builderInfo) {\n          comp = _Components.default.components[key].builderInfo;\n        }\n\n        if (comp && comp.schema) {\n          _this.schemas[key] = comp.schema;\n          info.components[compKey] = comp;\n          info.components[compKey].key = key;\n        } else {\n          // Do not include this component in the components array.\n          delete info.components[compKey];\n        }\n      } // Order the components.\n\n\n      _this.orderComponents(info);\n    }\n\n    _this.options.hooks = _this.options.hooks || {};\n\n    _this.options.hooks.renderComponent = function (html, _ref) {\n      var _self$component;\n\n      var component = _ref.component,\n          self = _ref.self;\n\n      if (self.type === 'form' && !self.key) {\n        var template = _this.hook('renderComponentFormTemplate', html.replace('formio-component-form', '')); // The main webform shouldn't have this class as it adds extra styles.\n\n\n        return template;\n      }\n\n      if (_this.options.disabled && _this.options.disabled.includes(self.key) || self.parent.noDragDrop) {\n        return html;\n      }\n\n      return _this.renderTemplate('builderComponent', {\n        html: html,\n        disableBuilderActions: self === null || self === void 0 ? void 0 : (_self$component = self.component) === null || _self$component === void 0 ? void 0 : _self$component.disableBuilderActions,\n        childComponent: component\n      });\n    };\n\n    _this.options.hooks.renderComponents = function (html, _ref2) {\n      var components = _ref2.components,\n          self = _ref2.self; // if Datagrid and already has a component, don't make it droppable.\n\n      if (self.type === 'datagrid' && components.length > 0 || self.noDragDrop) {\n        return html;\n      }\n\n      if (!components || !components.length && !components.nodrop || self.type === 'form' && components.length <= 1 && (components.length === 0 || components[0].type === 'button')) {\n        html = _this.renderTemplate('builderPlaceholder', {\n          position: 0\n        }) + html;\n      }\n\n      return _this.renderTemplate('builderComponents', {\n        key: self.key,\n        type: self.type,\n        html: html\n      });\n    };\n\n    _this.options.hooks.renderInput = function (html, _ref3) {\n      var self = _ref3.self;\n\n      if (self.type === 'hidden') {\n        return html + self.name;\n      }\n\n      return html;\n    };\n\n    _this.options.hooks.renderLoading = function (html, _ref4) {\n      var self = _ref4.self;\n\n      if (self.type === 'form' && self.key) {\n        return self.name;\n      }\n\n      return html;\n    };\n\n    _this.options.hooks.attachComponents = function (element, components, container, component) {\n      // Don't attach if no element was found or component doesn't participate in drag'n'drop.\n      if (!element) {\n        return;\n      }\n\n      if (component.noDragDrop) {\n        return element;\n      } // Attach container and component to element for later reference.\n\n\n      var containerElement = element.querySelector(\"[ref=\\\"\".concat(component.component.key, \"-container\\\"]\")) || element;\n      containerElement.formioContainer = container;\n      containerElement.formioComponent = component; // Add container to draggable list.\n\n      if (_this.dragula && _this.allowDrop(element)) {\n        _this.dragula.containers.push(containerElement);\n      } // If this is an existing datagrid element, don't make it draggable.\n\n\n      if ((component.type === 'datagrid' || component.type === 'datamap') && components.length > 0) {\n        return element;\n      } // Since we added a wrapper, need to return the original element so that we can find the components inside it.\n\n\n      return element.children[0];\n    };\n\n    _this.options.hooks.attachDatagrid = function (element, component) {\n      component.loadRefs(element, _defineProperty({}, \"\".concat(component.key, \"-container\"), 'single'));\n      var dataGridContainer = component.refs[\"\".concat(component.key, \"-container\")];\n\n      if (dataGridContainer) {\n        component.attachComponents(dataGridContainer.parentNode, [], component.component.components);\n      } // Need to set up horizontal rearrangement of fields.\n\n    };\n\n    _this.options.hooks.attachComponent = _this.attachComponent.bind(_assertThisInitialized(_this)); // Load resources tagged as 'builder'\n\n    var query = {\n      params: {\n        type: 'resource',\n        limit: 1000000,\n        select: '_id,title,name,components'\n      }\n    };\n\n    if (_this.options && _this.options.resourceTag) {\n      query.params.tags = [_this.options.resourceTag];\n    } else if (!_this.options || !_this.options.hasOwnProperty('resourceTag')) {\n      query.params.tags = ['builder'];\n    }\n\n    var formio = new _Formio.GlobalFormio(_Formio.GlobalFormio.projectUrl);\n    var isResourcesDisabled = _this.options.builder && _this.options.builder.resource === false;\n    formio.loadProject().then(function (project) {\n      if (project && (_lodash.default.get(project, 'settings.addConfigToForms', false) || _lodash.default.get(project, 'addConfigToForms', false))) {\n        var config = project.config || {};\n        _this.options.formConfig = config;\n        var pathToFormConfig = 'webform._form.config';\n\n        var webformConfig = _lodash.default.get(_assertThisInitialized(_this), pathToFormConfig);\n\n        if (_this.webform && !webformConfig) {\n          _lodash.default.set(_assertThisInitialized(_this), pathToFormConfig, config);\n        }\n      }\n    }).catch(function (err) {\n      console.warn(\"Could not load project settings: \".concat(err.message || err));\n    });\n\n    if (!formio.noProject && !isResourcesDisabled) {\n      var resourceOptions = _this.options.builder && _this.options.builder.resource;\n      formio.loadForms(query).then(function (resources) {\n        if (resources.length) {\n          _this.builder.resource = {\n            title: resourceOptions ? resourceOptions.title : 'Existing Resource Fields',\n            key: 'resource',\n            weight: resourceOptions ? resourceOptions.weight : 50,\n            subgroups: [],\n            components: [],\n            componentOrder: []\n          };\n          _this.groups.resource = {\n            title: resourceOptions ? resourceOptions.title : 'Existing Resource Fields',\n            key: 'resource',\n            weight: resourceOptions ? resourceOptions.weight : 50,\n            subgroups: [],\n            components: [],\n            componentOrder: []\n          };\n\n          if (!_this.groupOrder.includes('resource')) {\n            _this.groupOrder.push('resource');\n          }\n\n          _this.addExistingResourceFields(resources);\n        }\n      });\n    } // Notify components if they need to modify their render.\n\n\n    _this.options.attachMode = 'builder';\n    _this.webform = _this.webform || _this.createForm(_this.options);\n    _this.pathComponentsMapping = {};\n    _this.arrayDataComponentPaths = [];\n    _this.nestedDataComponents = [];\n    _this.arrayDataComponents = [];\n    return _this;\n  }\n\n  _createClass(WebformBuilder, [{\n    key: \"allowDrop\",\n    value: function allowDrop() {\n      return true;\n    }\n  }, {\n    key: \"addExistingResourceFields\",\n    value: function addExistingResourceFields(resources) {\n      var _this2 = this;\n\n      _lodash.default.each(resources, function (resource, index) {\n        var resourceKey = \"resource-\".concat(resource.name);\n        var subgroup = {\n          key: resourceKey,\n          title: resource.title,\n          components: [],\n          componentOrder: [],\n          default: index === 0\n        };\n        (0, _formUtils.eachComponent)(resource.components, function (component) {\n          if (component.type === 'button') return;\n          if (_this2.options && _this2.options.resourceFilter && (!component.tags || component.tags.indexOf(_this2.options.resourceFilter) === -1)) return;\n          var componentName = component.label;\n\n          if (!componentName && component.key) {\n            componentName = _lodash.default.upperFirst(component.key);\n          }\n\n          subgroup.componentOrder.push(\"component-\".concat(component.key));\n          subgroup.components[\"component-\".concat(component.key)] = _lodash.default.merge((0, _utils.fastCloneDeep)(_Components.default.components[component.type] ? _Components.default.components[component.type].builderInfo : _Components.default.components['unknown'].builderInfo), {\n            key: component.key,\n            title: componentName,\n            group: 'resource',\n            subgroup: resourceKey\n          }, {\n            schema: _objectSpread(_objectSpread({}, component), {}, {\n              label: component.label,\n              key: component.key,\n              lockKey: true,\n              source: !_this2.options.noSource ? resource._id : undefined,\n              isNew: true\n            })\n          });\n        }, true);\n\n        _this2.groups.resource.subgroups.push(subgroup);\n      });\n\n      this.triggerRedraw();\n    }\n  }, {\n    key: \"attachTooltip\",\n    value: function attachTooltip(component, title) {\n      return (0, _tippy.default)(component, {\n        allowHTML: true,\n        trigger: 'mouseenter focus',\n        placement: 'top',\n        delay: [200, 0],\n        zIndex: 10000,\n        content: title\n      });\n    }\n  }, {\n    key: \"attachComponent\",\n    value: function attachComponent(element, component) {\n      var _this3 = this; // Add component to element for later reference.\n\n\n      element.formioComponent = component;\n      component.loadRefs(element, {\n        removeComponent: 'single',\n        editComponent: 'single',\n        moveComponent: 'single',\n        copyComponent: 'single',\n        pasteComponent: 'single',\n        editJson: 'single'\n      });\n\n      if (component.refs.copyComponent) {\n        this.attachTooltip(component.refs.copyComponent, this.t('Copy'));\n        component.addEventListener(component.refs.copyComponent, 'click', function () {\n          return _this3.copyComponent(component);\n        });\n      }\n\n      if (component.refs.pasteComponent) {\n        var pasteToolTip = this.attachTooltip(component.refs.pasteComponent, this.t('Paste below'));\n        component.addEventListener(component.refs.pasteComponent, 'click', function () {\n          pasteToolTip.hide();\n\n          _this3.pasteComponent(component);\n        });\n      }\n\n      if (component.refs.moveComponent) {\n        this.attachTooltip(component.refs.moveComponent, this.t('Move'));\n      }\n\n      var parent = this.getParentElement(element);\n\n      if (component.refs.editComponent) {\n        this.attachTooltip(component.refs.editComponent, this.t('Edit'));\n        component.addEventListener(component.refs.editComponent, 'click', function () {\n          return _this3.editComponent(component.schema, parent, false, false, component.component, {\n            inDataGrid: component.isInDataGrid\n          });\n        });\n      }\n\n      if (component.refs.editJson) {\n        this.attachTooltip(component.refs.editJson, this.t('Edit JSON'));\n        component.addEventListener(component.refs.editJson, 'click', function () {\n          return _this3.editComponent(component.schema, parent, false, true, component.component);\n        });\n      }\n\n      if (component.refs.removeComponent) {\n        this.attachTooltip(component.refs.removeComponent, this.t('Remove'));\n        component.addEventListener(component.refs.removeComponent, 'click', function () {\n          return _this3.removeComponent(component.schema, parent, component.component);\n        });\n      }\n\n      return element;\n    }\n  }, {\n    key: \"createForm\",\n    value: function createForm(options) {\n      this.webform = new _Webform.default(this.element, options);\n\n      if (this.element) {\n        this.loadRefs(this.element, {\n          form: 'single'\n        });\n\n        if (this.refs.form) {\n          this.webform.element = this.refs.form;\n        }\n      }\n\n      return this.webform;\n    }\n    /**\n     * Called when everything is ready.\n     *\n     * @returns {Promise} - Wait for webform to be ready.\n     */\n\n  }, {\n    key: \"ready\",\n    get: function get() {\n      return this.webform.ready;\n    }\n  }, {\n    key: \"defaultGroups\",\n    get: function get() {\n      return {\n        basic: {\n          title: 'Basic',\n          weight: 0,\n          default: true\n        },\n        advanced: {\n          title: 'Advanced',\n          weight: 10\n        },\n        layout: {\n          title: 'Layout',\n          weight: 20\n        },\n        data: {\n          title: 'Data',\n          weight: 30\n        },\n        premium: {\n          title: 'Premium',\n          weight: 40\n        }\n      };\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      return _Webform.default.prototype.redraw.call(this);\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return this.webform.form;\n    },\n    set: function set(value) {\n      this.setForm(value);\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this.webform.schema;\n    }\n  }, {\n    key: \"container\",\n    get: function get() {\n      return this.webform.form.components;\n    }\n    /**\n     * When a component sets its api key, we need to check if it is unique within its namespace. Find the namespace root\n     * so we can calculate this correctly.\n     * @param component\n     */\n\n  }, {\n    key: \"findNamespaceRoot\",\n    value: function findNamespaceRoot(component) {\n      var path = (0, _utils.getArrayFromComponentPath)(component.path); // First get the component with nested parents.\n\n      var comp = this.webform.getComponent(path);\n      comp = Array.isArray(comp) ? comp[0] : comp;\n      var namespaceKey = this.recurseNamespace(comp); // If there is no key, it is the root form.\n\n      if (!namespaceKey || this.form.key === namespaceKey) {\n        return this.form.components;\n      }\n\n      var componentSchema = component.component; // If the current component is the namespace, we don't need to find it again.\n\n      if (namespaceKey === component.key) {\n        return [].concat(_toConsumableArray(componentSchema.components), [componentSchema]);\n      } // Get the namespace component so we have the original object.\n\n\n      var namespaceComponent = (0, _formUtils.getComponent)(this.form.components, namespaceKey, true);\n      return namespaceComponent ? namespaceComponent.components : comp.components;\n    }\n  }, {\n    key: \"recurseNamespace\",\n    value: function recurseNamespace(component) {\n      // If there is no parent, we are at the root level.\n      if (!component) {\n        return null;\n      } // Some components are their own namespace.\n\n\n      if (['address', 'container', 'datagrid', 'editgrid', 'dynamicWizard', 'tree'].includes(component.type) || component.tree || component.arrayTree) {\n        return component.key;\n      } // Anything else, keep going up.\n\n\n      return this.recurseNamespace(component.parent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return this.renderTemplate('builder', {\n        sidebar: this.renderTemplate('builderSidebar', {\n          scrollEnabled: this.sideBarScroll,\n          groupOrder: this.groupOrder,\n          groupId: \"builder-sidebar-\".concat(this.id),\n          groups: this.groupOrder.map(function (groupKey) {\n            return _this4.renderTemplate('builderSidebarGroup', {\n              group: _this4.groups[groupKey],\n              groupKey: groupKey,\n              groupId: \"builder-sidebar-\".concat(_this4.id),\n              subgroups: _this4.groups[groupKey].subgroups.map(function (group) {\n                return _this4.renderTemplate('builderSidebarGroup', {\n                  group: group,\n                  groupKey: group.key,\n                  groupId: \"group-container-\".concat(groupKey),\n                  subgroups: []\n                });\n              })\n            });\n          })\n        }),\n        form: this.webform.render()\n      });\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this5 = this;\n\n      this.on('change', function (form) {\n        _this5.populateRecaptchaSettings(form);\n      });\n      return _get(_getPrototypeOf(WebformBuilder.prototype), \"attach\", this).call(this, element).then(function () {\n        _this5.loadRefs(element, {\n          form: 'single',\n          sidebar: 'single',\n          'sidebar-search': 'single',\n          'sidebar-groups': 'single',\n          'container': 'multiple',\n          'sidebar-anchor': 'multiple',\n          'sidebar-group': 'multiple',\n          'sidebar-container': 'multiple'\n        });\n\n        if (_this5.sideBarScroll && Templates.current.handleBuilderSidebarScroll) {\n          Templates.current.handleBuilderSidebarScroll.call(_this5, _this5);\n        } // Add the paste status in form\n\n\n        if (typeof window !== 'undefined' && window.sessionStorage) {\n          var data = window.sessionStorage.getItem('formio.clipboard');\n\n          if (data) {\n            _this5.addClass(_this5.refs.form, 'builder-paste-mode');\n          }\n        }\n\n        if (!(0, _utils.bootstrapVersion)(_this5.options)) {\n          // Initialize\n          _this5.refs['sidebar-group'].forEach(function (group) {\n            group.style.display = group.getAttribute('data-default') === 'true' ? 'inherit' : 'none';\n          }); // Click event\n\n\n          _this5.refs['sidebar-anchor'].forEach(function (anchor, index) {\n            _this5.addEventListener(anchor, 'click', function () {\n              var clickedParentId = anchor.getAttribute('data-parent').slice('#builder-sidebar-'.length);\n              var clickedId = anchor.getAttribute('data-target').slice('#group-'.length);\n\n              _this5.refs['sidebar-group'].forEach(function (group, groupIndex) {\n                var openByDefault = group.getAttribute('data-default') === 'true';\n                var groupId = group.getAttribute('id').slice('group-'.length);\n                var groupParent = group.getAttribute('data-parent').slice('#builder-sidebar-'.length);\n                group.style.display = openByDefault && groupParent === clickedId || groupId === clickedParentId || groupIndex === index ? 'inherit' : 'none';\n              });\n            }, true);\n          });\n        }\n\n        _this5.addEventListener(_this5.refs['sidebar-search'], 'input', _lodash.default.debounce(function (e) {\n          var searchString = e.target.value;\n\n          _this5.searchFields(searchString);\n        }, 300));\n\n        if (_this5.dragDropEnabled) {\n          _this5.initDragula();\n        }\n\n        if (_this5.refs.form) {\n          return _this5.webform.attach(_this5.refs.form);\n        }\n      });\n    }\n  }, {\n    key: \"searchFields\",\n    value: function searchFields() {\n      var _this6 = this;\n\n      var searchString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var searchValue = searchString.toLowerCase();\n      var sidebar = this.refs['sidebar'];\n      var sidebarGroups = this.refs['sidebar-groups'];\n\n      if (!sidebar || !sidebarGroups) {\n        return;\n      }\n\n      var filterGroupBy = function filterGroupBy(group) {\n        var searchValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n        var result = _lodash.default.toPlainObject(group);\n\n        var _result$subgroups = result.subgroups,\n            subgroups = _result$subgroups === void 0 ? [] : _result$subgroups,\n            components = result.components;\n        var filteredComponents = [];\n\n        for (var key in components) {\n          var isMatchedToTitle = components[key].title.toLowerCase().match(searchValue);\n          var isMatchedToKey = components[key].key.toLowerCase().match(searchValue);\n\n          if (isMatchedToTitle || isMatchedToKey) {\n            filteredComponents.push(components[key]);\n          }\n        }\n\n        _this6.orderComponents(result, filteredComponents);\n\n        if (searchValue) {\n          result.default = true;\n        }\n\n        if (result.componentOrder.length || subgroups.length) {\n          return result;\n        }\n\n        return null;\n      };\n\n      var filterGroupOrder = function filterGroupOrder(groupOrder, searchValue) {\n        var result = _lodash.default.cloneDeep(groupOrder);\n\n        return result.filter(function (key) {\n          return filterGroupBy(_this6.groups[key], searchValue);\n        });\n      };\n\n      var filterSubgroups = function filterSubgroups(groups, searchValue) {\n        var result = _lodash.default.clone(groups);\n\n        return result.map(function (subgroup) {\n          return filterGroupBy(subgroup, searchValue);\n        }).filter(function (subgroup) {\n          return !_lodash.default.isNull(subgroup);\n        });\n      };\n\n      var toTemplate = function toTemplate(groupKey) {\n        return {\n          group: filterGroupBy(_this6.groups[groupKey], searchValue),\n          groupKey: groupKey,\n          groupId: sidebar.id || sidebarGroups.id,\n          subgroups: filterSubgroups(_this6.groups[groupKey].subgroups, searchValue).map(function (group) {\n            return _this6.renderTemplate('builderSidebarGroup', {\n              group: group,\n              groupKey: group.key,\n              groupId: \"group-container-\".concat(groupKey),\n              subgroups: []\n            });\n          })\n        };\n      };\n\n      sidebarGroups.innerHTML = filterGroupOrder(this.groupOrder, searchValue).map(function (groupKey) {\n        return _this6.renderTemplate('builderSidebarGroup', toTemplate(groupKey));\n      }).join('');\n      this.loadRefs(this.element, {\n        'sidebar-groups': 'single',\n        'sidebar-anchor': 'multiple',\n        'sidebar-group': 'multiple',\n        'sidebar-container': 'multiple'\n      });\n      this.updateDragAndDrop();\n    }\n  }, {\n    key: \"orderComponents\",\n    value: function orderComponents(groupInfo, foundComponents) {\n      var components = foundComponents || groupInfo.components;\n      var isResource = groupInfo.key.indexOf('resource-') === 0;\n\n      if (components) {\n        groupInfo.componentOrder = Object.keys(components).map(function (key) {\n          return components[key];\n        }).filter(function (component) {\n          return component && !component.ignore && !component.ignoreForForm;\n        }).sort(function (a, b) {\n          return a.weight - b.weight;\n        }).map(function (component) {\n          return isResource ? \"component-\".concat(component.key) : component.key;\n        });\n      }\n    }\n  }, {\n    key: \"updateDragAndDrop\",\n    value: function updateDragAndDrop() {\n      if (this.dragDropEnabled) {\n        this.initDragula();\n      }\n\n      if (this.refs.form) {\n        return this.webform.attach(this.refs.form);\n      }\n    }\n  }, {\n    key: \"initDragula\",\n    value: function initDragula() {\n      var _this7 = this;\n\n      var options = this.options;\n\n      if (this.dragula) {\n        this.dragula.destroy();\n      }\n\n      var containersArray = Array.prototype.slice.call(this.refs['sidebar-container']).filter(function (item) {\n        return item.id !== 'group-container-resource';\n      });\n\n      if (!dragula) {\n        return;\n      }\n\n      this.dragula = dragula(containersArray, {\n        moves: function moves(el) {\n          var moves = true;\n          var list = Array.from(el.classList).filter(function (item) {\n            return item.indexOf('formio-component-') === 0;\n          });\n          list.forEach(function (item) {\n            var key = item.slice('formio-component-'.length);\n\n            if (options.disabled && options.disabled.includes(key)) {\n              moves = false;\n            }\n          });\n\n          if (el.classList.contains('no-drag')) {\n            moves = false;\n          }\n\n          return moves;\n        },\n        copy: function copy(el) {\n          return el.classList.contains('drag-copy');\n        },\n        accepts: function accepts(el, target) {\n          return !el.contains(target) && !target.classList.contains('no-drop');\n        }\n      }).on('drop', function (element, target, source, sibling) {\n        return _this7.onDrop(element, target, source, sibling);\n      });\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this.dragula) {\n        this.dragula.destroy();\n      }\n\n      this.dragula = null;\n\n      if (this.sideBarScroll && Templates.current.clearBuilderSidebarScroll) {\n        Templates.current.clearBuilderSidebarScroll.call(this, this);\n      }\n\n      _get(_getPrototypeOf(WebformBuilder.prototype), \"detach\", this).call(this);\n    }\n  }, {\n    key: \"getComponentInfo\",\n    value: function getComponentInfo(key, group) {\n      var info; // This is a new component\n\n      if (this.schemas.hasOwnProperty(key)) {\n        info = (0, _utils.fastCloneDeep)(this.schemas[key]);\n      } else if (this.groups.hasOwnProperty(group)) {\n        var groupComponents = this.groups[group].components;\n\n        if (groupComponents.hasOwnProperty(key)) {\n          info = (0, _utils.fastCloneDeep)(groupComponents[key].schema);\n        }\n      } else if (group.slice(0, group.indexOf('-')) === 'resource') {\n        // This is an existing resource field.\n        var resourceGroups = this.groups.resource.subgroups;\n\n        var resourceGroup = _lodash.default.find(resourceGroups, {\n          key: group\n        });\n\n        if (resourceGroup && resourceGroup.components.hasOwnProperty(\"component-\".concat(key))) {\n          info = (0, _utils.fastCloneDeep)(resourceGroup.components[\"component-\".concat(key)].schema);\n        }\n      } else if (group === 'searchFields') {\n        //Search components go into this group\n        var _resourceGroups = this.groups.resource.subgroups;\n\n        for (var ix = 0; ix < _resourceGroups.length; ix++) {\n          var _resourceGroup = _resourceGroups[ix];\n\n          if (_resourceGroup.components.hasOwnProperty(\"component-\".concat(key))) {\n            info = (0, _utils.fastCloneDeep)(_resourceGroup.components[\"component-\".concat(key)].schema);\n            break;\n          }\n        }\n      }\n\n      if (info) {\n        info.key = this.generateKey(info);\n      }\n\n      return info;\n    }\n  }, {\n    key: \"getComponentsPath\",\n    value: function getComponentsPath(component, parent) {\n      // Get path to the component in the parent component.\n      var path = 'components';\n      var columnIndex = 0;\n      var tableRowIndex = 0;\n      var tableColumnIndex = 0;\n      var tabIndex = 0;\n\n      switch (parent.type) {\n        case 'table':\n          tableRowIndex = _lodash.default.findIndex(parent.rows, function (row) {\n            return row.some(function (column) {\n              return column.components.some(function (comp) {\n                return comp.key === component.key;\n              });\n            });\n          });\n          tableColumnIndex = _lodash.default.findIndex(parent.rows[tableRowIndex], function (column) {\n            return column.components.some(function (comp) {\n              return comp.key === component.key;\n            });\n          });\n          path = \"rows[\".concat(tableRowIndex, \"][\").concat(tableColumnIndex, \"].components\");\n          break;\n\n        case 'columns':\n          columnIndex = _lodash.default.findIndex(parent.columns, function (column) {\n            return column.components.some(function (comp) {\n              return comp.key === component.key;\n            });\n          });\n          path = \"columns[\".concat(columnIndex, \"].components\");\n          break;\n\n        case 'tabs':\n          tabIndex = _lodash.default.findIndex(parent.components, function (tab) {\n            return tab.components.some(function (comp) {\n              return comp.key === component.key;\n            });\n          });\n          path = \"components[\".concat(tabIndex, \"].components\");\n          break;\n      }\n\n      return path;\n    }\n    /* eslint-disable max-statements */\n\n  }, {\n    key: \"onDrop\",\n    value: function onDrop(element, target, source, sibling) {\n      var _this$groups$group,\n          _this8 = this;\n\n      if (!target) {\n        return;\n      } // If you try to drop within itself.\n\n\n      if (element.contains(target)) {\n        return;\n      }\n\n      var key = element.getAttribute('data-key');\n      var type = element.getAttribute('data-type');\n      var group = element.getAttribute('data-group');\n      var info, isNew, path, index;\n\n      if (key && group) {\n        // This is a new component.\n        info = this.getComponentInfo(key, group);\n\n        if (!info && type) {\n          info = this.getComponentInfo(type, group);\n        }\n\n        isNew = true;\n      } else if (source.formioContainer) {\n        index = _lodash.default.findIndex(source.formioContainer, {\n          key: element.formioComponent.component.key\n        });\n\n        if (index !== -1) {\n          // Grab and remove the component from the source container.\n          info = source.formioContainer.splice(_lodash.default.findIndex(source.formioContainer, {\n            key: element.formioComponent.component.key\n          }), 1); // Since splice returns an array of one object, we need to destructure it.\n\n          info = info[0];\n        }\n      } // If we haven't found the component, stop.\n\n\n      if (!info) {\n        return;\n      } // Show an error if siblings are disabled for a component and such a component already exists.\n\n\n      var compKey = group === 'resource' ? \"component-\".concat(key) : key;\n      var draggableComponent = ((_this$groups$group = this.groups[group]) === null || _this$groups$group === void 0 ? void 0 : _this$groups$group.components[compKey]) || {};\n\n      if (draggableComponent.disableSiblings) {\n        var isCompAlreadyExists = false;\n        (0, _formUtils.eachComponent)(this.webform.components, function (component) {\n          if (component.type === draggableComponent.schema.type) {\n            isCompAlreadyExists = true;\n            return;\n          }\n        }, true);\n\n        if (isCompAlreadyExists) {\n          this.webform.redraw();\n          this.webform.setAlert('danger', \"You cannot add more than one \".concat(draggableComponent.key, \" component to one page.\"));\n          return;\n        }\n      }\n\n      if (target !== source) {\n        // Ensure the key remains unique in its new container.\n        _builder.default.uniquify(this.findNamespaceRoot(target.formioComponent), info);\n      }\n\n      var parent = target.formioComponent; // Insert in the new container.\n\n      if (target.formioContainer) {\n        if (sibling) {\n          if (!sibling.getAttribute('data-noattach')) {\n            index = _lodash.default.findIndex(target.formioContainer, {\n              key: _lodash.default.get(sibling, 'formioComponent.component.key')\n            });\n            index = index === -1 ? 0 : index;\n          } else {\n            index = sibling.getAttribute('data-position');\n          }\n\n          if (index !== -1) {\n            target.formioContainer.splice(index, 0, info);\n          }\n        } else {\n          target.formioContainer.push(info);\n        }\n\n        path = this.getComponentsPath(info, parent.component);\n        index = _lodash.default.findIndex(_lodash.default.get(parent.schema, path), {\n          key: info.key\n        });\n\n        if (index === -1) {\n          index = 0;\n        }\n      }\n\n      if (parent && parent.addChildComponent) {\n        parent.addChildComponent(info, element, target, source, sibling);\n      }\n\n      var componentInDataGrid = parent.type === 'datagrid';\n\n      if (isNew && !this.options.noNewEdit && !info.noNewEdit) {\n        this.editComponent(info, target, isNew, null, null, {\n          inDataGrid: componentInDataGrid\n        });\n      } // Only rebuild the parts needing to be rebuilt.\n\n\n      var rebuild;\n\n      if (target !== source) {\n        if (source.formioContainer && source.contains(target)) {\n          rebuild = source.formioComponent.rebuild();\n        } else if (target.contains(source)) {\n          rebuild = target.formioComponent.rebuild();\n        } else {\n          if (source.formioContainer) {\n            rebuild = source.formioComponent.rebuild();\n          }\n\n          rebuild = target.formioComponent.rebuild();\n        }\n      } else {\n        // If they are the same, only rebuild one.\n        rebuild = target.formioComponent.rebuild();\n      }\n\n      if (!rebuild) {\n        rebuild = _nativePromiseOnly.default.resolve();\n      }\n\n      return rebuild.then(function () {\n        _this8.emit('addComponent', info, parent, path, index, isNew && !_this8.options.noNewEdit && !info.noNewEdit);\n\n        if (!isNew || _this8.options.noNewEdit || info.noNewEdit) {\n          _this8.emit('change', _this8.form);\n        }\n      });\n    }\n  }, {\n    key: \"setForm\",\n    value: function setForm(form) {\n      var _this9 = this;\n\n      if (!form.components) {\n        form.components = [];\n      }\n\n      var isShowSubmitButton = !this.options.noDefaultSubmitButton && !form.components.length; // Ensure there is at least a submit button.\n\n      if (isShowSubmitButton) {\n        form.components.push({\n          type: 'button',\n          label: 'Submit',\n          key: 'submit',\n          size: 'md',\n          block: false,\n          action: 'submit',\n          disableOnInvalid: true,\n          theme: 'primary'\n        });\n      }\n\n      if (this.webform) {\n        var shouldRebuild = !this.webform.form.components || form.components.length !== this.webform.form.components.length;\n        return this.webform.setForm(form, {\n          keepAsReference: true\n        }).then(function () {\n          if (_this9.refs.form) {\n            _this9.builderHeight = _this9.refs.form.offsetHeight;\n          }\n\n          if (!shouldRebuild) {\n            return _this9.form;\n          }\n\n          return _this9.rebuild().then(function () {\n            return _this9.form;\n          });\n        });\n      }\n\n      return _nativePromiseOnly.default.resolve(form);\n    }\n  }, {\n    key: \"populateRecaptchaSettings\",\n    value: function populateRecaptchaSettings(form) {\n      //populate isEnabled for recaptcha form settings\n      var isRecaptchaEnabled = false;\n\n      if (this.form.components) {\n        (0, _formUtils.eachComponent)(form.components, function (component) {\n          if (isRecaptchaEnabled) {\n            return;\n          }\n\n          if (component.type === 'recaptcha') {\n            isRecaptchaEnabled = true;\n            return false;\n          }\n        });\n\n        if (isRecaptchaEnabled) {\n          _lodash.default.set(form, 'settings.recaptcha.isEnabled', true);\n        } else if (_lodash.default.get(form, 'settings.recaptcha.isEnabled')) {\n          _lodash.default.set(form, 'settings.recaptcha.isEnabled', false);\n        }\n      }\n    }\n  }, {\n    key: \"removeComponent\",\n    value: function removeComponent(component, parent, original) {\n      var _this10 = this;\n\n      if (!parent) {\n        return;\n      }\n\n      var remove = true;\n      var removingComponentsGroup = !component.skipRemoveConfirm && (Array.isArray(component.components) && component.components.length || Array.isArray(component.rows) && component.rows.length || Array.isArray(component.columns) && component.columns.length);\n\n      if (this.options.alwaysConfirmComponentRemoval || removingComponentsGroup) {\n        var message = removingComponentsGroup ? 'Removing this component will also remove all of its children. Are you sure you want to do this?' : 'Are you sure you want to remove this component?';\n        remove = window.confirm(this.t(message));\n      }\n\n      if (!original) {\n        original = parent.formioContainer.find(function (comp) {\n          return comp.id === component.id;\n        });\n      }\n\n      var index = parent.formioContainer ? parent.formioContainer.indexOf(original) : 0;\n\n      if (remove && index !== -1) {\n        var path = this.getComponentsPath(component, parent.formioComponent.component);\n\n        if (parent.formioContainer) {\n          parent.formioContainer.splice(index, 1);\n        } else if (parent.formioComponent && parent.formioComponent.removeChildComponent) {\n          parent.formioComponent.removeChildComponent(component);\n        }\n\n        var rebuild = parent.formioComponent.rebuild() || _nativePromiseOnly.default.resolve();\n\n        rebuild.then(function () {\n          _this10.emit('removeComponent', component, parent.formioComponent.schema, path, index);\n\n          _this10.emit('change', _this10.form);\n        });\n      }\n\n      return remove;\n    }\n  }, {\n    key: \"replaceDoubleQuotes\",\n    value: function replaceDoubleQuotes(data) {\n      var fieldsToRemoveDoubleQuotes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      if (data) {\n        fieldsToRemoveDoubleQuotes.forEach(function (key) {\n          if (data[key]) {\n            data[key] = data[key].replace(/\"/g, \"'\");\n          }\n        });\n        return data;\n      }\n    }\n  }, {\n    key: \"updateComponent\",\n    value: function updateComponent(component, changed) {\n      var _this11 = this; // Update the preview.\n\n\n      if (this.preview) {\n        this.preview.form = {\n          components: [_lodash.default.omit(_objectSpread({}, component), ['hidden', 'conditional', 'calculateValue', 'logic', 'autofocus', 'customConditional'])],\n          config: this.options.formConfig || {}\n        };\n        var fieldsToRemoveDoubleQuotes = ['label', 'tooltip', 'placeholder'];\n        this.preview.form.components.forEach(function (component) {\n          return _this11.replaceDoubleQuotes(component, fieldsToRemoveDoubleQuotes);\n        });\n        var previewElement = this.componentEdit.querySelector('[ref=\"preview\"]');\n\n        if (previewElement) {\n          this.setContent(previewElement, this.preview.render());\n          this.preview.attach(previewElement);\n        }\n      } // Change the \"default value\" field to be reflective of this component.\n\n\n      var defaultValueComponent = (0, _formUtils.getComponent)(this.editForm.components, 'defaultValue', true);\n\n      if (defaultValueComponent && component.type !== 'hidden') {\n        var defaultChanged = changed && (changed.component && changed.component.key === 'defaultValue' || changed.instance && defaultValueComponent.hasComponent && defaultValueComponent.hasComponent(changed.instance));\n\n        if (!defaultChanged) {\n          _lodash.default.assign(defaultValueComponent.component, _lodash.default.omit(_objectSpread({}, component), ['key', 'label', 'placeholder', 'tooltip', 'hidden', 'autofocus', 'validate', 'disabled', 'defaultValue', 'customDefaultValue', 'calculateValue', 'conditional', 'customConditional', 'id']));\n\n          var parentComponent = defaultValueComponent.parent;\n          var tabIndex = -1;\n          var index = -1;\n          parentComponent.tabs.some(function (tab, tIndex) {\n            tab.some(function (comp, compIndex) {\n              if (comp.id === defaultValueComponent.id) {\n                tabIndex = tIndex;\n                index = compIndex;\n                return true;\n              }\n\n              return false;\n            });\n          });\n\n          if (tabIndex !== -1 && index !== -1 && changed && changed.value) {\n            var sibling = parentComponent.tabs[tabIndex][index + 1];\n            parentComponent.removeComponent(defaultValueComponent);\n            var newComp = parentComponent.addComponent(defaultValueComponent.component, defaultValueComponent.data, sibling);\n\n            _lodash.default.pull(newComp.validators, 'required');\n\n            parentComponent.tabs[tabIndex].splice(index, 1, newComp);\n\n            newComp.checkValidity = function () {\n              return true;\n            };\n\n            newComp.build(defaultValueComponent.element);\n          }\n        } else {\n          var dataPath = changed.instance._data.key;\n          var path = (0, _utils.getArrayFromComponentPath)(changed.instance.path);\n          path.shift();\n\n          if (path.length) {\n            path.unshift(component.key);\n            dataPath = (0, _utils.getStringFromComponentPath)(path);\n          }\n\n          _lodash.default.set(this.preview._data, dataPath, changed.value);\n\n          _lodash.default.set(this.webform._data, dataPath, changed.value);\n        }\n      } // Called when we update a component.\n\n\n      this.emit('updateComponent', component);\n    }\n  }, {\n    key: \"findRepeatablePaths\",\n    value: function findRepeatablePaths() {\n      var repeatablePaths = [];\n      var keys = new Map();\n      (0, _formUtils.eachComponent)(this.form.components, function (comp, path) {\n        if (!comp.key) {\n          return;\n        }\n\n        if (keys.has(comp.key)) {\n          if (keys.get(comp.key).includes(path)) {\n            repeatablePaths.push(path);\n          } else {\n            keys.set(comp.key, [].concat(_toConsumableArray(keys.get(comp.key)), [path]));\n          }\n        } else {\n          keys.set(comp.key, [path]);\n        }\n      }, true);\n      return repeatablePaths;\n    }\n  }, {\n    key: \"highlightInvalidComponents\",\n    value: function highlightInvalidComponents() {\n      var repeatablePaths = this.findRepeatablePaths();\n      var hasInvalidComponents = false;\n      this.webform.everyComponent(function (comp) {\n        var _comp$error, _comp$error$message;\n\n        var path = comp.path;\n\n        if (repeatablePaths.includes(path)) {\n          comp.setCustomValidity(\"API Key is not unique: \".concat(comp.key));\n          hasInvalidComponents = true;\n        } else if ((_comp$error = comp.error) !== null && _comp$error !== void 0 && (_comp$error$message = _comp$error.message) !== null && _comp$error$message !== void 0 && _comp$error$message.startsWith('API Key is not unique')) {\n          comp.setCustomValidity('');\n        }\n      });\n      this.emit('builderFormValidityChange', hasInvalidComponents);\n    }\n    /**\n     * Called when a new component is saved.\n     *\n     * @param parent\n     * @param component\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"saveComponent\",\n    value: function saveComponent(component, parent, isNew, original) {\n      var _this12 = this;\n\n      this.editForm.detach();\n      var parentContainer = parent ? parent.formioContainer : this.container;\n      var parentComponent = parent ? parent.formioComponent : this;\n      this.dialog.close();\n      var path = parentContainer ? this.getComponentsPath(component, parentComponent.component) : '';\n\n      if (!original) {\n        original = parent.formioContainer.find(function (comp) {\n          return comp.id === component.id;\n        });\n      }\n\n      var index = parentContainer ? parentContainer.indexOf(original) : 0;\n\n      if (index !== -1) {\n        var submissionData = this.editForm.submission.data;\n        submissionData = submissionData.componentJson || submissionData;\n        var fieldsToRemoveDoubleQuotes = ['label', 'tooltip', 'placeholder'];\n        this.replaceDoubleQuotes(submissionData, fieldsToRemoveDoubleQuotes);\n        this.hook('beforeSaveComponentSettings', submissionData);\n        var comp = null;\n        parentComponent.getComponents().forEach(function (component) {\n          if (component.component.key === original.key) {\n            comp = component;\n          }\n        });\n        var originalComp = comp.component;\n        var originalComponentSchema = comp.schema;\n        var isParentSaveChildMethod = this.isParentSaveChildMethod(parent.formioComponent);\n\n        if (parentContainer && !isParentSaveChildMethod) {\n          parentContainer[index] = submissionData;\n\n          if (comp) {\n            comp.component = submissionData;\n          }\n        } else if (isParentSaveChildMethod) {\n          parent.formioComponent.saveChildComponent(submissionData);\n        }\n\n        var rebuild = parentComponent.rebuild() || _nativePromiseOnly.default.resolve();\n\n        return rebuild.then(function () {\n          var schema = parentContainer ? parentContainer[index] : comp ? comp.schema : [];\n\n          _this12.emitSaveComponentEvent(schema, originalComp, parentComponent.schema, path, index, isNew, originalComponentSchema);\n\n          _this12.emit('change', _this12.form);\n\n          _this12.highlightInvalidComponents();\n        });\n      }\n\n      this.highlightInvalidComponents();\n      return _nativePromiseOnly.default.resolve();\n    }\n  }, {\n    key: \"emitSaveComponentEvent\",\n    value: function emitSaveComponentEvent(schema, originalComp, parentComponentSchema, path, index, isNew, originalComponentSchema) {\n      this.emit('saveComponent', schema, originalComp, parentComponentSchema, path, index, isNew, originalComponentSchema);\n    }\n  }, {\n    key: \"editComponent\",\n    value: function editComponent(component, parent, isNew, isJsonEdit, original) {\n      var _this13 = this;\n\n      var flags = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\n      if (!component.key) {\n        return;\n      }\n\n      var saved = false;\n      var componentCopy = (0, _utils.fastCloneDeep)(component);\n      var ComponentClass = _Components.default.components[componentCopy.type];\n      var isCustom = ComponentClass === undefined;\n      isJsonEdit = isJsonEdit || isCustom;\n      ComponentClass = isCustom ? _Components.default.components.unknown : ComponentClass; // Make sure we only have one dialog open at a time.\n\n      if (this.dialog) {\n        this.dialog.close();\n        this.highlightInvalidComponents();\n      } // This is the render step.\n\n\n      var editFormOptions = _lodash.default.clone(_lodash.default.get(this, 'options.editForm', {}));\n\n      if (this.editForm) {\n        this.editForm.destroy();\n      } // Allow editForm overrides per component.\n\n\n      var overrides = _lodash.default.get(this.options, \"editForm.\".concat(componentCopy.type), {}); // Pass along the form being edited.\n\n\n      editFormOptions.editForm = this.form;\n      editFormOptions.editComponent = component;\n      editFormOptions.flags = flags;\n      this.hook('editComponentParentInstance', editFormOptions, parent);\n      this.editForm = new _Webform.default(_objectSpread(_objectSpread({}, _lodash.default.omit(this.options, ['hooks', 'builder', 'events', 'attachMode', 'skipInit'])), {}, {\n        language: this.options.language\n      }, editFormOptions));\n      this.hook('editFormProperties', parent);\n      this.editForm.form = isJsonEdit && !isCustom ? {\n        components: [{\n          type: 'textarea',\n          as: 'json',\n          editor: 'ace',\n          weight: 10,\n          input: true,\n          key: 'componentJson',\n          label: 'Component JSON',\n          tooltip: 'Edit the JSON for this component.'\n        }, {\n          type: 'checkbox',\n          key: 'showFullSchema',\n          label: 'Full Schema'\n        }]\n      } : ComponentClass.editForm(_lodash.default.cloneDeep(overrides));\n      var instanceOptions = {};\n      this.hook('instanceOptionsPreview', instanceOptions);\n      var instance = new ComponentClass(componentCopy, instanceOptions);\n      var schema = this.hook('builderComponentSchema', component, instance);\n      this.editForm.submission = isJsonEdit ? {\n        data: {\n          componentJson: schema,\n          showFullSchema: this.options.showFullJsonSchema\n        }\n      } : {\n        data: instance.component\n      };\n\n      if (this.preview) {\n        this.preview.destroy();\n      }\n\n      if (!ComponentClass.builderInfo.hasOwnProperty('preview') || ComponentClass.builderInfo.preview) {\n        this.preview = new _Webform.default(_lodash.default.omit(_objectSpread(_objectSpread({}, this.options), {}, {\n          preview: true\n        }), ['hooks', 'builder', 'events', 'attachMode', 'calculateValue']));\n        this.hook('previewFormSettitngs', schema, isJsonEdit);\n      }\n\n      this.componentEdit = this.ce('div', {\n        'class': 'component-edit-container'\n      });\n      this.setContent(this.componentEdit, this.renderTemplate('builderEditForm', {\n        componentInfo: ComponentClass.builderInfo,\n        editForm: this.editForm.render(),\n        preview: this.preview ? this.preview.render() : false,\n        helplinks: this.helplinks\n      }));\n      this.dialog = this.createModal(this.componentEdit, _lodash.default.get(this.options, 'dialogAttr', {})); // This is the attach step.\n\n      this.editForm.attach(this.componentEdit.querySelector('[ref=\"editForm\"]'));\n      this.hook('editFormWrapper');\n      this.updateComponent(componentCopy);\n      this.editForm.on('change', function (event) {\n        if (event.changed) {\n          if (event.changed.component && event.changed.component.key === 'showFullSchema') {\n            var value = event.changed.value;\n            _this13.editForm.submission = {\n              data: {\n                componentJson: value ? instance.component : component,\n                showFullSchema: value\n              }\n            };\n            return;\n          } // See if this is a manually modified key. Treat custom component keys as manually modified\n\n\n          if (event.changed.component && event.changed.component.key === 'key' || isJsonEdit) {\n            componentCopy.keyModified = true;\n          }\n\n          if (event.changed.component && ['label', 'title'].includes(event.changed.component.key)) {\n            // Ensure this component has a key.\n            if (isNew) {\n              if (!event.data.keyModified) {\n                _this13.editForm.everyComponent(function (component) {\n                  if (component.key === 'key' && component.parent.component.key === 'tabs') {\n                    component.setValue(_this13.updateComponentKey(event.data));\n                    return false;\n                  }\n                });\n              }\n\n              if (_this13.form) {\n                var formComponents = _this13.findNamespaceRoot(parent.formioComponent); // excluding component which key uniqueness is to be checked to prevent the comparing of the same keys\n\n\n                formComponents = formComponents.filter(function (comp) {\n                  return editFormOptions.editComponent.id !== comp.id;\n                }); // Set a unique key for this component.\n\n                _builder.default.uniquify(formComponents, event.data);\n              }\n            }\n          } // Update the component.\n\n\n          _this13.updateComponent(event.data.componentJson || event.data, event.changed);\n        }\n      });\n      var cancelButtons = this.componentEdit.querySelectorAll('[ref=\"cancelButton\"]');\n      cancelButtons.forEach(function (cancelButton) {\n        _this13.addEventListener(cancelButton, 'click', function (event) {\n          event.preventDefault();\n\n          _this13.editForm.detach();\n\n          _this13.emit('cancelComponent', component);\n\n          _this13.dialog.close();\n\n          _this13.highlightInvalidComponents();\n        });\n      });\n      var removeButtons = this.componentEdit.querySelectorAll('[ref=\"removeButton\"]');\n      removeButtons.forEach(function (removeButton) {\n        _this13.addEventListener(removeButton, 'click', function (event) {\n          event.preventDefault(); // Since we are already removing the component, don't trigger another remove.\n\n          saved = true;\n\n          _this13.editForm.detach();\n\n          _this13.removeComponent(component, parent, original);\n\n          _this13.dialog.close();\n\n          _this13.highlightInvalidComponents();\n        });\n      });\n      var saveButtons = this.componentEdit.querySelectorAll('[ref=\"saveButton\"]');\n      saveButtons.forEach(function (saveButton) {\n        _this13.addEventListener(saveButton, 'click', function (event) {\n          event.preventDefault();\n\n          if (!_this13.editForm.checkValidity(_this13.editForm.data, true, _this13.editForm.data)) {\n            _this13.editForm.setPristine(false);\n\n            _this13.editForm.showErrors();\n\n            return false;\n          }\n\n          saved = true;\n\n          _this13.saveComponent(component, parent, isNew, original);\n        });\n      });\n\n      var dialogClose = function dialogClose() {\n        _this13.editForm.destroy(true);\n\n        if (_this13.preview) {\n          _this13.preview.destroy(true);\n\n          _this13.preview = null;\n        }\n\n        if (isNew && !saved) {\n          _this13.removeComponent(component, parent, original);\n\n          _this13.highlightInvalidComponents();\n        } // Clean up.\n\n\n        _this13.removeEventListener(_this13.dialog, 'close', dialogClose);\n\n        _this13.dialog = null;\n      };\n\n      this.addEventListener(this.dialog, 'close', dialogClose); // Called when we edit a component.\n\n      this.emit('editComponent', component);\n    }\n  }, {\n    key: \"updateComponentKey\",\n    value: function updateComponentKey(data) {\n      return _lodash.default.camelCase(data.title || data.label || data.placeholder || data.type).replace(/^[0-9]*/, '');\n    }\n    /**\n     * Creates copy of component schema and stores it under sessionStorage.\n     * @param {Component} component\n     * @return {*}\n     */\n\n  }, {\n    key: \"copyComponent\",\n    value: function copyComponent(component) {\n      if (!window.sessionStorage) {\n        return console.warn('Session storage is not supported in this browser.');\n      }\n\n      this.addClass(this.refs.form, 'builder-paste-mode');\n      window.sessionStorage.setItem('formio.clipboard', JSON.stringify(component.schema));\n    }\n    /**\n     * Paste copied component after the current component.\n     * @param {Component} component\n     * @return {*}\n     */\n\n  }, {\n    key: \"pasteComponent\",\n    value: function pasteComponent(component) {\n      if (!window.sessionStorage) {\n        return console.warn('Session storage is not supported in this browser.');\n      }\n\n      this.removeClass(this.refs.form, 'builder-paste-mode');\n\n      if (window.sessionStorage) {\n        var data = window.sessionStorage.getItem('formio.clipboard');\n\n        if (data) {\n          var schema = JSON.parse(data);\n          var parent = this.getParentElement(component.element);\n\n          if (parent) {\n            _builder.default.uniquify(this.findNamespaceRoot(parent.formioComponent), schema);\n\n            var path = '';\n            var index = 0;\n            var isParentSaveChildMethod = this.isParentSaveChildMethod(parent.formioComponent);\n\n            if (parent.formioContainer && !isParentSaveChildMethod) {\n              index = parent.formioContainer.indexOf(component.component);\n              path = this.getComponentsPath(schema, parent.formioComponent.component);\n              parent.formioContainer.splice(index + 1, 0, schema);\n            } else if (isParentSaveChildMethod) {\n              parent.formioComponent.saveChildComponent(schema, false);\n            }\n\n            parent.formioComponent.rebuild();\n            this.emitSaveComponentEvent(schema, schema, parent.formioComponent.component, path, index + 1, true, schema);\n          }\n\n          this.emit('change', this.form);\n        }\n      }\n    }\n  }, {\n    key: \"isParentSaveChildMethod\",\n    value: function isParentSaveChildMethod(parentComp) {\n      return !!(parentComp && parentComp.saveChildComponent);\n    }\n  }, {\n    key: \"getParentElement\",\n    value: function getParentElement(element) {\n      var container = element;\n\n      do {\n        container = container.parentNode;\n      } while (container && !container.formioComponent);\n\n      return container;\n    }\n  }, {\n    key: \"addBuilderComponentInfo\",\n    value: function addBuilderComponentInfo(component) {\n      if (!component || !component.group || !this.groups[component.group]) {\n        return;\n      }\n\n      component = _lodash.default.clone(component);\n      var groupInfo = this.groups[component.group];\n\n      if (!groupInfo.components.hasOwnProperty(component.key)) {\n        groupInfo.components[component.key] = component;\n      }\n\n      return component;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      if (this.webform) {\n        this.webform.init();\n      }\n\n      return _get(_getPrototypeOf(WebformBuilder.prototype), \"init\", this).call(this);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (this.webform.initialized) {\n        this.webform.clear();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(deleteFromGlobal) {\n      if (this.webform.initialized) {\n        this.webform.destroy(deleteFromGlobal);\n      }\n\n      _get(_getPrototypeOf(WebformBuilder.prototype), \"destroy\", this).call(this, deleteFromGlobal);\n    }\n  }, {\n    key: \"addBuilderGroup\",\n    value: function addBuilderGroup(name, group) {\n      if (!this.groups[name]) {\n        this.groups[name] = group;\n        this.groupOrder.push(name);\n        this.triggerRedraw();\n      } else {\n        this.updateBuilderGroup(name, group);\n      }\n    }\n  }, {\n    key: \"updateBuilderGroup\",\n    value: function updateBuilderGroup(name, group) {\n      if (this.groups[name]) {\n        this.groups[name] = group;\n        this.triggerRedraw();\n      }\n    }\n  }, {\n    key: \"generateKey\",\n    value: function generateKey(info) {\n      return _lodash.default.camelCase(info.key || info.title || info.label || info.placeholder || info.type);\n    }\n  }]);\n\n  return WebformBuilder;\n}(_Component2.default);\n\nexports.default = WebformBuilder;","map":null,"metadata":{},"sourceType":"script"}