{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.find-index\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.number.constructor\");\n\nrequire(\"core-js/modules/es.number.parse-int\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Component2 = _interopRequireDefault(require(\"../_classes/component/Component\"));\n\nvar _ComponentModal = _interopRequireDefault(require(\"../_classes/componentModal/ComponentModal\"));\n\nvar _eventemitter = _interopRequireDefault(require(\"eventemitter3\"));\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _utils = require(\"../../utils/utils\");\n\nvar _Formio = require(\"../../Formio\");\n\nvar _Form = _interopRequireDefault(require(\"../../Form\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar FormComponent = /*#__PURE__*/function (_Component) {\n  _inherits(FormComponent, _Component);\n\n  var _super = _createSuper(FormComponent);\n\n  function FormComponent() {\n    _classCallCheck(this, FormComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FormComponent, [{\n    key: \"init\",\n    value: function init() {\n      _get(_getPrototypeOf(FormComponent.prototype), \"init\", this).call(this);\n\n      this.formObj = {\n        display: this.component.display,\n        settings: this.component.settings,\n        components: this.component.components\n      };\n      this.valueChanged = false;\n      this.subForm = null;\n      this.formSrc = '';\n\n      if (this.component.src) {\n        this.formSrc = this.component.src;\n      }\n\n      if (!this.component.src && !this.options.formio && (this.component.form || this.component.path)) {\n        if (this.component.project) {\n          this.formSrc = _Formio.GlobalFormio.getBaseUrl(); // Check to see if it is a MongoID.\n\n          if ((0, _utils.isMongoId)(this.component.project)) {\n            this.formSrc += '/project';\n          }\n\n          this.formSrc += \"/\".concat(this.component.project);\n          this.options.project = this.formSrc;\n        } else {\n          this.formSrc = _Formio.GlobalFormio.getProjectUrl();\n          this.options.project = this.formSrc;\n        }\n\n        if (this.component.form) {\n          if ((0, _utils.isMongoId)(this.component.form)) {\n            this.formSrc += \"/form/\".concat(this.component.form);\n          } else {\n            this.formSrc += \"/\".concat(this.component.form);\n          }\n        } else if (this.component.path) {\n          this.formSrc += \"/\".concat(this.component.path);\n        }\n      } // Build the source based on the root src path.\n\n\n      if (!this.formSrc && this.options.formio) {\n        var rootSrc = this.options.formio.formsUrl;\n\n        if (this.component.form && (0, _utils.isMongoId)(this.component.form)) {\n          this.formSrc = \"\".concat(rootSrc, \"/\").concat(this.component.form);\n        } else {\n          var formPath = this.component.path || this.component.form;\n          this.formSrc = \"\".concat(rootSrc.replace(/\\/form$/, ''), \"/\").concat(formPath);\n        }\n      }\n\n      if (this.builderMode && this.component.hasOwnProperty('formRevision')) {\n        this.component.revision = this.component.formRevision;\n        delete this.component.formRevision;\n      } // Add revision version if set.\n\n\n      if (this.component.revision || this.component.revision === 0 || this.component.formRevision || this.component.formRevision === 0 || this.component.revisionId) {\n        this.setFormRevision(this.component.revisionId || this.component.revision || this.component.formRevision);\n      }\n\n      return this.createSubForm();\n    }\n  }, {\n    key: \"dataReady\",\n    get: function get() {\n      return this.subFormReady || _nativePromiseOnly.default.resolve();\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      // Not not provide a default value unless the subform is ready so that it will initialize correctly.\n      return this.subForm ? _get(_getPrototypeOf(FormComponent.prototype), \"defaultValue\", this) : null;\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return FormComponent.schema();\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return {\n        data: {}\n      };\n    }\n  }, {\n    key: \"ready\",\n    get: function get() {\n      return this.subFormReady || _nativePromiseOnly.default.resolve();\n    }\n  }, {\n    key: \"useOriginalRevision\",\n    get: function get() {\n      var _this$component, _this$formObj;\n\n      return ((_this$component = this.component) === null || _this$component === void 0 ? void 0 : _this$component.useOriginalRevision) && !!((_this$formObj = this.formObj) !== null && _this$formObj !== void 0 && _this$formObj.revisions);\n    }\n  }, {\n    key: \"setFormRevision\",\n    value: function setFormRevision(rev) {\n      // Remove current revisions from src if it is\n      this.formSrc = this.formSrc.replace(/\\/v\\/[0-9a-z]+/, '');\n      var revNumber = Number.parseInt(rev);\n\n      if (!isNaN(revNumber)) {\n        this.subFormRevision = rev;\n        this.formSrc += \"/v/\".concat(rev);\n      } else {\n        this.subFormRevision = undefined;\n      }\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(path, fn) {\n      path = (0, _utils.getArrayFromComponentPath)(path);\n\n      if (path[0] === 'data') {\n        path.shift();\n      }\n\n      var originalPathStr = \"\".concat(this.path, \".data.\").concat((0, _utils.getStringFromComponentPath)(path));\n\n      if (this.subForm) {\n        return this.subForm.getComponent(path, fn, originalPathStr);\n      }\n    }\n  }, {\n    key: \"getSubOptions\",\n    value: function getSubOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      options.parentPath = \"\".concat(this.path, \".data.\");\n      options.events = this.createEmitter(); // Make sure to not show the submit button in wizards in the nested forms.\n\n      _lodash.default.set(options, 'buttonSettings.showSubmit', false);\n\n      if (!this.options) {\n        return options;\n      }\n\n      if (this.options.base) {\n        options.base = this.options.base;\n      }\n\n      if (this.options.project) {\n        options.project = this.options.project;\n      }\n\n      if (this.options.readOnly || this.component.disabled) {\n        options.readOnly = this.options.readOnly || this.component.disabled;\n      }\n\n      if (this.options.breadcrumbSettings) {\n        options.breadcrumbSettings = this.options.breadcrumbSettings;\n      }\n\n      if (this.options.buttonSettings) {\n        options.buttonSettings = _lodash.default.clone(this.options.buttonSettings);\n      }\n\n      if (this.options.viewAsHtml) {\n        options.viewAsHtml = this.options.viewAsHtml;\n      }\n\n      if (this.options.language) {\n        options.language = this.options.language;\n      }\n\n      if (this.options.template) {\n        options.template = this.options.template;\n      }\n\n      if (this.options.templates) {\n        options.templates = this.options.templates;\n      }\n\n      if (this.options.renderMode) {\n        options.renderMode = this.options.renderMode;\n      }\n\n      if (this.options.attachMode) {\n        options.attachMode = this.options.attachMode;\n      }\n\n      if (this.options.iconset) {\n        options.iconset = this.options.iconset;\n      }\n\n      if (this.options.fileService) {\n        options.fileService = this.options.fileService;\n      }\n\n      if (this.options.onChange) {\n        options.onChange = this.options.onChange;\n      }\n\n      return options;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.builderMode) {\n        return _get(_getPrototypeOf(FormComponent.prototype), \"render\", this).call(this, this.component.label || 'Nested form');\n      }\n\n      var subform = this.subForm ? this.subForm.render() : this.renderTemplate('loading');\n      return _get(_getPrototypeOf(FormComponent.prototype), \"render\", this).call(this, subform);\n    }\n  }, {\n    key: \"asString\",\n    value: function asString(value) {\n      return this.getValueAsString(value);\n    }\n    /**\n     * Prints out the value of form components as a datagrid value.\n     */\n\n  }, {\n    key: \"getValueAsString\",\n    value: function getValueAsString(value) {\n      if (!value) {\n        return 'No data provided';\n      }\n\n      if (!value.data && value._id) {\n        return value._id;\n      }\n\n      if (!value.data || !Object.keys(value.data).length) {\n        return 'No data provided';\n      }\n\n      return '[Complex Data]';\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this = this; // Don't attach in builder.\n\n\n      if (this.builderMode) {\n        return _get(_getPrototypeOf(FormComponent.prototype), \"attach\", this).call(this, element);\n      }\n\n      return _get(_getPrototypeOf(FormComponent.prototype), \"attach\", this).call(this, element).then(function () {\n        if (_this.isSubFormLazyLoad() && !_this.hasLoadedForm && !_this.subFormLoading) {\n          _this.createSubForm(true);\n        }\n\n        return _this.subFormReady.then(function () {\n          _this.empty(element);\n\n          if (_this.options.builder) {\n            _this.setContent(element, _this.ce('div', {\n              class: 'text-muted text-center p-2'\n            }, _this.text(_this.formObj.title)));\n\n            return;\n          }\n\n          _this.setContent(element, _this.render());\n\n          if (_this.subForm) {\n            if (_this.isNestedWizard) {\n              element = _this.root.element;\n            }\n\n            _this.subForm.attach(element);\n\n            _this.valueChanged = _this.hasSetValue;\n\n            if (!_this.valueChanged && _this.dataValue.state !== 'submitted') {\n              _this.setDefaultValue();\n            } else {\n              _this.restoreValue();\n            }\n          }\n\n          if (!_this.builderMode && _this.component.modalEdit) {\n            var modalShouldBeOpened = _this.componentModal ? _this.componentModal.isOpened : false;\n            var currentValue = modalShouldBeOpened ? _this.componentModal.currentValue : _this.dataValue;\n            _this.componentModal = new _ComponentModal.default(_this, element, modalShouldBeOpened, currentValue);\n\n            _this.setOpenModalElement();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this.subForm) {\n        this.subForm.detach();\n      }\n\n      _get(_getPrototypeOf(FormComponent.prototype), \"detach\", this).call(this);\n    }\n  }, {\n    key: \"currentForm\",\n    get: function get() {\n      return this._currentForm;\n    },\n    set: function set(instance) {\n      var _this2 = this;\n\n      this._currentForm = instance;\n\n      if (!this.subForm) {\n        return;\n      }\n\n      this.subForm.getComponents().forEach(function (component) {\n        component.currentForm = _this2;\n      });\n    }\n  }, {\n    key: \"hasLoadedForm\",\n    get: function get() {\n      return this.formObj && this.formObj.components && Array.isArray(this.formObj.components) && this.formObj.components.length;\n    }\n  }, {\n    key: \"isRevisionChanged\",\n    get: function get() {\n      return _lodash.default.isNumber(this.subFormRevision) && _lodash.default.isNumber(this.formObj._vid) && this.formObj._vid !== this.subFormRevision;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subForm) {\n        this.subForm.destroy();\n        this.subForm = null;\n        this.subFormReady = null;\n      }\n\n      _get(_getPrototypeOf(FormComponent.prototype), \"destroy\", this).call(this);\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      if (this.subForm) {\n        this.subForm.form = this.formObj;\n        this.setSubFormDisabled(this.subForm);\n      }\n\n      return _get(_getPrototypeOf(FormComponent.prototype), \"redraw\", this).call(this);\n    }\n    /**\n     * Pass everyComponent to subform.\n     * @param args\n     * @returns {*|void}\n     */\n\n  }, {\n    key: \"everyComponent\",\n    value: function everyComponent() {\n      if (this.subForm) {\n        var _this$subForm;\n\n        (_this$subForm = this.subForm).everyComponent.apply(_this$subForm, arguments);\n      }\n    }\n  }, {\n    key: \"setSubFormDisabled\",\n    value: function setSubFormDisabled(subForm) {\n      subForm.disabled = this.disabled; // When the Nested Form is disabled make the subForm disabled\n    }\n  }, {\n    key: \"updateSubWizards\",\n    value: function updateSubWizards(subForm) {\n      var _this$root,\n          _subForm$_form,\n          _this3 = this;\n\n      if (this.isNestedWizard && (_this$root = this.root) !== null && _this$root !== void 0 && _this$root.subWizards && (subForm === null || subForm === void 0 ? void 0 : (_subForm$_form = subForm._form) === null || _subForm$_form === void 0 ? void 0 : _subForm$_form.display) === 'wizard') {\n        var existedForm = this.root.subWizards.findIndex(function (form) {\n          return form.component.form === _this3.component.form;\n        });\n\n        if (existedForm !== -1) {\n          this.root.subWizards[existedForm] = this;\n        } else {\n          this.root.subWizards.push(this);\n        }\n\n        this.emit('subWizardsUpdated', subForm);\n      }\n    }\n    /**\n     * Create a subform instance.\n     *\n     * @return {*}\n     */\n\n  }, {\n    key: \"createSubForm\",\n    value: function createSubForm(fromAttach) {\n      var _this4 = this;\n\n      this.subFormReady = this.loadSubForm(fromAttach).then(function (form) {\n        if (!form) {\n          return;\n        } // Iterate through every component and hide the submit button.\n\n\n        (0, _utils.eachComponent)(form.components, function (component) {\n          _this4.hideSubmitButton(component);\n        }); // If the subform is already created then destroy the old one.\n\n        if (_this4.subForm) {\n          _this4.subForm.destroy();\n        } // Render the form.\n\n\n        return new _Form.default(form, _this4.getSubOptions()).ready.then(function (instance) {\n          _this4.subForm = instance;\n          _this4.subForm.currentForm = _this4;\n          _this4.subForm.parent = _this4;\n          _this4.subForm.parentVisible = _this4.visible;\n\n          _this4.subForm.on('change', function () {\n            if (_this4.subForm) {\n              _this4.dataValue = _this4.subForm.getValue();\n\n              _this4.triggerChange({\n                noEmit: true\n              });\n            }\n          });\n\n          _this4.subForm.url = _this4.formSrc;\n          _this4.subForm.nosubmit = true;\n          _this4.subForm.root = _this4.root;\n          _this4.subForm.localRoot = _this4.isNestedWizard ? _this4.localRoot : _this4.subForm;\n\n          _this4.restoreValue();\n\n          _this4.valueChanged = _this4.hasSetValue;\n\n          _this4.onChange();\n\n          return _this4.subForm;\n        });\n      }).then(function (subForm) {\n        _this4.updateSubWizards(subForm);\n\n        return subForm;\n      });\n      return this.subFormReady;\n    }\n  }, {\n    key: \"hideSubmitButton\",\n    value: function hideSubmitButton(component) {\n      var isSubmitButton = component.type === 'button' && (component.action === 'submit' || !component.action);\n\n      if (isSubmitButton) {\n        component.hidden = true;\n      }\n    }\n    /**\n     * Load the subform.\n     */\n\n  }, {\n    key: \"loadSubForm\",\n    value: function loadSubForm(fromAttach) {\n      var _this5 = this;\n\n      if (this.builderMode || this.isHidden() || this.isSubFormLazyLoad() && !fromAttach) {\n        return _nativePromiseOnly.default.resolve();\n      }\n\n      if (this.hasLoadedForm && !this.isRevisionChanged) {\n        // Pass config down to sub forms.\n        if (this.root && this.root.form && this.root.form.config && !this.formObj.config) {\n          this.formObj.config = this.root.form.config;\n        }\n\n        return _nativePromiseOnly.default.resolve(this.formObj);\n      } else if (this.formSrc) {\n        this.subFormLoading = true;\n        return new _Formio.GlobalFormio(this.formSrc).loadForm({\n          params: {\n            live: 1\n          }\n        }).then(function (formObj) {\n          _this5.formObj = formObj;\n          _this5.subFormLoading = false;\n          return formObj;\n        }).catch(function (err) {\n          console.log(err);\n          return null;\n        });\n      }\n\n      return _nativePromiseOnly.default.resolve();\n    }\n  }, {\n    key: \"subFormData\",\n    get: function get() {\n      var _this$dataValue;\n\n      return ((_this$dataValue = this.dataValue) === null || _this$dataValue === void 0 ? void 0 : _this$dataValue.data) || {};\n    }\n  }, {\n    key: \"checkComponentValidity\",\n    value: function checkComponentValidity(data, dirty, row, options) {\n      options = options || {};\n      var silentCheck = options.silentCheck || false;\n\n      if (this.subForm) {\n        return this.subForm.checkValidity(this.subFormData, dirty, null, silentCheck);\n      }\n\n      return _get(_getPrototypeOf(FormComponent.prototype), \"checkComponentValidity\", this).call(this, data, dirty, row, options);\n    }\n  }, {\n    key: \"checkComponentConditions\",\n    value: function checkComponentConditions(data, flags, row) {\n      var _this6 = this;\n\n      var visible = _get(_getPrototypeOf(FormComponent.prototype), \"checkComponentConditions\", this).call(this, data, flags, row); // Return if already hidden\n\n\n      if (!visible) {\n        return visible;\n      }\n\n      if (this.subForm) {\n        return this.subForm.checkConditions(this.subFormData);\n      } // There are few cases when subForm is not loaded when a change is triggered,\n      // so we need to perform checkConditions after it is ready, or some conditional fields might be hidden in View mode\n      else if (this.subFormReady) {\n        this.subFormReady.then(function () {\n          if (_this6.subForm) {\n            return _this6.subForm.checkConditions(_this6.subFormData);\n          }\n        });\n      }\n\n      return visible;\n    }\n  }, {\n    key: \"calculateValue\",\n    value: function calculateValue(data, flags, row) {\n      if (this.subForm) {\n        return this.subForm.calculateValue(this.subFormData, flags);\n      }\n\n      return _get(_getPrototypeOf(FormComponent.prototype), \"calculateValue\", this).call(this, data, flags, row);\n    }\n  }, {\n    key: \"setPristine\",\n    value: function setPristine(pristine) {\n      _get(_getPrototypeOf(FormComponent.prototype), \"setPristine\", this).call(this, pristine);\n\n      if (this.subForm) {\n        this.subForm.setPristine(pristine);\n      }\n    }\n    /**\n     * Determine if the subform should be submitted.\n     * @return {*|boolean}\n     */\n\n  }, {\n    key: \"shouldSubmit\",\n    get: function get() {\n      return this.subFormReady && (!this.component.hasOwnProperty('reference') || this.component.reference) && !this.isHidden();\n    }\n    /**\n     * Returns the data for the subform.\n     *\n     * @return {*}\n     */\n\n  }, {\n    key: \"getSubFormData\",\n    value: function getSubFormData() {\n      if (_lodash.default.get(this.subForm, 'form.display') === 'pdf') {\n        return this.subForm.getSubmission();\n      } else {\n        return _nativePromiseOnly.default.resolve(this.dataValue);\n      }\n    }\n    /**\n     * Submit the subform if configured to do so.\n     *\n     * @return {*}\n     */\n\n  }, {\n    key: \"submitSubForm\",\n    value: function submitSubForm(rejectOnError) {\n      var _this7 = this; // If we wish to submit the form on next page, then do that here.\n\n\n      if (this.shouldSubmit) {\n        return this.subFormReady.then(function () {\n          if (!_this7.subForm) {\n            return _this7.dataValue;\n          }\n\n          _this7.subForm.nosubmit = false;\n          return _this7.subForm.submitForm().then(function (result) {\n            _this7.subForm.loading = false;\n            _this7.subForm.showAllErrors = false;\n            _this7.dataValue = result.submission;\n            return _this7.dataValue;\n          }).catch(function (err) {\n            _this7.subForm.showAllErrors = true;\n\n            if (rejectOnError) {\n              _this7.subForm.onSubmissionError(err);\n\n              return _nativePromiseOnly.default.reject(err);\n            } else {\n              return {};\n            }\n          });\n        });\n      }\n\n      return this.getSubFormData();\n    }\n    /**\n     * Submit the form before the next page is triggered.\n     */\n\n  }, {\n    key: \"beforePage\",\n    value: function beforePage(next) {\n      var _this8 = this; // Should not submit child forms if we are going to the previous page\n\n\n      if (!next) {\n        return _get(_getPrototypeOf(FormComponent.prototype), \"beforePage\", this).call(this, next);\n      }\n\n      return this.submitSubForm(true).then(function () {\n        return _get(_getPrototypeOf(FormComponent.prototype), \"beforePage\", _this8).call(_this8, next);\n      });\n    }\n    /**\n     * Submit the form before the whole form is triggered.\n     */\n\n  }, {\n    key: \"beforeSubmit\",\n    value: function beforeSubmit() {\n      var _this$subForm2,\n          _this9 = this;\n\n      var submission = this.dataValue;\n      var isAlreadySubmitted = submission && submission._id && submission.form; // This submission has already been submitted, so just return the reference data.\n\n      if (isAlreadySubmitted && !((_this$subForm2 = this.subForm) !== null && _this$subForm2 !== void 0 && _this$subForm2.wizard)) {\n        this.dataValue = submission;\n        return _nativePromiseOnly.default.resolve(this.dataValue);\n      }\n\n      return this.submitSubForm(false).then(function () {\n        return _this9.dataValue;\n      }).then(function () {\n        return _get(_getPrototypeOf(FormComponent.prototype), \"beforeSubmit\", _this9).call(_this9);\n      });\n    }\n  }, {\n    key: \"isSubFormLazyLoad\",\n    value: function isSubFormLazyLoad() {\n      var _this$root2, _this$root2$_form;\n\n      return ((_this$root2 = this.root) === null || _this$root2 === void 0 ? void 0 : (_this$root2$_form = _this$root2._form) === null || _this$root2$_form === void 0 ? void 0 : _this$root2$_form.display) === 'wizard' && this.component.lazyLoad;\n    }\n  }, {\n    key: \"isHidden\",\n    value: function isHidden() {\n      if (!this.visible) {\n        return true;\n      }\n\n      return !_get(_getPrototypeOf(FormComponent.prototype), \"checkConditions\", this).call(this, this.rootValue);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(submission) {\n      var _this10 = this;\n\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var changed = _get(_getPrototypeOf(FormComponent.prototype), \"setValue\", this).call(this, submission, flags);\n\n      this.valueChanged = true;\n\n      if (this.subForm) {\n        var _this$subForm$form;\n\n        var revisionPath = submission._frid ? '_frid' : '_vid';\n        var shouldLoadOriginalRevision = this.useOriginalRevision && _lodash.default.isNumber(submission[revisionPath]) && _lodash.default.isNumber((_this$subForm$form = this.subForm.form) === null || _this$subForm$form === void 0 ? void 0 : _this$subForm$form[revisionPath]) && submission._fvid !== this.subForm.form[revisionPath];\n\n        if (shouldLoadOriginalRevision) {\n          this.setFormRevision(submission._frid || submission._fvid);\n          this.createSubForm().then(function () {\n            _this10.attach(_this10.element);\n          });\n        } else {\n          this.setSubFormValue(submission, flags);\n        }\n      }\n\n      return changed;\n    }\n  }, {\n    key: \"setSubFormValue\",\n    value: function setSubFormValue(submission, flags) {\n      var shouldLoadSubmissionById = submission && submission._id && this.subForm.formio && _lodash.default.isEmpty(submission.data);\n\n      if (shouldLoadSubmissionById) {\n        var formId = submission.form || this.formObj.form || this.component.form;\n        var submissionUrl = \"\".concat(this.subForm.formio.formsUrl, \"/\").concat(formId, \"/submission/\").concat(submission._id);\n        this.subForm.setUrl(submissionUrl, this.options);\n        this.subForm.loadSubmission();\n      } else {\n        this.subForm.setValue(submission, flags);\n      }\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dataValue;\n      return value === null || _lodash.default.isEqual(value, this.emptyValue) || this.areAllComponentsEmpty(value.data) && !value._id;\n    }\n  }, {\n    key: \"areAllComponentsEmpty\",\n    value: function areAllComponentsEmpty(data) {\n      var res = true;\n\n      if (this.subForm) {\n        this.subForm.everyComponent(function (comp) {\n          var componentValue = _lodash.default.get(data, comp.key);\n\n          res &= comp.isEmpty(componentValue);\n        });\n      } else {\n        res = false;\n      }\n\n      return res;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      if (this.subForm) {\n        return this.subForm.getValue();\n      }\n\n      return this.dataValue;\n    }\n  }, {\n    key: \"errors\",\n    get: function get() {\n      var errors = _get(_getPrototypeOf(FormComponent.prototype), \"errors\", this);\n\n      if (this.subForm) {\n        errors = errors.concat(this.subForm.errors);\n      }\n\n      return errors;\n    }\n  }, {\n    key: \"updateSubFormVisibility\",\n    value: function updateSubFormVisibility() {\n      if (this.subForm) {\n        this.subForm.parentVisible = this.visible;\n      }\n    }\n    /**\n     * Determines if this form is a Nested Wizard\n     * which means it should be a Wizard itself and should be a direct child of a Wizard's page\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNestedWizard\",\n    get: function get() {\n      var _this$subForm3, _this$subForm3$_form, _this$parent, _this$parent$parent, _this$parent$parent$_;\n\n      return ((_this$subForm3 = this.subForm) === null || _this$subForm3 === void 0 ? void 0 : (_this$subForm3$_form = _this$subForm3._form) === null || _this$subForm3$_form === void 0 ? void 0 : _this$subForm3$_form.display) === 'wizard' && ((_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : (_this$parent$parent = _this$parent.parent) === null || _this$parent$parent === void 0 ? void 0 : (_this$parent$parent$_ = _this$parent$parent._form) === null || _this$parent$parent$_ === void 0 ? void 0 : _this$parent$parent$_.display) === 'wizard';\n    }\n  }, {\n    key: \"visible\",\n    get: function get() {\n      return _get(_getPrototypeOf(FormComponent.prototype), \"visible\", this);\n    },\n    set: function set(value) {\n      var _this11 = this;\n\n      var isNestedWizard = this.isNestedWizard;\n\n      if (this._visible !== value) {\n        this._visible = value; // Form doesn't load if hidden. If it becomes visible, create the form.\n\n        if (!this.subForm && value) {\n          this.createSubForm();\n          this.subFormReady.then(function () {\n            _this11.updateSubFormVisibility();\n\n            _this11.clearOnHide();\n          });\n          this.redraw();\n          return;\n        }\n\n        this.updateSubFormVisibility();\n        this.clearOnHide();\n        isNestedWizard ? this.rebuild() : this.redraw();\n      }\n\n      if (!value && isNestedWizard) {\n        this.root.redraw();\n      }\n    }\n  }, {\n    key: \"parentVisible\",\n    get: function get() {\n      return _get(_getPrototypeOf(FormComponent.prototype), \"parentVisible\", this);\n    },\n    set: function set(value) {\n      var _this12 = this;\n\n      if (this._parentVisible !== value) {\n        this._parentVisible = value;\n        this.clearOnHide(); // Form doesn't load if hidden. If it becomes visible, create the form.\n\n        if (!this.subForm && value) {\n          this.createSubForm();\n          this.subFormReady.then(function () {\n            _this12.updateSubFormVisibility();\n          });\n          this.redraw();\n          return;\n        }\n\n        this.updateSubFormVisibility();\n        this.redraw();\n      }\n    }\n  }, {\n    key: \"isInternalEvent\",\n    value: function isInternalEvent(event) {\n      switch (event) {\n        case 'focus':\n        case 'blur':\n        case 'componentChange':\n        case 'componentError':\n        case 'error':\n        case 'formLoad':\n        case 'languageChanged':\n        case 'render':\n        case 'checkValidity':\n        case 'initialized':\n        case 'submit':\n        case 'submitButton':\n        case 'nosubmit':\n        case 'updateComponent':\n        case 'submitDone':\n        case 'submissionDeleted':\n        case 'requestDone':\n        case 'nextPage':\n        case 'prevPage':\n        case 'wizardNavigationClicked':\n        case 'updateWizardNav':\n        case 'restoreDraft':\n        case 'saveDraft':\n        case 'saveComponent':\n        case 'pdfUploaded':\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"createEmitter\",\n    value: function createEmitter() {\n      var emitter = new _eventemitter.default();\n      var nativeEmit = emitter.emit;\n      var that = this;\n\n      emitter.emit = function (event) {\n        var eventType = event.replace(\"\".concat(that.options.namespace, \".\"), '');\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        nativeEmit.call.apply(nativeEmit, [this, event].concat(args));\n\n        if (!that.isInternalEvent(eventType)) {\n          that.emit.apply(that, [eventType].concat(args));\n        }\n      };\n\n      return emitter;\n    }\n  }, {\n    key: \"deleteValue\",\n    value: function deleteValue() {\n      _get(_getPrototypeOf(FormComponent.prototype), \"setValue\", this).call(this, null, {\n        noUpdateEvent: true,\n        noDefault: true\n      });\n\n      this.unset();\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len2 = arguments.length, extend = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        extend[_key2] = arguments[_key2];\n      }\n\n      return _Component2.default.schema.apply(_Component2.default, [{\n        label: 'Form',\n        type: 'form',\n        key: 'form',\n        src: '',\n        reference: true,\n        form: '',\n        path: '',\n        tableView: true\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Nested Form',\n        icon: 'wpforms',\n        group: 'premium',\n        documentation: '/userguide/#form',\n        weight: 110,\n        schema: FormComponent.schema()\n      };\n    }\n  }]);\n\n  return FormComponent;\n}(_Component2.default);\n\nexports.default = FormComponent;","map":null,"metadata":{},"sourceType":"script"}