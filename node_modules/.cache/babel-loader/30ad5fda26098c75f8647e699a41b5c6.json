{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.object.assign\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.weak-map\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Element2 = _interopRequireDefault(require(\"./Element\"));\n\nvar _Formio = require(\"./Formio\");\n\nvar _displays = _interopRequireDefault(require(\"./displays\"));\n\nvar _templates = _interopRequireDefault(require(\"./templates\"));\n\nvar FormioUtils = _interopRequireWildcard(require(\"./utils/utils\"));\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar Form = /*#__PURE__*/function (_Element) {\n  _inherits(Form, _Element);\n\n  var _super = _createSuper(Form);\n  /**\n   * Creates an easy to use interface for embedding webforms, pdfs, and wizards into your application.\n   *\n   * @param {Object} element - The DOM element you wish to render this form within.\n   * @param {Object | string} form - Either a Form JSON schema or the URL of a hosted form via. form.io.\n   * @param {Object} options - The options to create a new form instance.\n   * @param {boolean} options.readOnly - Set this form to readOnly\n   * @param {boolean} options.noAlerts - Set to true to disable the alerts dialog.\n   * @param {boolean} options.i18n - The translation file for this rendering. @see https://github.com/formio/formio.js/blob/master/i18n.js\n   * @param {boolean} options.template - Provides a way to inject custom logic into the creation of every element rendered within the form.\n   *\n   * @example\n   * import Form from 'formiojs/Form';\n   * const form = new Form(document.getElementById('formio'), 'https://examples.form.io/example');\n   * form.build();\n   */\n\n\n  function Form() {\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    var options = (arguments.length <= 0 ? undefined : arguments[0]) instanceof HTMLElement ? arguments.length <= 2 ? undefined : arguments[2] : arguments.length <= 1 ? undefined : arguments[1];\n\n    if (_Formio.GlobalFormio.options && _Formio.GlobalFormio.options.form) {\n      options = Object.assign(options, _Formio.GlobalFormio.options.form);\n    }\n\n    _this = _super.call(this, options);\n    _this.ready = new _nativePromiseOnly.default(function (resolve, reject) {\n      _this.readyResolve = resolve;\n      _this.readyReject = reject;\n    });\n    _this.instance = null;\n\n    if ((arguments.length <= 0 ? undefined : arguments[0]) instanceof HTMLElement) {\n      _this.element = arguments.length <= 0 ? undefined : arguments[0];\n      _this.options = (arguments.length <= 2 ? undefined : arguments[2]) || {};\n      _this.options.events = _this.events;\n\n      _this.setForm(arguments.length <= 1 ? undefined : arguments[1]).then(function () {\n        return _this.readyResolve(_this.instance);\n      }).catch(_this.readyReject);\n    } else if (arguments.length <= 0 ? undefined : arguments[0]) {\n      _this.element = null;\n      _this.options = (arguments.length <= 1 ? undefined : arguments[1]) || {};\n      _this.options.events = _this.events;\n\n      _this.setForm(arguments.length <= 0 ? undefined : arguments[0]).then(function () {\n        return _this.readyResolve(_this.instance);\n      }).catch(_this.readyReject);\n    } else {\n      _this.element = null;\n      _this.options = {};\n      _this.options.events = _this.events;\n    }\n\n    _this.display = '';\n    return _this;\n  }\n  /**\n   * Create a new form instance provided the display of the form.\n   *\n   * @param {string} display - The display of the form, either \"wizard\", \"form\", or \"pdf\"\n   * @return {*}\n   */\n\n\n  _createClass(Form, [{\n    key: \"create\",\n    value: function create(display) {\n      if (this.options && (this.options.flatten || this.options.renderMode === 'flat')) {\n        display = 'form';\n      }\n\n      this.display = display;\n\n      if (_displays.default.displays[display]) {\n        return new _displays.default.displays[display](this.element, this.options);\n      } else {\n        // eslint-disable-next-line new-cap\n        return new _displays.default.displays['webform'](this.element, this.options);\n      }\n    }\n    /**\n     * Sets the form. Either as JSON or a URL to a form JSON schema.\n     *\n     * @param {string|object} formParam - Either the form JSON or the URL of the form json.\n     * @return {*}\n     */\n\n  }, {\n    key: \"form\",\n    get:\n    /**\n     * Returns the loaded forms JSON.\n     *\n     * @return {object} - The loaded form's JSON\n     */\n    function get() {\n      return this._form;\n    }\n    /**\n     * Changes the display of the form.\n     *\n     * @param {string} display - The display to set this form. Either \"wizard\", \"form\", or \"pdf\"\n     * @return {Promise<T>}\n     */\n    ,\n    set: function set(formParam) {\n      return this.setForm(formParam);\n    }\n  }, {\n    key: \"errorForm\",\n    value: function errorForm(err) {\n      return {\n        components: [{\n          'label': 'HTML',\n          'tag': 'div',\n          'className': 'error error-message alert alert-danger ui red message',\n          'attrs': [{\n            'attr': 'role',\n            'value': 'alert'\n          }],\n          'key': 'errorMessage',\n          'type': 'htmlelement',\n          'input': false,\n          'content': typeof err === 'string' ? err : err.message\n        }]\n      };\n    }\n  }, {\n    key: \"setForm\",\n    value: function setForm(formParam) {\n      var _this2 = this;\n\n      var result;\n      formParam = formParam || this.form;\n\n      if (typeof formParam === 'string') {\n        var formio = new _Formio.GlobalFormio(formParam);\n        var error;\n        result = this.getSubmission(formio).catch(function (err) {\n          error = err;\n        }).then(function (submission) {\n          return formio.loadForm() // If the form returned an error, show it instead of the form.\n          .catch(function (err) {\n            error = err;\n          }).then(function (form) {\n            // If the submission returned an error, show it instead of the form.\n            if (error) {\n              form = _this2.errorForm(error);\n            }\n\n            _this2.instance = _this2.instance || _this2.create(form.display);\n            _this2.instance.url = formParam;\n            _this2.instance.nosubmit = false;\n            _this2._form = _this2.instance.form = form;\n\n            if (submission) {\n              _this2.instance.submission = submission;\n            }\n\n            if (error) {\n              throw error;\n            }\n\n            return _this2.instance;\n          });\n        });\n      } else {\n        this.instance = this.instance || this.create(formParam.display);\n        this._form = this.instance.form = formParam;\n        result = this.instance.ready;\n      } // A redraw has occurred so save off the new element in case of a setDisplay causing a rebuild.\n\n\n      return result.then(function () {\n        _this2.element = _this2.instance.element;\n        return _this2.instance;\n      });\n    }\n  }, {\n    key: \"getSubmission\",\n    value: function getSubmission(formio) {\n      if (formio.submissionId) {\n        return formio.loadSubmission();\n      }\n\n      return _nativePromiseOnly.default.resolve();\n    }\n  }, {\n    key: \"setDisplay\",\n    value: function setDisplay(display) {\n      if (this.display === display && this.instance) {\n        return _nativePromiseOnly.default.resolve(this.instance);\n      }\n\n      this.form.display = display;\n      this.instance.destroy();\n      this.instance = this.create(display);\n      return this.setForm(this.form);\n    }\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      if (this.element) {\n        while (this.element.firstChild) {\n          this.element.removeChild(this.element.firstChild);\n        }\n      }\n    }\n  }, {\n    key: \"sanitize\",\n    value:\n    /**\n     * Sanitize an html string.\n     *\n     * @param string\n     * @returns {*}\n     */\n    function sanitize(dirty, forceSanitize) {\n      // If Sanitize is turned off\n      if (this.options.sanitize === false && !forceSanitize) {\n        return dirty;\n      }\n\n      return FormioUtils.sanitize(dirty, this.options);\n    }\n  }, {\n    key: \"setContent\",\n    value: function setContent(element, content, forceSanitize) {\n      if (element instanceof HTMLElement) {\n        element.innerHTML = this.sanitize(content, forceSanitize);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Build a new form.\n     *\n     * @return {Promise<T>}\n     */\n\n  }, {\n    key: \"build\",\n    value: function build() {\n      var _this3 = this;\n\n      if (!this.instance) {\n        return _nativePromiseOnly.default.reject('Form not ready. Use form.ready promise');\n      }\n\n      if (!this.element) {\n        return _nativePromiseOnly.default.reject('No DOM element for form.');\n      } // Add temporary loader.\n\n\n      var template = this.options && this.options.template ? this.options.template : 'bootstrap';\n      var loader = _templates.default[template].loader || _templates.default.bootstrap.loader;\n      this.setContent(this.element, loader.form);\n      return this.render().then(function (html) {\n        _this3.setContent(_this3.element, html);\n\n        return _this3.attach(_this3.element).then(function () {\n          return _this3.instance;\n        });\n      }).then(function (param) {\n        _this3.emit('build', param);\n\n        return param;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      if (!this.instance) {\n        return _nativePromiseOnly.default.reject('Form not ready. Use form.ready promise');\n      }\n\n      return _nativePromiseOnly.default.resolve(this.instance.render()).then(function (param) {\n        _this4.emit('render', param);\n\n        return param;\n      });\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this5 = this;\n\n      if (!this.instance) {\n        return _nativePromiseOnly.default.reject('Form not ready. Use form.ready promise');\n      }\n\n      this.element = element;\n      return this.instance.attach(this.element).then(function (param) {\n        _this5.emit('attach', param);\n\n        return param;\n      });\n    }\n  }], [{\n    key: \"embed\",\n    value: function embed(_embed) {\n      var _this6 = this;\n\n      return new _nativePromiseOnly.default(function (resolve) {\n        if (!_embed || !_embed.src) {\n          resolve();\n        }\n\n        var id = _this6.id || \"formio-\".concat(Math.random().toString(36).substring(7));\n        var className = _embed.class || 'formio-form-wrapper';\n        var code = _embed.styles ? \"<link rel=\\\"stylesheet\\\" href=\\\"\".concat(_embed.styles, \"\\\">\") : '';\n        code += \"<div id=\\\"\".concat(id, \"\\\" class=\\\"\").concat(className, \"\\\"></div>\");\n        document.write(code);\n        var attempts = 0;\n        var wait = setInterval(function () {\n          attempts++;\n          var formElement = document.getElementById(id);\n\n          if (formElement || attempts > 10) {\n            resolve(new Form(formElement, _embed.src).ready);\n            clearInterval(wait);\n          }\n        }, 10);\n      });\n    }\n  }]);\n\n  return Form;\n}(_Element2.default); // Allow simple embedding.\n\n\nexports.default = Form;\n\n_Formio.GlobalFormio.embedForm = function (embed) {\n  return Form.embed(embed);\n};\n/**\n * Factory that creates a new form based on the form parameters.\n *\n * @param element {HMTLElement} - The HTML Element to add this form to.\n * @param form {string|Object} - The src of the form, or a form object.\n * @param options {Object} - The options to create this form.\n *\n * @return {Promise} - When the form is instance is ready.\n */\n\n\n_Formio.GlobalFormio.createForm = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _construct(Form, args).ready;\n};\n\n_Formio.GlobalFormio.Form = Form;","map":null,"metadata":{},"sourceType":"script"}