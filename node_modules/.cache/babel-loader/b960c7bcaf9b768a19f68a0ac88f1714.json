{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Field2 = _interopRequireDefault(require(\"../_classes/field/Field\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar CheckBoxComponent = /*#__PURE__*/function (_Field) {\n  _inherits(CheckBoxComponent, _Field);\n\n  var _super = _createSuper(CheckBoxComponent);\n\n  function CheckBoxComponent() {\n    _classCallCheck(this, CheckBoxComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CheckBoxComponent, [{\n    key: \"defaultSchema\",\n    get: function get() {\n      return CheckBoxComponent.schema();\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      var name = this.component.name;\n\n      var defaultValue = _get(_getPrototypeOf(CheckBoxComponent.prototype), \"defaultValue\", this);\n\n      return name ? this.component[name] || this.emptyValue : (defaultValue || this.component.defaultValue || false).toString() === 'true';\n    }\n  }, {\n    key: \"labelClass\",\n    get: function get() {\n      var className = '';\n\n      if (this.isInputComponent && !this.options.inputsOnly && this.component.validate && this.component.validate.required) {\n        className += ' field-required';\n      }\n\n      return \"\".concat(className);\n    }\n  }, {\n    key: \"hasSetValue\",\n    get: function get() {\n      return this.hasValue();\n    }\n  }, {\n    key: \"inputInfo\",\n    get: function get() {\n      var info = _get(_getPrototypeOf(CheckBoxComponent.prototype), \"elementInfo\", this).call(this);\n\n      info.type = 'input';\n      info.changeEvent = 'click';\n      info.attr.type = this.component.inputType || 'checkbox';\n      info.attr.class = 'form-check-input';\n\n      if (this.component.name) {\n        info.attr.name = \"data[\".concat(this.component.name, \"]\");\n      }\n\n      info.attr.value = this.component.value ? this.component.value : 0;\n      info.label = this.t(this.component.label, {\n        _userInput: true\n      });\n      info.labelClass = this.labelClass;\n      return info;\n    }\n  }, {\n    key: \"labelInfo\",\n    get: function get() {\n      return {\n        hidden: true\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _get(_getPrototypeOf(CheckBoxComponent.prototype), \"render\", this).call(this, this.renderTemplate('checkbox', {\n        input: this.inputInfo,\n        checked: this.checked,\n        tooltip: this.interpolate(this.t(this.component.tooltip) || '', {\n          _userInput: true\n        }).replace(/(?:\\r\\n|\\r|\\n)/g, '<br />')\n      }));\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this = this;\n\n      this.loadRefs(element, {\n        input: 'multiple'\n      });\n      this.input = this.refs.input[0];\n\n      if (this.refs.input) {\n        this.addEventListener(this.input, this.inputInfo.changeEvent, function () {\n          return _this.updateValue(null, {\n            modified: true\n          });\n        });\n        this.addShortcut(this.input);\n      }\n\n      return _get(_getPrototypeOf(CheckBoxComponent.prototype), \"attach\", this).call(this, element);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach(element) {\n      if (element && this.input) {\n        this.removeShortcut(this.input);\n      }\n\n      _get(_getPrototypeOf(CheckBoxComponent.prototype), \"detach\", this).call(this);\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return this.component.inputType === 'radio' ? null : false;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dataValue;\n      return _get(_getPrototypeOf(CheckBoxComponent.prototype), \"isEmpty\", this).call(this, value) || value === false;\n    }\n  }, {\n    key: \"key\",\n    get: function get() {\n      return this.component.name ? this.component.name : _get(_getPrototypeOf(CheckBoxComponent.prototype), \"key\", this);\n    }\n  }, {\n    key: \"getValueAt\",\n    value: function getValueAt(index) {\n      if (this.component.name) {\n        return this.refs.input[index].checked ? this.component.value : '';\n      }\n\n      return !!this.refs.input[index].checked;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var value = _get(_getPrototypeOf(CheckBoxComponent.prototype), \"getValue\", this).call(this);\n\n      if (this.component.name) {\n        return value ? this.setCheckedState(value) : this.setCheckedState(this.dataValue);\n      } else {\n        return value === '' ? this.dataValue : !!value;\n      }\n    }\n  }, {\n    key: \"checked\",\n    get: function get() {\n      if (this.component.name) {\n        return this.dataValue === this.component.value;\n      }\n\n      return !!this.dataValue;\n    }\n  }, {\n    key: \"setCheckedState\",\n    value: function setCheckedState(value) {\n      if (!this.input) {\n        return;\n      }\n\n      if (this.component.name) {\n        this.input.value = value === this.component.value ? this.component.value : 0;\n        this.input.checked = value === this.component.value ? 1 : 0;\n      } else if (value === 'on') {\n        this.input.value = 1;\n        this.input.checked = 1;\n      } else if (value === 'off') {\n        this.input.value = 0;\n        this.input.checked = 0;\n      } else if (value) {\n        this.input.value = 1;\n        this.input.checked = 1;\n      } else {\n        this.input.value = 0;\n        this.input.checked = 0;\n      }\n\n      if (this.input.checked) {\n        this.input.setAttribute('checked', true);\n      } else {\n        this.input.removeAttribute('checked');\n      }\n\n      return value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.setCheckedState(value) !== undefined || !this.input && value !== undefined && (this.visible || this.conditionallyVisible() || !this.component.clearOnHide)) {\n        var changed = this.updateValue(value, flags);\n\n        if (this.isHtmlRenderMode() && flags && flags.fromSubmission && changed) {\n          this.redraw();\n        }\n\n        return changed;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getValueAsString\",\n    value: function getValueAsString(value) {\n      return value ? 'Yes' : 'No';\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(value, flags) {\n      // If this is a radio and is alredy checked, uncheck it.\n      if (this.component.name && flags.modified && this.dataValue === this.component.value) {\n        this.input.checked = 0;\n        this.input.value = 0;\n        this.dataValue = '';\n      }\n\n      var changed = _get(_getPrototypeOf(CheckBoxComponent.prototype), \"updateValue\", this).call(this, value, flags); // Update attributes of the input element\n\n\n      if (changed && this.input) {\n        if (this.input.checked) {\n          this.input.setAttribute('checked', 'true');\n        } else {\n          this.input.removeAttribute('checked');\n        }\n      }\n\n      return changed;\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _Field2.default.schema.apply(_Field2.default, [{\n        type: 'checkbox',\n        inputType: 'checkbox',\n        label: 'Checkbox',\n        key: 'checkbox',\n        dataGridLabel: true,\n        labelPosition: 'right',\n        value: '',\n        name: ''\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Checkbox',\n        group: 'basic',\n        icon: 'check-square',\n        documentation: '/userguide/#checkbox',\n        weight: 50,\n        schema: CheckBoxComponent.schema()\n      };\n    }\n  }]);\n\n  return CheckBoxComponent;\n}(_Field2.default);\n\nexports.default = CheckBoxComponent;","map":null,"metadata":{},"sourceType":"script"}