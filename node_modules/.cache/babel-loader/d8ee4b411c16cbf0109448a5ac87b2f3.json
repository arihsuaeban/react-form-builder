{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.array.splice\");\n\nrequire(\"core-js/modules/es.object.assign\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.reflect.set\");\n\nrequire(\"core-js/modules/es.regexp.constructor\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.includes\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _NestedArrayComponent2 = _interopRequireDefault(require(\"../_classes/nestedarray/NestedArrayComponent\"));\n\nvar _Component = _interopRequireDefault(require(\"../_classes/component/Component\"));\n\nvar _Alert = _interopRequireDefault(require(\"../alert/Alert\"));\n\nvar _utils = require(\"../../utils/utils\");\n\nvar _templates = _interopRequireDefault(require(\"./templates\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction set(target, property, value, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.set) {\n    set = Reflect.set;\n  } else {\n    set = function set(target, property, value, receiver) {\n      var base = _superPropBase(target, property);\n\n      var desc;\n\n      if (base) {\n        desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.set) {\n          desc.set.call(receiver, value);\n          return true;\n        } else if (!desc.writable) {\n          return false;\n        }\n      }\n\n      desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n      if (desc) {\n        if (!desc.writable) {\n          return false;\n        }\n\n        desc.value = value;\n        Object.defineProperty(receiver, property, desc);\n      } else {\n        _defineProperty(receiver, property, value);\n      }\n\n      return true;\n    };\n  }\n\n  return set(target, property, value, receiver);\n}\n\nfunction _set(target, property, value, receiver, isStrict) {\n  var s = set(target, property, value, receiver || target);\n\n  if (!s && isStrict) {\n    throw new Error('failed to set property');\n  }\n\n  return value;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar EditRowState = {\n  New: 'new',\n  Editing: 'editing',\n  Saved: 'saved',\n  Viewing: 'viewing',\n  Removed: 'removed',\n  Draft: 'draft'\n};\n\nvar EditGridComponent = /*#__PURE__*/function (_NestedArrayComponent) {\n  _inherits(EditGridComponent, _NestedArrayComponent);\n\n  var _super = _createSuper(EditGridComponent);\n\n  function EditGridComponent() {\n    var _this;\n\n    _classCallCheck(this, EditGridComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.type = 'editgrid';\n    return _this;\n  }\n\n  _createClass(EditGridComponent, [{\n    key: \"defaultDialogTemplate\",\n    get: function get() {\n      return \"\\n    <h3 ref=\\\"dialogHeader\\\">\".concat(this.t('Do you want to clear data?'), \"</h3>\\n    <div style=\\\"display:flex; justify-content: flex-end;\\\">\\n      <button ref=\\\"dialogCancelButton\\\" class=\\\"btn btn-secondary\\\" aria-label=\\\"\").concat(this.t('Cancel'), \"\\\">\").concat(this.t('Cancel'), \"</button>\\n      <button ref=\\\"dialogYesButton\\\" class=\\\"btn btn-danger\\\" aria-label=\\\"\").concat(this.t('Yes, delete it'), \"\\\">\").concat(this.t('Yes, delete it'), \"</button>\\n    </div>\\n  \");\n    }\n  }, {\n    key: \"defaultRowTemplate\",\n    get: function get() {\n      return this.displayAsTable ? EditGridComponent.defaultTableRowTemplate : EditGridComponent.defaultRowTemplate;\n    }\n  }, {\n    key: \"defaultHeaderTemplate\",\n    get: function get() {\n      return this.displayAsTable ? EditGridComponent.defaultTableHeaderTemplate : EditGridComponent.defaultHeaderTemplate;\n    }\n  }, {\n    key: \"rowTemplate\",\n    get: function get() {\n      var rowTemplate;\n\n      if (_utils.Evaluator.noeval) {\n        rowTemplate = this.displayAsTable ? _templates.default.tableRow : _templates.default.row;\n      } else {\n        rowTemplate = this.displayAsTable ? _lodash.default.get(this.component, 'templates.tableRow', this.defaultRowTemplate) : _lodash.default.get(this.component, 'templates.row', this.defaultRowTemplate);\n      }\n\n      return rowTemplate;\n    }\n  }, {\n    key: \"headerTemplate\",\n    get: function get() {\n      var headerTemplate;\n\n      if (_utils.Evaluator.noeval) {\n        headerTemplate = this.displayAsTable ? _templates.default.tableHeader : _templates.default.header;\n      } else {\n        headerTemplate = this.displayAsTable ? _lodash.default.get(this.component, 'templates.tableHeader', this.defaultHeaderTemplate) : _lodash.default.get(this.component, 'templates.header', this.defaultHeaderTemplate);\n      }\n\n      return headerTemplate;\n    }\n    /**\n     * Returns true if the component has nested components which don't trigger changes on the root level\n     */\n\n  }, {\n    key: \"hasScopedChildren\",\n    get: function get() {\n      return !this.inlineEditMode;\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return EditGridComponent.schema();\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: \"editgridKey\",\n    get: function get() {\n      return \"editgrid-\".concat(this.key);\n    }\n  }, {\n    key: \"rowRef\",\n    get: function get() {\n      return \"\".concat(this.editgridKey, \"-row\");\n    }\n  }, {\n    key: \"rowElements\",\n    get: function get() {\n      return this.refs[this.rowRef];\n    }\n  }, {\n    key: \"rowRefs\",\n    get: function get() {\n      return this.refs[\"editgrid-\".concat(this.component.key, \"-row\")];\n    }\n  }, {\n    key: \"addRowRef\",\n    get: function get() {\n      return \"\".concat(this.editgridKey, \"-addRow\");\n    }\n  }, {\n    key: \"addRowElements\",\n    get: function get() {\n      return this.refs[this.addRowRef];\n    }\n  }, {\n    key: \"saveRowRef\",\n    get: function get() {\n      return \"\".concat(this.editgridKey, \"-saveRow\");\n    }\n  }, {\n    key: \"saveRowElements\",\n    get: function get() {\n      return this.refs[this.saveRowRef];\n    }\n  }, {\n    key: \"cancelRowRef\",\n    get: function get() {\n      return \"\".concat(this.editgridKey, \"-cancelRow\");\n    }\n  }, {\n    key: \"cancelRowElements\",\n    get: function get() {\n      return this.refs[this.cancelRowRef];\n    }\n  }, {\n    key: \"inlineEditMode\",\n    get: function get() {\n      return this.component.inlineEdit;\n    }\n  }, {\n    key: \"saveEditMode\",\n    get: function get() {\n      return !this.inlineEditMode;\n    }\n  }, {\n    key: \"minLength\",\n    get: function get() {\n      return _lodash.default.get(this.component, 'validate.minLength', 0);\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._data;\n    },\n    set: function set(value) {\n      this._data = value;\n      var data = this.dataValue;\n      (this.editRows || []).forEach(function (row, index) {\n        if (!data[index] && row.state !== EditRowState.New) {\n          data[index] = {};\n        }\n\n        var rowData = data[index] || {};\n        row.data = rowData;\n        row.components.forEach(function (component) {\n          component.data = rowData;\n        });\n      });\n    }\n  }, {\n    key: \"dataValue\",\n    get: function get() {\n      return _get(_getPrototypeOf(EditGridComponent.prototype), \"dataValue\", this) || [];\n    },\n    set: function set(value) {\n      _set(_getPrototypeOf(EditGridComponent.prototype), \"dataValue\", value, this, true);\n    }\n  }, {\n    key: \"displayAsTable\",\n    get: function get() {\n      return this.component.displayAsTable;\n    }\n  }, {\n    key: \"iteratableRows\",\n    get: function get() {\n      return this.editRows;\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      var value = _get(_getPrototypeOf(EditGridComponent.prototype), \"defaultValue\", this);\n\n      var defaultValue = Array.isArray(value) ? value : [];\n\n      _lodash.default.times(this.minLength - defaultValue.length, function () {\n        return defaultValue.push({});\n      });\n\n      return defaultValue;\n    }\n  }, {\n    key: \"hasRemoveButtons\",\n    value: function hasRemoveButtons() {\n      return !this.component.disableAddingRemovingRows && !this.options.readOnly && !this.disabled && this.fullMode && this.dataValue.length > _lodash.default.get(this.component, 'validate.minLength', 0);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      if (this.builderMode) {\n        this.editRows = [];\n        return _get(_getPrototypeOf(EditGridComponent.prototype), \"init\", this).call(this);\n      }\n\n      this.components = this.components || [];\n      var dataValue = this.dataValue;\n      var openWhenEmpty = !dataValue.length && this.component.openWhenEmpty;\n\n      if (openWhenEmpty) {\n        var dataObj = {};\n        this.editRows = [];\n        this.createRow(dataObj, 0);\n      } else {\n        this.editRows = dataValue.map(function (row, rowIndex) {\n          return {\n            components: _this2.lazyLoad ? [] : _this2.createRowComponents(row, rowIndex),\n            data: row,\n            state: EditRowState.Saved,\n            backup: null,\n            error: null\n          };\n        });\n      }\n\n      this.prevHasAddButton = this.hasAddButton();\n      this.checkData();\n    }\n  }, {\n    key: \"isOpen\",\n    value: function isOpen(editRow) {\n      return [EditRowState.New, EditRowState.Editing, EditRowState.Viewing].includes(editRow.state);\n    }\n  }, {\n    key: \"isComponentVisibleInSomeRow\",\n    value: function isComponentVisibleInSomeRow(component) {\n      var _this3 = this;\n\n      var rows = this.editRows;\n      var savedStates = [EditRowState.Saved, EditRowState.Editing, EditRowState.Draft];\n      var savedRows = rows.filter(function (row) {\n        return _lodash.default.includes(savedStates, row.state);\n      });\n      this.visibleInHeader = this.visibleInHeader || [];\n\n      var changeVisibleInHeader = function changeVisibleInHeader(component, isVisible) {\n        if (!isVisible) {\n          _lodash.default.remove(_this3.visibleInHeader, function (key) {\n            return key === component.key;\n          });\n        }\n\n        if (isVisible && !_lodash.default.includes(_this3.visibleInHeader, component.key)) {\n          _this3.visibleInHeader.push(component.key);\n        }\n      };\n\n      if (_lodash.default.isEmpty(rows)) {\n        var rowComponents = this.createRowComponents({}, 0);\n        var checkComponent;\n        (0, _utils.eachComponent)(rowComponents, function (comp) {\n          if (comp.component.key === component.key) {\n            checkComponent = comp;\n          }\n\n          comp.checkConditions();\n        });\n        var isVisible = checkComponent ? checkComponent.visible : true;\n\n        _toConsumableArray(this.components).forEach(function (comp) {\n          return _this3.removeComponent(comp, _this3.components);\n        });\n\n        changeVisibleInHeader(component, isVisible);\n        return isVisible;\n      }\n\n      var isOpenRowWhenEmpty = _lodash.default.get(this.component, 'openWhenEmpty') && rows.length === 1 && rows[0].state === EditRowState.New;\n\n      if (!_lodash.default.isEmpty(rows) && _lodash.default.isEmpty(savedRows) && !isOpenRowWhenEmpty) {\n        return _lodash.default.includes(this.visibleInHeader, component.key);\n      }\n\n      return _lodash.default.some(isOpenRowWhenEmpty ? rows : savedRows, function (row, index) {\n        var editingRow = row.state === EditRowState.Editing;\n        var isVisible;\n\n        if (!editingRow) {\n          var flattenedComponents = _this3.flattenComponents(index);\n\n          var instance = flattenedComponents[component.key];\n          isVisible = instance ? instance.visible : true;\n          changeVisibleInHeader(component, isVisible);\n        } else {\n          isVisible = _lodash.default.includes(_this3.visibleInHeader, component.key);\n        }\n\n        return isVisible;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render(children) {\n      var _this4 = this;\n\n      if (this.builderMode) {\n        return _get(_getPrototypeOf(EditGridComponent.prototype), \"render\", this).call(this);\n      }\n\n      var dataValue = this.dataValue;\n      var headerTemplate = this.headerTemplate;\n      var t = this.t.bind(this);\n      var templateName = this.displayAsTable ? 'editgridTable' : 'editgrid';\n      return _get(_getPrototypeOf(EditGridComponent.prototype), \"render\", this).call(this, children || this.renderTemplate(templateName, {\n        ref: {\n          row: this.rowRef,\n          addRow: this.addRowRef,\n          saveRow: this.saveRowRef,\n          cancelRow: this.cancelRowRef\n        },\n        header: this.renderString(headerTemplate, {\n          displayValue: function displayValue(component) {\n            return _this4.displayComponentValue(component, true);\n          },\n          components: this.component.components,\n          value: dataValue,\n          t: t\n        }),\n        footer: this.renderString(_lodash.default.get(this.component, 'templates.footer'), {\n          components: this.component.components,\n          value: dataValue,\n          t: t\n        }),\n        rows: this.editRows.map(this.renderRow.bind(this)),\n        openRows: this.editRows.map(function (row) {\n          return _this4.isOpen(row);\n        }),\n        errors: this.editRows.map(function (row) {\n          return row.error;\n        }),\n        hasAddButton: this.hasAddButton(),\n        hasRemoveButtons: this.hasRemoveButtons()\n      }));\n    }\n  }, {\n    key: \"renderComponents\",\n    value: function renderComponents(components) {\n      components = components || this.getComponents();\n      var children = components.map(function (component) {\n        return component.render();\n      });\n      var templateName = this.displayAsTable && this.prevHasAddButton ? 'tableComponents' : 'components';\n      return this.renderTemplate(templateName, {\n        children: children,\n        components: components\n      });\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this$loadRefs,\n          _this5 = this;\n\n      if (this.builderMode) {\n        return _get(_getPrototypeOf(EditGridComponent.prototype), \"attach\", this).call(this, element);\n      }\n\n      this.loadRefs(element, (_this$loadRefs = {}, _defineProperty(_this$loadRefs, this.addRowRef, 'multiple'), _defineProperty(_this$loadRefs, this.saveRowRef, 'multiple'), _defineProperty(_this$loadRefs, this.cancelRowRef, 'multiple'), _defineProperty(_this$loadRefs, this.rowRef, 'multiple'), _this$loadRefs));\n      this.addRowElements.forEach(function (addButton) {\n        _this5.addEventListener(addButton, 'click', function () {\n          return _this5.addRow();\n        });\n      });\n      var openRowCount = 0;\n      this.rowElements.forEach(function (row, rowIndex) {\n        var editRow = _this5.editRows[rowIndex];\n\n        if (editRow !== null && editRow !== void 0 && editRow.isRowSelected) {\n          row.classList.add('selected');\n        }\n\n        if (_this5.isOpen(editRow)) {\n          _this5.attachComponents(row, editRow.components);\n\n          _this5.addEventListener(_this5.saveRowElements[openRowCount], 'click', function () {\n            return _this5.saveRow(rowIndex, true);\n          });\n\n          _this5.addEventListener(_this5.cancelRowElements[openRowCount], 'click', function () {\n            return _this5.cancelRow(rowIndex);\n          });\n\n          openRowCount++;\n        } else {\n          // Attach edit and remove button events.\n          [{\n            className: 'removeRow',\n            event: 'click',\n            action: function action() {\n              return _this5.removeRow(rowIndex, true);\n            }\n          }, {\n            className: 'editRow',\n            event: 'click',\n            action: function action() {\n              _this5.editRow(rowIndex).then(function () {\n                if (_this5.component.rowDrafts) {\n                  var _this5$root;\n\n                  _this5.validateRow(editRow, false);\n\n                  var hasErrors = editRow.errors && !!editRow.errors.length;\n                  var shouldShowRowErrorsAlert = _this5.component.modal && hasErrors && ((_this5$root = _this5.root) === null || _this5$root === void 0 ? void 0 : _this5$root.submitted);\n\n                  if (shouldShowRowErrorsAlert) {\n                    _this5.alert.showErrors(editRow.errors, false);\n\n                    editRow.alerts = true;\n                  }\n                }\n              });\n            }\n          }, {\n            className: 'row',\n            event: 'click',\n            action: function action() {\n              row.classList.toggle('selected');\n              var eventName = 'editGridSelectRow';\n\n              if (Array.from(row.classList).includes('selected')) {\n                editRow.isRowSelected = true;\n              } else {\n                delete editRow.isRowSelected;\n                eventName = 'editGridUnSelectRow';\n              }\n\n              _this5.emit(eventName, {\n                component: _this5.component,\n                data: _this5.dataValue[rowIndex]\n              });\n            }\n          }].forEach(function (_ref) {\n            var className = _ref.className,\n                event = _ref.event,\n                action = _ref.action;\n            var elements = row.getElementsByClassName(className);\n            Array.prototype.forEach.call(elements, function (element) {\n              _this5.addEventListener(element, event, action);\n            });\n          });\n        }\n      }); // Add open class to the element if any edit grid row is open\n\n      if (openRowCount) {\n        this.addClass(this.refs.component, \"formio-component-\".concat(this.component.type, \"-row-open\"));\n      } else {\n        this.removeClass(this.refs.component, \"formio-component-\".concat(this.component.type, \"-row-open\"));\n      }\n\n      var superAttach = _get(_getPrototypeOf(EditGridComponent.prototype), \"attach\", this).call(this, element);\n\n      this.loadRefs(element, {\n        messageContainer: 'single-scope'\n      });\n      return superAttach;\n    }\n  }, {\n    key: \"flattenRowDataValue\",\n    value: function flattenRowDataValue(dataValue) {\n      var _this6 = this;\n\n      var flattened = {};\n      Object.keys(dataValue).forEach(function (key) {\n        if (_lodash.default.isObject(dataValue[key]) && !_lodash.default.isNil(dataValue[key])) {\n          Object.assign(flattened, _this6.flattenRowDataValue(dataValue[key]));\n        } else {\n          flattened[key] = dataValue[key];\n        }\n      });\n      return flattened;\n    }\n  }, {\n    key: \"isComponentVisibleInRow\",\n    value: function isComponentVisibleInRow(component, flattenedComponents) {\n      var instance = flattenedComponents[component.key];\n      return instance ? instance.visible : true;\n    }\n  }, {\n    key: \"displayComponentValue\",\n    value: function displayComponentValue(component, header) {\n      return !!((!component.hasOwnProperty('tableView') || component.tableView) && header ? this.isComponentVisibleInSomeRow(component) : _lodash.default.includes(this.visibleInHeader, component.key));\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow(row, rowIndex) {\n      var _this7 = this;\n\n      var dataValue = this.dataValue;\n\n      if (this.isOpen(row)) {\n        return this.renderComponents(row.components);\n      } else {\n        var flattenedComponents = this.flattenComponents(rowIndex);\n        var rowTemplate = this.rowTemplate;\n        return this.renderString(rowTemplate, {\n          row: dataValue[rowIndex] || {},\n          data: this.data,\n          rowIndex: rowIndex,\n          components: this.component.components,\n          flattenedComponents: flattenedComponents,\n          displayValue: function displayValue(component) {\n            return _this7.displayComponentValue(component);\n          },\n          isVisibleInRow: function isVisibleInRow(component) {\n            return _this7.isComponentVisibleInRow(component, flattenedComponents);\n          },\n          getView: function getView(component, data) {\n            var _instance$component, _instance$component2;\n\n            var instance = flattenedComponents[component.key];\n            var view = instance ? instance.getView(data || instance.dataValue) : ''; // If there is an html tag in view, don't allow it to be injected in template\n\n            var htmlTagRegExp = new RegExp('<(.*?)>');\n            return typeof view === 'string' && view.length && !((_instance$component = instance.component) !== null && _instance$component !== void 0 && _instance$component.template) && htmlTagRegExp.test(view) && ((_instance$component2 = instance.component) === null || _instance$component2 === void 0 ? void 0 : _instance$component2.inputFormat) !== 'html' ? \"<input type=\\\"text\\\" value=\\\"\".concat(view.replace(/\"/g, '&quot;'), \"\\\" readonly/>\") : view;\n          },\n          state: this.editRows[rowIndex].state,\n          t: this.t.bind(this)\n        });\n      }\n    }\n  }, {\n    key: \"eachComponent\",\n    value: function eachComponent(fn, rowIndex) {\n      _lodash.default.each(this.getComponents(rowIndex), function (component, index) {\n        if (fn(component, index) === false) {\n          return false;\n        }\n      });\n    }\n  }, {\n    key: \"restoreComponentsContext\",\n    value: function restoreComponentsContext() {\n      var _this8 = this;\n\n      this.getComponents().forEach(function (component) {\n        var _this8$editRows$compo;\n\n        var rowData = _this8.dataValue[component.rowIndex];\n        var editRowData = (_this8$editRows$compo = _this8.editRows[component.rowIndex]) === null || _this8$editRows$compo === void 0 ? void 0 : _this8$editRows$compo.data;\n        component.data = rowData || editRowData;\n      });\n    }\n  }, {\n    key: \"flattenComponents\",\n    value: function flattenComponents(rowIndex) {\n      var result = {};\n      this.everyComponent(function (component) {\n        result[component.component.flattenAs || component.key] = component;\n      }, rowIndex);\n      return result;\n    }\n  }, {\n    key: \"getComponents\",\n    value: function getComponents(rowIndex) {\n      // Ensure editrows is set.\n      this.editRows = this.editRows || [];\n      return this.builderMode ? _get(_getPrototypeOf(EditGridComponent.prototype), \"getComponents\", this).call(this) : _lodash.default.isNumber(rowIndex) ? this.editRows[rowIndex].components || [] : this.editRows.reduce(function (result, row) {\n        return result.concat(row.components || []);\n      }, []);\n    }\n  }, {\n    key: \"destroyComponents\",\n    value: function destroyComponents(rowIndex) {\n      var _this9 = this;\n\n      if (this.builderMode) {\n        return _get(_getPrototypeOf(EditGridComponent.prototype), \"destroyComponents\", this).call(this);\n      }\n\n      var components = this.getComponents(rowIndex).slice();\n      components.forEach(function (comp) {\n        return _this9.removeComponent(comp, _this9.components);\n      });\n    }\n  }, {\n    key: \"createRow\",\n    value: function createRow(dataObj, rowIndex) {\n      var editRow = {\n        components: this.createRowComponents(dataObj, rowIndex),\n        data: dataObj,\n        state: EditRowState.New,\n        backup: null,\n        error: null\n      };\n      this.editRows.push(editRow);\n\n      if (this.inlineEditMode) {\n        this.dataValue.push(dataObj);\n      }\n\n      return editRow;\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow() {\n      if (this.options.readOnly) {\n        return;\n      }\n\n      var dataObj = {};\n      var rowIndex = this.editRows.length;\n      var editRow = this.createRow(dataObj, rowIndex);\n\n      if (this.inlineEditMode) {\n        this.triggerChange();\n      }\n\n      this.emit('editGridAddRow', {\n        component: this.component,\n        row: editRow\n      });\n      this.checkRow('checkData', null, {}, editRow.data, editRow.components);\n\n      if (this.component.modal) {\n        this.addRowModal(rowIndex);\n      } else {\n        this.redraw();\n      }\n\n      return editRow;\n    }\n  }, {\n    key: \"addRowModal\",\n    value: function addRowModal(rowIndex) {\n      var _this10 = this;\n\n      var modalContent = this.ce('div');\n      var editRow = this.editRows[rowIndex];\n      editRow.willBeSaved = false;\n      var components = editRow.components;\n      modalContent.innerHTML = this.renderComponents(components);\n      var dialog = this.component.modal ? this.createModal(modalContent, {}, function () {\n        return _this10.showDialog(rowIndex);\n      }) : undefined;\n      dialog.classList.add(\"editgrid-row-modal-\".concat(this.id));\n      editRow.dialog = dialog;\n\n      if (this.alert) {\n        this.alert.clear();\n        this.alert = null;\n      }\n\n      this.alert = new _Alert.default(dialog.refs.dialogContents, this);\n      this.addEventListener(dialog, 'close', function () {\n        if (!editRow.willBeSaved) {\n          if (_this10.editRows[rowIndex] && _this10.editRows[rowIndex].state !== EditRowState.New) {\n            _this10.editRows[rowIndex].components.forEach(function (comp) {\n              comp.setPristine(true);\n            });\n          }\n\n          _this10.cancelRow(rowIndex);\n        }\n\n        if (_this10.alert) {\n          _this10.alert.clear();\n\n          _this10.alert = null;\n        } // Remove references to dialog elements to prevent possible in some cases memory leaks\n\n\n        delete editRow.confirmationDialog;\n        delete editRow.dialog;\n      });\n      dialog.refs.dialogContents.appendChild(this.ce('button', {\n        class: 'btn btn-primary',\n        onClick: function onClick() {\n          // After an attempt to save, all the components inside the row should become not pristine\n          if (!_this10.component.rowDrafts) {\n            editRow.components.forEach(function (comp) {\n              return comp.setPristine(false);\n            });\n          }\n\n          if (_this10.validateRow(editRow, true) || _this10.component.rowDrafts) {\n            editRow.willBeSaved = true;\n            dialog.close();\n\n            _this10.saveRow(rowIndex, true);\n          } else {\n            _this10.alert.showErrors(editRow.errors, false);\n\n            editRow.alerts = true;\n          }\n        }\n      }, this.component.saveRow || 'Save'));\n      return this.attachComponents(modalContent, components);\n    }\n  }, {\n    key: \"showDialog\",\n    value: function showDialog(rowIndex) {\n      var editRow = this.editRows[rowIndex];\n\n      if (_lodash.default.isEqual(editRow.backup, editRow.data)) {\n        return _nativePromiseOnly.default.resolve();\n      }\n\n      var wrapper = this.ce('div', {\n        ref: 'confirmationDialog'\n      });\n      var dialogContent = this.component.dialogTemplate || this.defaultDialogTemplate;\n      wrapper.innerHTML = dialogContent;\n      wrapper.refs = {};\n      this.loadRefs.call(wrapper, wrapper, {\n        dialogHeader: 'single',\n        dialogCancelButton: 'single',\n        dialogYesButton: 'single'\n      });\n      var dialog = this.createModal(wrapper);\n      dialog.classList.add(\"editgrid-row-modal-confirmation-\".concat(this.id));\n\n      var close = function close(event) {\n        event.preventDefault();\n        dialog.close();\n      };\n\n      var dialogResult;\n      var promise = new _nativePromiseOnly.default(function (resolve, reject) {\n        dialogResult = {\n          resolve: resolve,\n          reject: reject\n        };\n      });\n      this.addEventListener(wrapper.refs.dialogYesButton, 'click', function (event) {\n        close(event);\n        dialogResult.resolve();\n      });\n      this.addEventListener(wrapper.refs.dialogCancelButton, 'click', function (event) {\n        close(event);\n        dialogResult.reject();\n      });\n      editRow.confirmationDialog = dialog;\n      return promise;\n    }\n  }, {\n    key: \"editRow\",\n    value: function editRow(rowIndex) {\n      var editRow = this.editRows[rowIndex];\n      var isAlreadyEditing = editRow.state === EditRowState.Editing || editRow.state === EditRowState.New;\n\n      if (!editRow || isAlreadyEditing) {\n        return _nativePromiseOnly.default.resolve();\n      }\n\n      editRow.prevState = editRow.state;\n      editRow.state = this.options.readOnly ? EditRowState.Viewing : EditRowState.Editing;\n\n      if (this.lazyLoad && editRow.components.length === 0) {\n        editRow.components = this.createRowComponents(editRow.data, rowIndex);\n      }\n\n      var dataSnapshot = (0, _utils.fastCloneDeep)(editRow.data);\n\n      if (this.inlineEditMode) {\n        editRow.backup = dataSnapshot;\n      } else {\n        editRow.backup = (0, _utils.fastCloneDeep)(editRow.data);\n        editRow.data = dataSnapshot;\n        this.restoreRowContext(editRow);\n      }\n\n      if (this.component.modal) {\n        return this.addRowModal(rowIndex);\n      }\n\n      return this.redraw();\n    }\n  }, {\n    key: \"clearErrors\",\n    value: function clearErrors(rowIndex) {\n      var editRow = this.editRows[rowIndex];\n\n      if (editRow && Array.isArray(editRow.components)) {\n        editRow.components.forEach(function (comp) {\n          comp.setPristine(true);\n          comp.setCustomValidity('');\n        });\n      }\n    }\n  }, {\n    key: \"cancelRow\",\n    value: function cancelRow(rowIndex) {\n      if (this.options.readOnly) {\n        return;\n      }\n\n      var editRow = this.editRows[rowIndex];\n\n      switch (editRow.state) {\n        case EditRowState.New:\n          {\n            editRow.state = EditRowState.Removed;\n            this.clearErrors(rowIndex);\n            this.destroyComponents(rowIndex);\n\n            if (this.inlineEditMode) {\n              this.splice(rowIndex);\n            }\n\n            this.editRows.splice(rowIndex, 1);\n            this.openWhenEmpty();\n            break;\n          }\n\n        case EditRowState.Editing:\n          {\n            editRow.state = editRow.prevState;\n\n            if (this.inlineEditMode) {\n              this.dataValue[rowIndex] = editRow.backup;\n            }\n\n            editRow.data = editRow.backup;\n            editRow.backup = null;\n            this.restoreRowContext(editRow);\n            this.clearErrors(rowIndex);\n            break;\n          }\n      }\n\n      this.emit('editGridCancelRow', {\n        instance: this,\n        component: this.component,\n        editRow: editRow\n      });\n      this.checkValidity(null, true);\n      this.redraw();\n\n      if (this.component.rowDrafts) {\n        this.checkValidity(this.data, false);\n      }\n    }\n  }, {\n    key: \"saveRow\",\n    value: function saveRow(rowIndex, modified) {\n      var _this11 = this;\n\n      var editRow = this.editRows[rowIndex];\n\n      if (this.options.readOnly) {\n        return;\n      } // After an attempt to save, all the components inside the row should become not pristine\n\n\n      if (!this.component.rowDrafts) {\n        editRow.components.forEach(function (comp) {\n          return comp.setPristine(false);\n        });\n      }\n\n      var isRowValid = this.validateRow(editRow, true);\n\n      if (!this.component.rowDrafts) {\n        if (!isRowValid) {\n          return false;\n        }\n      }\n\n      if (this.saveEditMode) {\n        var dataValue = this.dataValue;\n\n        switch (editRow.state) {\n          case EditRowState.New:\n            {\n              var newIndex = dataValue.length;\n              dataValue.push(editRow.data);\n              editRow.components.forEach(function (component) {\n                return component.rowIndex = newIndex;\n              });\n\n              if (rowIndex !== newIndex) {\n                this.editRows.splice(rowIndex, 1);\n                this.editRows.splice(newIndex, 0, editRow);\n              }\n\n              break;\n            }\n\n          case EditRowState.Editing:\n            {\n              dataValue[rowIndex] = editRow.data;\n              break;\n            }\n        }\n      }\n\n      editRow.state = this.component.rowDrafts && !isRowValid ? EditRowState.Draft : EditRowState.Saved;\n      editRow.backup = null;\n      this.updateValue();\n      this.emit('editGridSaveRow', {\n        component: this.component,\n        row: editRow.data,\n        instance: this\n      });\n      this.triggerChange({\n        modified: modified,\n        noPristineChangeOnModified: modified && this.component.rowDrafts,\n        isolateRow: true\n      });\n\n      if (this.component.rowDrafts) {\n        editRow.components.forEach(function (comp) {\n          return comp.setPristine(_this11.pristine);\n        });\n      }\n\n      this.checkValidity(null, true);\n      this.redraw();\n\n      if (editRow.alerts) {\n        editRow.alerts = false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"beforeFocus\",\n    value: function beforeFocus(component) {\n      if ('beforeFocus' in this.parent) {\n        this.parent.beforeFocus(this);\n      }\n\n      var relativePath = this.getRelativePath(component.path);\n      var arrayPath = (0, _utils.getArrayFromComponentPath)(relativePath);\n\n      if (_lodash.default.isNumber(arrayPath[0])) {\n        this.editRow(arrayPath[0]);\n      }\n    }\n  }, {\n    key: \"updateComponentsRowIndex\",\n    value: function updateComponentsRowIndex(components, rowIndex) {\n      components.forEach(function (component, colIndex) {\n        component.rowIndex = rowIndex;\n        component.row = \"\".concat(rowIndex, \"-\").concat(colIndex);\n      });\n    }\n  }, {\n    key: \"updateRowsComponents\",\n    value: function updateRowsComponents(rowIndex) {\n      var _this12 = this;\n\n      this.editRows.slice(rowIndex).forEach(function (row, index) {\n        _this12.updateComponentsRowIndex(row.components, rowIndex + index);\n      });\n    }\n  }, {\n    key: \"baseRemoveRow\",\n    value: function baseRemoveRow(rowIndex) {\n      var editRow = this.editRows[rowIndex];\n      editRow.state = EditRowState.Removed;\n      this.destroyComponents(rowIndex);\n      return editRow;\n    }\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(rowIndex, modified) {\n      if (this.options.readOnly) {\n        return;\n      }\n\n      this.clearErrors(rowIndex);\n      this.baseRemoveRow(rowIndex);\n      this.splice(rowIndex);\n      this.emit('editGridDeleteRow', {\n        index: rowIndex\n      });\n      this.editRows.splice(rowIndex, 1);\n      this.openWhenEmpty();\n      this.updateRowsComponents(rowIndex);\n      this.updateValue();\n      this.triggerChange({\n        modified: modified,\n        noPristineChangeOnModified: modified && this.component.rowDrafts,\n        isolateRow: true\n      });\n      this.checkValidity(null, true);\n      this.checkData();\n      this.redraw();\n    }\n  }, {\n    key: \"createRowComponents\",\n    value: function createRowComponents(row, rowIndex) {\n      var _this13 = this;\n\n      return this.component.components.map(function (col, colIndex) {\n        var column = _lodash.default.clone(col);\n\n        var options = _lodash.default.clone(_this13.options);\n\n        options.name += \"[\".concat(rowIndex, \"]\");\n        options.row = \"\".concat(rowIndex, \"-\").concat(colIndex);\n\n        options.onChange = function () {\n          var _changed$instance$roo, _this13$root;\n\n          var flags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var changed = arguments.length > 1 ? arguments[1] : undefined;\n          var modified = arguments.length > 2 ? arguments[2] : undefined;\n\n          if ((_changed$instance$roo = changed.instance.root) !== null && _changed$instance$roo !== void 0 && _changed$instance$roo.id && ((_this13$root = _this13.root) === null || _this13$root === void 0 ? void 0 : _this13$root.id) !== changed.instance.root.id) {\n            changed.instance.root.triggerChange(flags, changed, modified);\n          } else if (!_this13.component.modal) {\n            _this13.triggerRootChange(flags, changed, modified);\n          }\n\n          if (_this13.inlineEditMode) {\n            return;\n          }\n\n          var editRow = _this13.editRows[rowIndex];\n\n          if (editRow !== null && editRow !== void 0 && editRow.alerts) {\n            _this13.checkData(null, _objectSpread(_objectSpread({}, flags), {}, {\n              changed: changed,\n              rowIndex: rowIndex\n            }), _this13.data);\n          } else if (editRow) {\n            // If drafts allowed, perform validation silently if there was no attempt to submit a form\n            var silentCheck = _this13.component.rowDrafts && !_this13.shouldValidateDraft(editRow);\n\n            _this13.checkRow('checkData', null, _objectSpread(_objectSpread({}, flags), {}, {\n              changed: changed,\n              silentCheck: silentCheck\n            }), editRow.data, editRow.components, silentCheck);\n          }\n        };\n\n        var comp = _this13.createComponent(_lodash.default.assign({}, column, {\n          row: options.row\n        }), options, row);\n\n        comp.rowIndex = rowIndex;\n        comp.inEditGrid = true;\n        return comp;\n      });\n    }\n  }, {\n    key: \"hasOpenRows\",\n    value: function hasOpenRows() {\n      var _this14 = this;\n\n      return this.editRows.some(function (row) {\n        return _this14.isOpen(row);\n      });\n    }\n  }, {\n    key: \"shouldValidateDraft\",\n    value: function shouldValidateDraft(editRow) {\n      var _this$root, _this$root2; // Draft rows should be validated only when there was an attempt to submit a form\n\n\n      return editRow.state === EditRowState.Draft && !this.pristine && !((_this$root = this.root) !== null && _this$root !== void 0 && _this$root.pristine) && !this.hasOpenRows() || ((_this$root2 = this.root) === null || _this$root2 === void 0 ? void 0 : _this$root2.submitted);\n    }\n  }, {\n    key: \"shouldValidateRow\",\n    value: function shouldValidateRow(editRow, dirty) {\n      return this.shouldValidateDraft(editRow) || editRow.state === EditRowState.Editing || editRow.alerts || dirty;\n    }\n  }, {\n    key: \"validateRow\",\n    value: function validateRow(editRow, dirty, forceSilentCheck) {\n      var _this15 = this,\n          _this$root3;\n\n      var valid = true;\n\n      var errorsSnapshot = _toConsumableArray(this.errors);\n\n      if (this.shouldValidateRow(editRow, dirty)) {\n        editRow.components.forEach(function (comp) {\n          var silentCheck = _this15.component.rowDrafts && !_this15.shouldValidateDraft(editRow) || forceSilentCheck;\n          valid &= comp.checkValidity(null, dirty, null, silentCheck);\n        });\n      }\n\n      if (this.component.validate && this.component.validate.row) {\n        valid = this.evaluate(this.component.validate.row, {\n          valid: valid,\n          row: editRow.data\n        }, 'valid', true);\n\n        if (valid.toString() !== 'true') {\n          editRow.error = valid;\n          valid = false;\n        } else {\n          editRow.error = null;\n        }\n\n        if (valid === null) {\n          valid = \"Invalid row validation for \".concat(this.key);\n        }\n      }\n\n      editRow.errors = !valid ? this.errors.filter(function (err) {\n        return !errorsSnapshot.includes(err);\n      }) : null;\n\n      if (!this.component.rowDrafts || (_this$root3 = this.root) !== null && _this$root3 !== void 0 && _this$root3.submitted) {\n        this.showRowErrorAlerts(editRow, !!valid);\n      }\n\n      return !!valid;\n    }\n  }, {\n    key: \"showRowErrorAlerts\",\n    value: function showRowErrorAlerts(editRow, valid) {\n      if (editRow.alerts) {\n        if (this.alert) {\n          var _editRow$errors;\n\n          if ((_editRow$errors = editRow.errors) !== null && _editRow$errors !== void 0 && _editRow$errors.length && !valid) {\n            this.alert.showErrors(editRow.errors, false);\n            editRow.alerts = true;\n          } else {\n            this.alert.clear();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity(data, dirty, row, silentCheck) {\n      data = data || this.rootValue;\n      row = row || this.data;\n\n      if (!this.checkCondition(row, data)) {\n        this.setCustomValidity('');\n        return true;\n      }\n\n      return this.checkComponentValidity(data, dirty, row, {\n        silentCheck: silentCheck\n      });\n    }\n  }, {\n    key: \"checkComponentValidity\",\n    value: function checkComponentValidity(data, dirty, row) {\n      var _this16 = this,\n          _this$errors,\n          _this$root5;\n\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var silentCheck = options.silentCheck;\n      var errorsLength = this.errors.length;\n\n      var superValid = _get(_getPrototypeOf(EditGridComponent.prototype), \"checkComponentValidity\", this).call(this, data, dirty, row, options); // If super tells us that component invalid and there is no need to update alerts, just return false\n\n\n      if (!superValid && !this.alert && !this.hasOpenRows()) {\n        return false;\n      }\n\n      if (this.shouldSkipValidation(data, dirty, row)) {\n        return true;\n      }\n\n      var rowsValid = true;\n      var rowsEditing = false;\n      this.editRows.forEach(function (editRow, index) {\n        // Trigger all errors on the row.\n        var rowValid = _this16.validateRow(editRow, dirty, silentCheck);\n\n        rowsValid &= rowValid;\n\n        if (_this16.rowRefs) {\n          var rowContainer = _this16.rowRefs[index];\n\n          if (rowContainer) {\n            var errorContainer = rowContainer.querySelector('.editgrid-row-error');\n\n            if (!rowValid && errorContainer && (!_this16.component.rowDrafts || _this16.shouldValidateDraft(editRow))) {\n              _this16.addClass(errorContainer, 'help-block');\n\n              errorContainer.textContent = _this16.t('invalidRowError');\n            } else if (errorContainer) {\n              errorContainer.textContent = '';\n            }\n          }\n        } // If this is a dirty check, and any rows are still editing, we need to throw validation error.\n\n\n        rowsEditing |= dirty && _this16.isOpen(editRow);\n      });\n\n      if (!rowsValid) {\n        var _this$root4;\n\n        if (!silentCheck && (!this.component.rowDrafts || (_this$root4 = this.root) !== null && _this$root4 !== void 0 && _this$root4.submitted)) {\n          this.setCustomValidity(this.t('invalidRowsError'), dirty); // Delete this class, because otherwise all the components inside EditGrid will has red border even if they are valid\n\n          this.removeClass(this.element, 'has-error');\n        }\n\n        return false;\n      } else if (rowsEditing && this.saveEditMode) {\n        this.setCustomValidity(this.t('unsavedRowsError'), dirty);\n        return false;\n      }\n\n      var message = this.invalid || this.invalidMessage(data, dirty);\n\n      if (((_this$errors = this.errors) === null || _this$errors === void 0 ? void 0 : _this$errors.length) !== errorsLength && (_this$root5 = this.root) !== null && _this$root5 !== void 0 && _this$root5.submitted && !message) {\n        this.setCustomValidity(message, dirty);\n        this.root.showErrors();\n      } else {\n        this.setCustomValidity(message, dirty);\n      }\n\n      return superValid;\n    }\n  }, {\n    key: \"changeState\",\n    value: function changeState(changed, flags) {\n      if (changed || flags.resetValue && this.component.modalEdit) {\n        this.rebuild();\n      } else {\n        this.redraw();\n      }\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var _this17 = this;\n\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!value) {\n        value = this.defaultValue;\n      }\n\n      if (!Array.isArray(value)) {\n        if (_typeof(value) === 'object') {\n          value = [value];\n        } else {\n          return false;\n        }\n      }\n\n      var changed = this.hasChanged(value, this.dataValue);\n      flags.noValidate = !changed;\n\n      if (this.parent) {\n        this.parent.checkComponentConditions();\n      }\n\n      this.dataValue = value; // Refresh editRow data when data changes.\n\n      this.dataValue.forEach(function (row, rowIndex) {\n        var editRow = _this17.editRows[rowIndex];\n\n        if (editRow) {\n          editRow.data = row;\n\n          _this17.restoreRowContext(editRow, flags);\n\n          editRow.state = EditRowState.Saved;\n          editRow.backup = null;\n          editRow.error = null;\n        } else {\n          _this17.editRows[rowIndex] = {\n            components: _this17.lazyLoad ? [] : _this17.createRowComponents(row, rowIndex),\n            data: row,\n            state: EditRowState.Saved,\n            backup: null,\n            error: null\n          };\n        }\n      });\n      var dataLength = this.dataValue.length; // If the last row is a new row, then do not remove it.\n\n      if (this.editRows[dataLength] && this.editRows[dataLength].state === EditRowState.New) {\n        dataLength = dataLength + 1;\n      }\n\n      this.editRows.slice(dataLength).forEach(function (editRow, index) {\n        return _this17.baseRemoveRow(dataLength + index);\n      });\n      this.editRows = this.editRows.slice(0, dataLength);\n      this.openWhenEmpty();\n      this.updateOnChange(flags, changed);\n      this.checkData();\n      this.changeState(changed, flags);\n      return changed;\n    }\n  }, {\n    key: \"openWhenEmpty\",\n    value: function openWhenEmpty() {\n      var shouldBeOpened = !this.dataValue.length && this.component.openWhenEmpty;\n      var hasNoRows = !this.editRows.length;\n\n      if (hasNoRows && shouldBeOpened && !this.builderMode) {\n        var dataObj = {};\n        this.createRow(dataObj, 0);\n      }\n    }\n  }, {\n    key: \"restoreRowContext\",\n    value: function restoreRowContext(editRow) {\n      var _this18 = this;\n\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      editRow.components.forEach(function (component) {\n        component.data = editRow.data;\n\n        _this18.setNestedValue(component, editRow.data, flags);\n      });\n    }\n  }, {\n    key: \"emptyRows\",\n    value: function emptyRows() {\n      var _this19 = this;\n\n      this.editRows.forEach(function (editRow, index) {\n        return _this19.destroyComponents(index);\n      });\n      this.editRows = [];\n    }\n  }, {\n    key: \"resetValue\",\n    value: function resetValue() {\n      _get(_getPrototypeOf(EditGridComponent.prototype), \"resetValue\", this).call(this);\n\n      this.emptyRows();\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len2 = arguments.length, extend = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        extend[_key2] = arguments[_key2];\n      }\n\n      return _NestedArrayComponent2.default.schema.apply(_NestedArrayComponent2.default, [{\n        type: 'editgrid',\n        label: 'Edit Grid',\n        key: 'editGrid',\n        clearOnHide: true,\n        input: true,\n        tree: true,\n        removeRow: 'Cancel',\n        defaultOpen: false,\n        openWhenEmpty: false,\n        modal: false,\n        components: [],\n        inlineEdit: false,\n        templates: {\n          header: EditGridComponent.defaultHeaderTemplate,\n          row: EditGridComponent.defaultRowTemplate,\n          tableHeader: EditGridComponent.defaultTableHeaderTemplate,\n          tableRow: EditGridComponent.defaultTableRowTemplate,\n          footer: ''\n        }\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Edit Grid',\n        icon: 'tasks',\n        group: 'data',\n        documentation: '/userguide/#editgrid',\n        weight: 30,\n        schema: EditGridComponent.schema()\n      };\n    }\n  }, {\n    key: \"defaultHeaderTemplate\",\n    get: function get() {\n      return \"<div class=\\\"row\\\">\\n      {% util.eachComponent(components, function(component) { %}\\n        {% if (displayValue(component)) { %}\\n          <div class=\\\"col-sm-2\\\">{{ t(component.label) }}</div>\\n        {% } %}\\n      {% }) %}\\n    </div>\";\n    }\n  }, {\n    key: \"defaultTableHeaderTemplate\",\n    get: function get() {\n      return \"\\n      <tr>\\n        {% util.eachComponent(components, function(component) { %}\\n          {% if (!component.hasOwnProperty('tableView') || component.tableView) { %}\\n            <td class=\\\"editgrid-table-column\\\">{{ component.label }}</td>\\n          {% } %}\\n        {% }) %}\\n        {% if (!instance.options.readOnly && !instance.disabled) { %}\\n          <td class=\\\"editgrid-table-column\\\">Actions</td>\\n        {% } %}\\n      </tr>\\n    \";\n    }\n  }, {\n    key: \"defaultRowTemplate\",\n    get: function get() {\n      return \"<div class=\\\"row\\\">\\n      {% util.eachComponent(components, function(component) { %}\\n        {% if (displayValue(component)) { %}\\n          <div class=\\\"col-sm-2\\\">\\n            {{ isVisibleInRow(component) ? getView(component, row[component.key]) : ''}}\\n          </div>\\n        {% } %}\\n      {% }) %}\\n      {% if (!instance.options.readOnly && !instance.disabled) { %}\\n        <div class=\\\"col-sm-2\\\">\\n          <div class=\\\"btn-group pull-right\\\">\\n            <button class=\\\"btn btn-default btn-light btn-sm editRow\\\"><i class=\\\"{{ iconClass('edit') }}\\\"></i></button>\\n            {% if (!instance.hasRemoveButtons || instance.hasRemoveButtons()) { %}\\n              <button class=\\\"btn btn-danger btn-sm removeRow\\\"><i class=\\\"{{ iconClass('trash') }}\\\"></i></button>\\n            {% } %}\\n          </div>\\n        </div>\\n      {% } %}\\n    </div>\";\n    }\n  }, {\n    key: \"defaultTableRowTemplate\",\n    get: function get() {\n      return \"\\n      {% util.eachComponent(components, function(component) { %}\\n          {% if (!component.hasOwnProperty('tableView') || component.tableView) { %}\\n            <td class=\\\"editgrid-table-column\\\">\\n              {{ getView(component, row[component.key]) }}\\n            </td>\\n          {% } %}\\n        {% }) %}\\n        {% if (!instance.options.readOnly && !instance.disabled) { %}\\n          <td class=\\\"editgrid-table-column\\\">\\n            <div class=\\\"btn-group\\\">\\n              <button class=\\\"btn btn-default btn-light btn-sm editRow\\\" aria-label=\\\"{{ t('Edit row') }}\\\"><i class=\\\"{{ iconClass('edit') }}\\\"></i></button>\\n              {% if (!instance.hasRemoveButtons || instance.hasRemoveButtons()) { %}\\n              <button class=\\\"btn btn-danger btn-sm removeRow\\\" aria-label=\\\"{{ t('Remove row') }}\\\"><i class=\\\"{{ iconClass('trash') }}\\\"></i></button>\\n              {% } %}\\n            </div>\\n          </td>\\n        {% } %}\\n    \";\n    }\n  }]);\n\n  return EditGridComponent;\n}(_NestedArrayComponent2.default);\n\nexports.default = EditGridComponent;\nEditGridComponent.prototype.hasChanged = _Component.default.prototype.hasChanged;","map":null,"metadata":{},"sourceType":"script"}