{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.reflect.set\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.pad-start\");\n\nrequire(\"core-js/modules/es.string.split\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Field2 = _interopRequireDefault(require(\"../_classes/field/Field\"));\n\nvar _utils = require(\"../../utils/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction set(target, property, value, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.set) {\n    set = Reflect.set;\n  } else {\n    set = function set(target, property, value, receiver) {\n      var base = _superPropBase(target, property);\n\n      var desc;\n\n      if (base) {\n        desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.set) {\n          desc.set.call(receiver, value);\n          return true;\n        } else if (!desc.writable) {\n          return false;\n        }\n      }\n\n      desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n      if (desc) {\n        if (!desc.writable) {\n          return false;\n        }\n\n        desc.value = value;\n        Object.defineProperty(receiver, property, desc);\n      } else {\n        _defineProperty(receiver, property, value);\n      }\n\n      return true;\n    };\n  }\n\n  return set(target, property, value, receiver);\n}\n\nfunction _set(target, property, value, receiver, isStrict) {\n  var s = set(target, property, value, receiver || target);\n\n  if (!s && isStrict) {\n    throw new Error('failed to set property');\n  }\n\n  return value;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar DayComponent = /*#__PURE__*/function (_Field) {\n  _inherits(DayComponent, _Field);\n\n  var _super = _createSuper(DayComponent);\n\n  function DayComponent() {\n    _classCallCheck(this, DayComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DayComponent, [{\n    key: \"emptyValue\",\n    get:\n    /**\n     * The empty value for day component.\n     *\n     * @return {'00/00/0000'}\n     */\n    function get() {\n      return '00/00/0000';\n    }\n  }, {\n    key: \"valueMask\",\n    get: function get() {\n      return /^\\d{2}\\/\\d{2}\\/\\d{4}$/;\n    }\n  }, {\n    key: \"dayRequired\",\n    get: function get() {\n      return this.showDay && _lodash.default.get(this.component, 'fields.day.required', false);\n    }\n  }, {\n    key: \"showDay\",\n    get: function get() {\n      return !_lodash.default.get(this.component, 'fields.day.hide', false);\n    }\n  }, {\n    key: \"monthRequired\",\n    get: function get() {\n      return this.showMonth && _lodash.default.get(this.component, 'fields.month.required', false);\n    }\n  }, {\n    key: \"showMonth\",\n    get: function get() {\n      return !_lodash.default.get(this.component, 'fields.month.hide', false);\n    }\n  }, {\n    key: \"yearRequired\",\n    get: function get() {\n      return this.showYear && _lodash.default.get(this.component, 'fields.year.required', false);\n    }\n  }, {\n    key: \"showYear\",\n    get: function get() {\n      return !_lodash.default.get(this.component, 'fields.year.hide', false);\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return DayComponent.schema();\n    }\n  }, {\n    key: \"shouldDisabled\",\n    get: function get() {\n      return _get(_getPrototypeOf(DayComponent.prototype), \"shouldDisabled\", this) || this.parentDisabled;\n    }\n  }, {\n    key: \"inputInfo\",\n    get: function get() {\n      var info = _get(_getPrototypeOf(DayComponent.prototype), \"elementInfo\", this).call(this);\n\n      info.type = 'input';\n      info.attr.type = 'hidden';\n      info.changeEvent = 'input';\n      return info;\n    }\n  }, {\n    key: \"inputDefinition\",\n    value: function inputDefinition(name) {\n      var min, max;\n\n      if (name === 'day') {\n        min = 1;\n        max = 31;\n      }\n\n      if (name === 'month') {\n        min = 1;\n        max = 12;\n      }\n\n      if (name === 'year') {\n        min = _lodash.default.get(this.component, 'fields.year.minYear', 1900) || 1900;\n        max = _lodash.default.get(this.component, 'fields.year.maxYear', 2030) || 1900;\n      }\n\n      return {\n        type: 'input',\n        ref: name,\n        attr: {\n          id: \"\".concat(this.component.key, \"-\").concat(name),\n          class: \"form-control \".concat(this.transform('class', \"formio-day-component-\".concat(name))),\n          type: this.component.fields[name].type === 'select' ? 'select' : 'number',\n          placeholder: this.component.fields[name].placeholder,\n          step: 1,\n          min: min,\n          max: max\n        }\n      };\n    }\n  }, {\n    key: \"selectDefinition\",\n    value: function selectDefinition(name) {\n      return {\n        multiple: false,\n        ref: name,\n        widget: 'html5',\n        attr: {\n          id: \"\".concat(this.component.key, \"-\").concat(name),\n          class: 'form-control',\n          name: name,\n          lang: this.options.language\n        }\n      };\n    }\n  }, {\n    key: \"days\",\n    get: function get() {\n      if (this._days) {\n        return this._days;\n      }\n\n      this._days = [{\n        value: '',\n        label: _lodash.default.get(this.component, 'fields.day.placeholder', '')\n      }];\n\n      for (var x = 1; x <= 31; x++) {\n        this._days.push({\n          value: x,\n          label: x.toString()\n        });\n      }\n\n      return this._days;\n    }\n  }, {\n    key: \"months\",\n    get: function get() {\n      if (this._months) {\n        return this._months;\n      }\n\n      this._months = [{\n        value: '',\n        label: _lodash.default.get(this.component, 'fields.month.placeholder') || (this.hideInputLabels ? this.t('Month') : '')\n      }, {\n        value: 1,\n        label: 'January'\n      }, {\n        value: 2,\n        label: 'February'\n      }, {\n        value: 3,\n        label: 'March'\n      }, {\n        value: 4,\n        label: 'April'\n      }, {\n        value: 5,\n        label: 'May'\n      }, {\n        value: 6,\n        label: 'June'\n      }, {\n        value: 7,\n        label: 'July'\n      }, {\n        value: 8,\n        label: 'August'\n      }, {\n        value: 9,\n        label: 'September'\n      }, {\n        value: 10,\n        label: 'October'\n      }, {\n        value: 11,\n        label: 'November'\n      }, {\n        value: 12,\n        label: 'December'\n      }];\n      return this._months;\n    }\n  }, {\n    key: \"years\",\n    get: function get() {\n      if (this._years) {\n        return this._years;\n      }\n\n      this._years = [{\n        value: '',\n        label: _lodash.default.get(this.component, 'fields.year.placeholder', '')\n      }];\n      var minYears = _lodash.default.get(this.component, 'fields.year.minYear', 1900) || 1900;\n      var maxYears = _lodash.default.get(this.component, 'fields.year.maxYear', 2030) || 2030;\n\n      for (var x = minYears; x <= maxYears; x++) {\n        this._years.push({\n          value: x,\n          label: x.toString()\n        });\n      }\n\n      return this._years;\n    }\n  }, {\n    key: \"setErrorClasses\",\n    value: function setErrorClasses(elements, dirty, hasError) {\n      _get(_getPrototypeOf(DayComponent.prototype), \"setErrorClasses\", this).call(this, elements, dirty, hasError);\n\n      _get(_getPrototypeOf(DayComponent.prototype), \"setErrorClasses\", this).call(this, [this.refs.day, this.refs.month, this.refs.year], dirty, hasError);\n    }\n  }, {\n    key: \"removeInputError\",\n    value: function removeInputError(elements) {\n      _get(_getPrototypeOf(DayComponent.prototype), \"removeInputError\", this).call(this, [this.refs.day, this.refs.month, this.refs.year]);\n\n      _get(_getPrototypeOf(DayComponent.prototype), \"removeInputError\", this).call(this, elements);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      _get(_getPrototypeOf(DayComponent.prototype), \"init\", this).call(this);\n\n      this.validators = this.validators.concat(['day', 'maxDate', 'minDate', 'minYear', 'maxYear']);\n      var minYear = this.component.fields.year.minYear;\n      var maxYear = this.component.fields.year.maxYear;\n      this.component.maxYear = maxYear;\n      this.component.minYear = minYear;\n      var dateFormatInfo = (0, _utils.getLocaleDateFormatInfo)(this.options.language);\n      this.dayFirst = this.component.useLocaleSettings ? dateFormatInfo.dayFirst : this.component.dayFirst;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.isHtmlRenderMode()) {\n        return _get(_getPrototypeOf(DayComponent.prototype), \"render\", this).call(this, this.renderTemplate('input'));\n      }\n\n      return _get(_getPrototypeOf(DayComponent.prototype), \"render\", this).call(this, this.renderTemplate('day', {\n        dayFirst: this.dayFirst,\n        showDay: this.showDay,\n        showMonth: this.showMonth,\n        showYear: this.showYear,\n        day: this.renderField('day'),\n        month: this.renderField('month'),\n        year: this.renderField('year')\n      }));\n    }\n  }, {\n    key: \"renderField\",\n    value: function renderField(name) {\n      var _this = this;\n\n      if (this.component.fields[name].type === 'select') {\n        return this.renderTemplate('select', {\n          input: this.selectDefinition(name),\n          selectOptions: this[\"\".concat(name, \"s\")].reduce(function (html, option) {\n            return html + _this.renderTemplate('selectOption', {\n              option: option,\n              selected: false,\n              attrs: {}\n            });\n          }, '')\n        });\n      } else {\n        return this.renderTemplate('input', {\n          prefix: this.prefix,\n          suffix: this.suffix,\n          input: this.inputDefinition(name)\n        });\n      }\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this2 = this;\n\n      this.loadRefs(element, {\n        day: 'single',\n        month: 'single',\n        year: 'single',\n        input: 'multiple'\n      });\n\n      var superAttach = _get(_getPrototypeOf(DayComponent.prototype), \"attach\", this).call(this, element);\n\n      if (this.shouldDisabled) {\n        this.setDisabled(this.refs.day, true);\n        this.setDisabled(this.refs.month, true);\n        this.setDisabled(this.refs.year, true);\n\n        if (this.refs.input) {\n          this.refs.input.forEach(function (input) {\n            return _this2.setDisabled(input, true);\n          });\n        }\n      } else {\n        this.addEventListener(this.refs.day, 'input', function () {\n          return _this2.updateValue(null, {\n            modified: true\n          });\n        }); // TODO: Need to rework this to work with day select as well.\n        // Change day max input when month changes.\n\n        this.addEventListener(this.refs.month, 'input', function () {\n          var maxDay = _this2.refs.year ? parseInt(new Date(_this2.refs.year.value, _this2.refs.month.value, 0).getDate(), 10) : '';\n\n          var day = _this2.getFieldValue('day');\n\n          if (!_this2.component.fields.day.hide && maxDay) {\n            _this2.refs.day.max = maxDay;\n          }\n\n          if (maxDay && day > maxDay) {\n            _this2.refs.day.value = _this2.refs.day.max;\n          }\n\n          _this2.updateValue(null, {\n            modified: true\n          });\n        });\n        this.addEventListener(this.refs.year, 'input', function () {\n          return _this2.updateValue(null, {\n            modified: true\n          });\n        });\n        this.addEventListener(this.refs.input, this.info.changeEvent, function () {\n          return _this2.updateValue(null, {\n            modified: true\n          });\n        });\n      }\n\n      this.setValue(this.dataValue); // Force the disabled state with getters and setters.\n\n      this.disabled = this.shouldDisabled;\n      return superAttach;\n    }\n  }, {\n    key: \"validateRequired\",\n    value: function validateRequired(setting, value) {\n      var _this$parts = this.parts,\n          day = _this$parts.day,\n          month = _this$parts.month,\n          year = _this$parts.year;\n\n      if (this.dayRequired && !day) {\n        return false;\n      }\n\n      if (this.monthRequired && !month) {\n        return false;\n      }\n\n      if (this.yearRequired && !year) {\n        return false;\n      }\n\n      if (!(0, _utils.boolValue)(setting)) {\n        return true;\n      }\n\n      return !this.isEmpty(value);\n    }\n  }, {\n    key: \"disabled\",\n    set: function set(disabled) {\n      _set(_getPrototypeOf(DayComponent.prototype), \"disabled\", disabled, this, true);\n\n      if (!this.refs.year || !this.refs.month || !this.refs.day) {\n        return;\n      }\n\n      if (disabled) {\n        this.refs.year.setAttribute('disabled', 'disabled');\n        this.refs.month.setAttribute('disabled', 'disabled');\n        this.refs.day.setAttribute('disabled', 'disabled');\n      } else {\n        this.refs.year.removeAttribute('disabled');\n        this.refs.month.removeAttribute('disabled');\n        this.refs.day.removeAttribute('disabled');\n      }\n    }\n  }, {\n    key: \"normalizeValue\",\n    value: function normalizeValue(value) {\n      if (!value || this.valueMask.test(value)) {\n        return value;\n      }\n\n      var dateParts = [];\n      var valueParts = value.split('/');\n\n      var getNextPart = function getNextPart(shouldTake, defaultValue) {\n        return dateParts.push(shouldTake ? valueParts.shift() : defaultValue);\n      };\n\n      if (this.dayFirst) {\n        getNextPart(this.showDay, '00');\n      }\n\n      getNextPart(this.showMonth, '00');\n\n      if (!this.dayFirst) {\n        getNextPart(this.showDay, '00');\n      }\n\n      getNextPart(this.showYear, '0000');\n      return dateParts.join('/');\n    }\n    /**\n     * Set the value at a specific index.\n     *\n     * @param index\n     * @param value\n     */\n\n  }, {\n    key: \"setValueAt\",\n    value: function setValueAt(index, value) {\n      // temporary solution to avoid input reset\n      // on invalid date.\n      if (!value || value === 'Invalid date') {\n        return null;\n      }\n\n      var parts = value.split('/');\n      var day;\n\n      if (this.component.dayFirst) {\n        day = parts.shift();\n      }\n\n      var month = parts.shift();\n\n      if (!this.component.dayFirst) {\n        day = parts.shift();\n      }\n\n      var year = parts.shift();\n\n      if (this.refs.day && this.showDay) {\n        this.refs.day.value = day === '00' ? '' : parseInt(day, 10);\n      }\n\n      if (this.refs.month && this.showMonth) {\n        this.refs.month.value = month === '00' ? '' : parseInt(month, 10);\n      }\n\n      if (this.refs.year && this.showYear) {\n        this.refs.year.value = year === '0000' ? '' : parseInt(year, 10);\n      }\n    }\n  }, {\n    key: \"getFieldValue\",\n    value: function getFieldValue(name) {\n      var parts = this.dataValue ? this.dataValue.split('/') : [];\n      var val = 0;\n\n      switch (name) {\n        case 'month':\n          val = parts[this.dayFirst ? 1 : 0];\n          break;\n\n        case 'day':\n          val = parts[this.dayFirst ? 0 : 1];\n          break;\n\n        case 'year':\n          val = parts[2];\n          break;\n      }\n\n      val = parseInt(val, 10);\n      return !_lodash.default.isNaN(val) && _lodash.default.isNumber(val) ? val : 0;\n    }\n  }, {\n    key: \"parts\",\n    get: function get() {\n      return {\n        day: this.getFieldValue('day'),\n        month: this.getFieldValue('month'),\n        year: this.getFieldValue('year')\n      };\n    }\n    /**\n     * Get the format for the value string.\n     * @returns {string}\n     */\n\n  }, {\n    key: \"format\",\n    get: function get() {\n      var format = '';\n\n      if (this.component.dayFirst && this.showDay) {\n        format += 'D/';\n      }\n\n      if (this.showMonth) {\n        format += 'M/';\n      }\n\n      if (!this.component.dayFirst && this.showDay) {\n        format += 'D/';\n      }\n\n      if (this.showYear) {\n        format += 'YYYY';\n        return format;\n      } else {\n        // Trim off the \"/\" from the end of the format string.\n        return format.length ? format.substring(0, format.length - 1) : format;\n      }\n    }\n    /**\n     * Return the date for this component.\n     *\n     * @param value\n     * @return {*}\n     */\n\n  }, {\n    key: \"getDate\",\n    value: function getDate(value) {\n      var defaults = [],\n          day,\n          month,\n          year; // Map positions to identifiers to get default values for each part of day\n\n      var _ref = this.component.dayFirst ? [0, 1, 2] : [1, 0, 2],\n          _ref2 = _slicedToArray(_ref, 3),\n          DAY = _ref2[0],\n          MONTH = _ref2[1],\n          YEAR = _ref2[2];\n\n      var defaultValue = value || this.component.defaultValue;\n\n      if (defaultValue) {\n        defaults = defaultValue.split('/').map(function (x) {\n          return parseInt(x, 10);\n        });\n      }\n\n      if (this.showDay && this.refs.day) {\n        day = parseInt(this.refs.day.value, 10);\n      }\n\n      if (day === undefined || _lodash.default.isNaN(day)) {\n        day = defaults[DAY] && !_lodash.default.isNaN(defaults[DAY]) ? defaults[DAY] : 0;\n      }\n\n      if (this.showMonth && this.refs.month) {\n        // Months are 0 indexed.\n        month = parseInt(this.refs.month.value, 10);\n      }\n\n      if (month === undefined || _lodash.default.isNaN(month)) {\n        month = defaults[MONTH] && !_lodash.default.isNaN(defaults[MONTH]) ? defaults[MONTH] : 0;\n      }\n\n      if (this.showYear && this.refs.year) {\n        year = parseInt(this.refs.year.value);\n      }\n\n      if (year === undefined || _lodash.default.isNaN(year)) {\n        year = defaults[YEAR] && !_lodash.default.isNaN(defaults[YEAR]) ? defaults[YEAR] : 0;\n      }\n\n      var result;\n\n      if (!day && !month && !year) {\n        return null;\n      } // add trailing zeros if the data is showed\n\n\n      day = this.showDay ? day.toString().padStart(2, 0) : '';\n      month = this.showMonth ? month.toString().padStart(2, 0) : '';\n      year = this.showYear ? year.toString().padStart(4, 0) : '';\n\n      if (this.component.dayFirst) {\n        result = \"\".concat(day).concat(this.showDay && this.showMonth || this.showDay && this.showYear ? '/' : '').concat(month).concat(this.showMonth && this.showYear ? '/' : '').concat(year);\n      } else {\n        result = \"\".concat(month).concat(this.showDay && this.showMonth || this.showMonth && this.showYear ? '/' : '').concat(day).concat(this.showDay && this.showYear ? '/' : '').concat(year);\n      }\n\n      return result;\n    }\n    /**\n     * Return the date object for this component.\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"date\",\n    get: function get() {\n      return this.getDate();\n    }\n  }, {\n    key: \"normalizeMinMaxDates\",\n    value: function normalizeMinMaxDates() {\n      return [this.component.minDate, this.component.maxDate].map(function (date) {\n        return date ? date.split('-').reverse().join('/') : date;\n      });\n    }\n    /**\n     * Return the raw value.\n     *\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"validationValue\",\n    get: function get() {\n      var _ref3 = this.dayFirst ? this.normalizeMinMaxDates() : [this.component.minDate, this.component.maxDate];\n\n      var _ref4 = _slicedToArray(_ref3, 2);\n\n      this.component.minDate = _ref4[0];\n      this.component.maxDate = _ref4[1];\n      return this.dataValue;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var result = _get(_getPrototypeOf(DayComponent.prototype), \"getValue\", this).call(this);\n\n      return !result ? this.dataValue : result;\n    }\n    /**\n     * Get the value at a specific index.\n     *\n     * @param index\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getValueAt\",\n    value: function getValueAt(index) {\n      var date = this.date || this.emptyValue;\n\n      if (date) {\n        this.refs.input[index].value = date;\n        return this.refs.input[index].value;\n      } else {\n        this.refs.input[index].value = '';\n        return null;\n      }\n    }\n    /**\n     * Get the input value of the date.\n     *\n     * @param value\n     * @return {null}\n     */\n\n  }, {\n    key: \"getValueAsString\",\n    value: function getValueAsString(value) {\n      return this.getDate(value) || '';\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.dayFirst && this.showDay || !this.dayFirst && !this.showMonth && this.showDay) {\n        var _this$refs$day;\n\n        (_this$refs$day = this.refs.day) === null || _this$refs$day === void 0 ? void 0 : _this$refs$day.focus();\n      } else if (this.dayFirst && !this.showDay && this.showMonth || !this.dayFirst && this.showMonth) {\n        var _this$refs$month;\n\n        (_this$refs$month = this.refs.month) === null || _this$refs$month === void 0 ? void 0 : _this$refs$month.focus();\n      } else if (!this.showDay && !this.showDay && this.showYear) {\n        var _this$refs$year;\n\n        (_this$refs$year = this.refs.year) === null || _this$refs$year === void 0 ? void 0 : _this$refs$year.focus();\n      }\n    }\n  }, {\n    key: \"isPartialDay\",\n    value: function isPartialDay(value) {\n      if (!value) {\n        return false;\n      }\n\n      var _ref5 = this.component.dayFirst ? [0, 1, 2] : [1, 0, 2],\n          _ref6 = _slicedToArray(_ref5, 3),\n          DAY = _ref6[0],\n          MONTH = _ref6[1],\n          YEAR = _ref6[2];\n\n      var values = value.split('/');\n      return values[DAY] === '00' || values[MONTH] === '00' || values[YEAR] === '0000';\n    }\n  }, {\n    key: \"getValidationFormat\",\n    value: function getValidationFormat() {\n      return this.dayFirst ? 'DD-MM-YYYY' : 'MM-DD-YYYY';\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _Field2.default.schema.apply(_Field2.default, [{\n        type: 'day',\n        label: 'Day',\n        key: 'day',\n        fields: {\n          day: {\n            type: 'number',\n            placeholder: '',\n            required: false\n          },\n          month: {\n            type: 'select',\n            placeholder: '',\n            required: false\n          },\n          year: {\n            type: 'number',\n            placeholder: '',\n            required: false\n          }\n        },\n        dayFirst: false\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Day',\n        group: 'advanced',\n        icon: 'calendar',\n        documentation: '/userguide/#day',\n        weight: 50,\n        schema: DayComponent.schema()\n      };\n    }\n  }]);\n\n  return DayComponent;\n}(_Field2.default);\n\nexports.default = DayComponent;","map":null,"metadata":{},"sourceType":"script"}