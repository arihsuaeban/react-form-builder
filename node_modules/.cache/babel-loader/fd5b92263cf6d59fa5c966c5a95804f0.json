{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddressProvider = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Formio = require(\"../../Formio\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nvar AddressProvider = /*#__PURE__*/function () {\n  function AddressProvider() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AddressProvider);\n\n    this.beforeMergeOptions(options);\n    this.options = _lodash.default.merge({}, this.defaultOptions, options);\n  }\n\n  _createClass(AddressProvider, [{\n    key: \"beforeMergeOptions\",\n    value: function beforeMergeOptions() {\n      return;\n    }\n  }, {\n    key: \"defaultOptions\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"queryProperty\",\n    get: function get() {\n      return 'query';\n    }\n  }, {\n    key: \"responseProperty\",\n    get: function get() {\n      return null;\n    }\n  }, {\n    key: \"displayValueProperty\",\n    get: function get() {\n      return null;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(params) {\n      return _lodash.default.toPairs(params).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        return \"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(value));\n      }).join('&');\n    }\n  }, {\n    key: \"getRequestOptions\",\n    value: function getRequestOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _lodash.default.merge({}, this.options, options);\n    } // eslint-disable-next-line no-unused-vars\n\n  }, {\n    key: \"getRequestUrl\",\n    value: function getRequestUrl() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      throw new Error('Method AddressProvider#getRequestUrl(options) is abstract.');\n    }\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _Formio.GlobalFormio.makeStaticRequest(this.getRequestUrl(options), 'GET', null, {\n        noToken: true\n      });\n    }\n  }, {\n    key: \"search\",\n    value: function search(query) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var requestOptions = this.getRequestOptions(options);\n      var params = requestOptions.params = requestOptions.params || {};\n      params[this.queryProperty] = query;\n      return this.makeRequest(requestOptions).then(function (result) {\n        return _this.responseProperty ? _lodash.default.get(result, _this.responseProperty, []) : result;\n      });\n    }\n  }, {\n    key: \"getDisplayValue\",\n    value: function getDisplayValue(address) {\n      return this.displayValueProperty ? _lodash.default.get(address, this.displayValueProperty, '') : String(address);\n    }\n  }], [{\n    key: \"name\",\n    get: function get() {\n      return 'address';\n    }\n  }, {\n    key: \"displayName\",\n    get: function get() {\n      return 'Address';\n    }\n  }]);\n\n  return AddressProvider;\n}();\n\nexports.AddressProvider = AddressProvider;","map":null,"metadata":{},"sourceType":"script"}