{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.splice\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.regexp.constructor\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/es.string.search\");\n\nrequire(\"core-js/modules/es.string.split\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _Field2 = _interopRequireDefault(require(\"../_classes/field/Field\"));\n\nvar _Input = _interopRequireDefault(require(\"../_classes/input/Input\"));\n\nvar _utils = require(\"../../utils/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar ButtonComponent = /*#__PURE__*/function (_Field) {\n  _inherits(ButtonComponent, _Field);\n\n  var _super = _createSuper(ButtonComponent);\n\n  function ButtonComponent(component, options, data) {\n    var _this;\n\n    _classCallCheck(this, ButtonComponent);\n\n    _this = _super.call(this, component, options, data);\n    _this.filesUploading = [];\n    return _this;\n  }\n\n  _createClass(ButtonComponent, [{\n    key: \"defaultSchema\",\n    get: function get() {\n      return ButtonComponent.schema();\n    }\n  }, {\n    key: \"inputInfo\",\n    get: function get() {\n      var info = _get(_getPrototypeOf(ButtonComponent.prototype), \"elementInfo\", this).call(this);\n\n      info.type = 'button';\n      info.attr.type = ['submit', 'saveState'].includes(this.component.action) ? 'submit' : 'button';\n      this.component.theme = this.component.theme || 'default';\n      info.attr.class = \"btn btn-\".concat(this.component.theme);\n\n      if (this.component.size) {\n        info.attr.class += \" btn-\".concat(this.component.size);\n      }\n\n      if (this.component.block) {\n        info.attr.class += ' btn-block';\n      }\n\n      if (this.component.customClass) {\n        info.attr.class += \" \".concat(this.component.customClass);\n      }\n\n      info.content = this.t(this.component.label, {\n        _userInput: true\n      });\n      return info;\n    }\n  }, {\n    key: \"labelInfo\",\n    get: function get() {\n      return {\n        hidden: true\n      };\n    }\n  }, {\n    key: \"loading\",\n    set: function set(loading) {\n      this.setLoading(this.refs.button, loading);\n    }\n  }, {\n    key: \"skipInEmail\",\n    get: function get() {\n      return true;\n    } // No label needed for buttons.\n\n  }, {\n    key: \"createLabel\",\n    value: function createLabel() {}\n  }, {\n    key: \"createInput\",\n    value: function createInput(container) {\n      this.refs.button = _get(_getPrototypeOf(ButtonComponent.prototype), \"createInput\", this).call(this, container);\n      return this.refs.button;\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.dataValue;\n    }\n  }, {\n    key: \"clicked\",\n    get: function get() {\n      return this.dataValue;\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"className\",\n    get: function get() {\n      var className = _get(_getPrototypeOf(ButtonComponent.prototype), \"className\", this);\n\n      className += ' form-group';\n      return className;\n    }\n  }, {\n    key: \"oauthConfig\",\n    get: function get() {\n      if (_lodash.default.has(this, 'root.form.config.oauth') && this.component.oauthProvider) {\n        return this.root.form.config.oauth[this.component.oauthProvider];\n      } // Legacy oauth location.\n\n\n      if (this.component.oauth) {\n        return this.component.oauth;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.viewOnly || this.options.hideButtons) {\n        this._visible = false;\n      }\n\n      return _get(_getPrototypeOf(ButtonComponent.prototype), \"render\", this).call(this, this.renderTemplate('button', {\n        component: this.component,\n        input: this.inputInfo\n      }));\n    }\n  }, {\n    key: \"attachButton\",\n    value: function attachButton() {\n      var _this2 = this;\n\n      this.addShortcut(this.refs.button);\n      var onChange = null;\n      var onError = null;\n\n      if (this.component.action === 'submit') {\n        this.on('submitButton', function () {\n          _this2.disabled = true;\n        }, true);\n        this.on('cancelSubmit', function () {\n          _this2.disabled = false;\n        }, true);\n        this.on('submitDone', function (message) {\n          var resultMessage = _lodash.default.isString(message) ? message : _this2.t('complete');\n          _this2.loading = false;\n          _this2.disabled = false;\n\n          _this2.addClass(_this2.refs.button, 'btn-success submit-success');\n\n          _this2.removeClass(_this2.refs.button, 'btn-danger submit-fail');\n\n          _this2.addClass(_this2.refs.buttonMessageContainer, 'has-success');\n\n          _this2.removeClass(_this2.refs.buttonMessageContainer, 'has-error');\n\n          _this2.setContent(_this2.refs.buttonMessage, resultMessage);\n        }, true);\n        this.on('submitError', function (message) {\n          var resultMessage = _lodash.default.isString(message) ? _this2.t(message) : _this2.t(_this2.errorMessage('submitError'));\n          _this2.loading = false;\n          _this2.disabled = false;\n          _this2.hasError = true;\n\n          _this2.removeClass(_this2.refs.button, 'btn-success submit-success');\n\n          _this2.addClass(_this2.refs.button, 'btn-danger submit-fail');\n\n          _this2.removeClass(_this2.refs.buttonMessageContainer, 'has-success');\n\n          _this2.addClass(_this2.refs.buttonMessageContainer, 'has-error');\n\n          _this2.setContent(_this2.refs.buttonMessage, resultMessage);\n        }, true);\n        this.on('fileUploadingStart', function (filePromise) {\n          _this2.filesUploading.push(filePromise);\n\n          _this2.disabled = true;\n\n          _this2.setDisabled(_this2.refs.button, _this2.disabled);\n        }, true);\n        this.on('fileUploadingEnd', function (filePromise) {\n          var index = _this2.filesUploading.indexOf(filePromise);\n\n          if (index !== -1) {\n            _this2.filesUploading.splice(index, 1);\n          }\n\n          _this2.disabled = _this2.shouldDisabled ? true : false;\n\n          _this2.setDisabled(_this2.refs.button, _this2.disabled);\n        }, true);\n\n        onChange = function onChange(value, isValid) {\n          _this2.removeClass(_this2.refs.button, 'btn-success submit-success');\n\n          if (isValid) {\n            _this2.removeClass(_this2.refs.button, 'btn-danger submit-fail');\n\n            if (_this2.hasError) {\n              _this2.hasError = false;\n\n              _this2.setContent(_this2.refs.buttonMessage, '');\n\n              _this2.removeClass(_this2.refs.buttonMessageContainer, 'has-success');\n\n              _this2.removeClass(_this2.refs.buttonMessageContainer, 'has-error');\n            }\n          }\n        };\n\n        onError = function onError() {\n          _this2.hasError = true;\n\n          _this2.removeClass(_this2.refs.button, 'btn-success submit-success');\n\n          _this2.addClass(_this2.refs.button, 'btn-danger submit-fail');\n\n          _this2.removeClass(_this2.refs.buttonMessageContainer, 'has-success');\n\n          _this2.addClass(_this2.refs.buttonMessageContainer, 'has-error');\n\n          _this2.setContent(_this2.refs.buttonMessage, _this2.t(_this2.errorMessage('submitError')));\n        };\n      }\n\n      if (this.component.action === 'url') {\n        this.on('requestButton', function () {\n          _this2.disabled = true;\n        }, true);\n        this.on('requestDone', function () {\n          _this2.loading = false;\n          _this2.disabled = false;\n        }, true);\n      }\n\n      this.on('change', function (value, flags) {\n        var isValid = value.isValid;\n        var isSilent = flags && flags.silent; //check root validity only if disableOnInvalid is set and when it is not possible to make submission because of validation errors\n\n        if (flags && flags.noValidate && (_this2.component.disableOnInvalid || _this2.hasError)) {\n          isValid = flags.rootValidity || (_this2.root ? _this2.root.checkValidity(_this2.root.data, null, null, true) : true);\n          flags.rootValidity = isValid;\n        }\n\n        _this2.loading = false;\n        _this2.isDisabledOnInvalid = _this2.component.disableOnInvalid && (isSilent || !isValid);\n        _this2.disabled = _this2.shouldDisabled;\n\n        _this2.setDisabled(_this2.refs.button, _this2.disabled);\n\n        if (onChange) {\n          onChange(value, isValid);\n        }\n      }, true);\n      this.on('error', function () {\n        _this2.loading = false;\n        _this2.disabled = false;\n\n        if (onError) {\n          onError();\n        }\n      }, true);\n\n      if (this.component.saveOnEnter) {\n        this.root.addEventListener(this.root.element, 'keyup', function (event) {\n          if (event.keyCode === 13) {\n            _this2.onClick.call(_this2, event);\n          }\n        });\n      }\n\n      this.addEventListener(this.refs.button, 'click', this.onClick.bind(this));\n      this.addEventListener(this.refs.buttonMessageContainer, 'click', function () {\n        if (_this2.refs.buttonMessageContainer.classList.contains('has-error')) {\n          if (_this2.root && _this2.root.alert) {\n            _this2.scrollIntoView(_this2.root.alert);\n          }\n        }\n      });\n      this.disabled = this.shouldDisabled;\n      this.setDisabled(this.refs.button, this.disabled);\n\n      function getUrlParameter(name) {\n        name = name.replace(/[[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n        var regex = new RegExp(\"[\\\\?&]\".concat(name, \"=([^&#]*)\"));\n        var results = regex.exec(location.search);\n\n        if (!results) {\n          return results;\n        }\n\n        return decodeURIComponent(results[1].replace(/\\+/g, ' '));\n      } // If this is an OpenID Provider initiated login, perform the click event immediately\n\n\n      if (this.component.action === 'oauth' && this.oauthConfig && !this.oauthConfig.error) {\n        var iss = getUrlParameter('iss');\n\n        if (iss && this.oauthConfig.authURI.indexOf(iss) === 0) {\n          this.openOauth(this.oauthConfig);\n        }\n      }\n    }\n  }, {\n    key: \"shouldDisabled\",\n    get: function get() {\n      var _this$filesUploading;\n\n      return _get(_getPrototypeOf(ButtonComponent.prototype), \"shouldDisabled\", this) || !!((_this$filesUploading = this.filesUploading) !== null && _this$filesUploading !== void 0 && _this$filesUploading.length) || this.isDisabledOnInvalid;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      this.loadRefs(element, {\n        button: 'single',\n        buttonMessageContainer: 'single',\n        buttonMessage: 'single'\n      });\n\n      var superAttach = _get(_getPrototypeOf(ButtonComponent.prototype), \"attach\", this).call(this, element);\n\n      this.attachButton();\n      return superAttach;\n    }\n    /* eslint-enable max-statements */\n\n  }, {\n    key: \"detach\",\n    value: function detach(element) {\n      if (element && this.refs.button) {\n        this.removeShortcut(this.refs.button);\n      }\n\n      _get(_getPrototypeOf(ButtonComponent.prototype), \"detach\", this).call(this);\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      this.triggerReCaptcha(); // Don't click if disabled or in builder mode.\n\n      if (this.disabled || this.options.attachMode === 'builder') {\n        return;\n      }\n\n      this.dataValue = true;\n\n      if (this.component.action !== 'submit' && this.component.showValidations) {\n        this.emit('checkValidity', this.data);\n      }\n\n      switch (this.component.action) {\n        case 'saveState':\n        case 'submit':\n          event.preventDefault();\n          event.stopPropagation();\n          this.loading = true;\n          this.emit('submitButton', {\n            state: this.component.state || 'submitted',\n            component: this.component,\n            instance: this\n          });\n          break;\n\n        case 'event':\n          this.emit(this.interpolate(this.component.event), this.data);\n          this.events.emit(this.interpolate(this.component.event), this.data);\n          this.emit('customEvent', {\n            type: this.interpolate(this.component.event),\n            component: this.component,\n            data: this.data,\n            event: event\n          });\n          break;\n\n        case 'custom':\n          {\n            // Get the FormioForm at the root of this component's tree\n            var form = this.getRoot();\n            var flattened = {};\n            var components = {};\n            (0, _utils.eachComponent)(form.components, function (componentWrapper, path) {\n              var component = componentWrapper.component || componentWrapper;\n              flattened[path] = component;\n              components[component.key] = component;\n            }, true);\n            this.evaluate(this.component.custom, {\n              form: form,\n              flattened: flattened,\n              components: components\n            });\n            this.triggerChange();\n            break;\n          }\n\n        case 'url':\n          this.loading = true;\n          this.emit('requestButton', {\n            component: this.component,\n            instance: this\n          });\n          this.emit('requestUrl', {\n            url: this.interpolate(this.component.url),\n            headers: this.component.headers\n          });\n          break;\n\n        case 'reset':\n          this.emit('resetForm');\n          break;\n\n        case 'delete':\n          this.emit('deleteSubmission');\n          break;\n\n        case 'oauth':\n          if (this.root === this) {\n            console.warn('You must add the OAuth button to a form for it to function properly');\n            return;\n          } // Display Alert if OAuth config is missing\n\n\n          if (!this.oauthConfig) {\n            this.root.setAlert('danger', 'OAuth not configured. You must configure oauth for your project before it will work.');\n            break;\n          } // Display Alert if oAuth has an error is missing\n\n\n          if (this.oauthConfig.error) {\n            this.root.setAlert('danger', \"The Following Error Has Occured \".concat(this.oauthConfig.error));\n            break;\n          }\n\n          this.openOauth(this.oauthConfig);\n          break;\n      }\n    }\n  }, {\n    key: \"openOauth\",\n    value: function openOauth(settings) {\n      var _this3 = this;\n\n      if (!this.root.formio) {\n        console.warn('You must attach a Form API url to your form in order to use OAuth buttons.');\n        return;\n      }\n      /*eslint-disable camelcase */\n\n\n      var params = {\n        response_type: 'code',\n        client_id: settings.clientId,\n        redirect_uri: settings.redirectURI || window.location.origin || \"\".concat(window.location.protocol, \"//\").concat(window.location.host),\n        state: settings.state,\n        scope: settings.scope\n      };\n      /*eslint-enable camelcase */\n      // Needs for the correct redirection URI for the OpenID\n\n      var originalRedirectUri = params.redirect_uri; // Make display optional.\n\n      if (settings.display) {\n        params.display = settings.display;\n      }\n\n      params = Object.keys(params).map(function (key) {\n        return \"\".concat(key, \"=\").concat(encodeURIComponent(params[key]));\n      }).join('&');\n      var separator = settings.authURI.indexOf('?') !== -1 ? '&' : '?';\n      var url = \"\".concat(settings.authURI).concat(separator).concat(params);\n      var popup = window.open(url, settings.provider, 'width=1020,height=618');\n      var interval = setInterval(function () {\n        try {\n          var popupHost = popup.location.host;\n          var currentHost = window.location.host;\n\n          if (popup && !popup.closed && popupHost === currentHost && popup.location.search) {\n            popup.close();\n\n            var _params = popup.location.search.substr(1).split('&').reduce(function (params, param) {\n              var split = param.split('=');\n              params[split[0]] = split[1];\n              return params;\n            }, {});\n\n            if (_params.error) {\n              alert(_params.error_description || _params.error);\n\n              _this3.root.setAlert('danger', _params.error_description || _params.error);\n\n              return;\n            } // TODO: check for error response here\n\n\n            if (settings.state !== _params.state) {\n              _this3.root.setAlert('danger', 'OAuth state does not match. Please try logging in again.');\n\n              return;\n            } // Depending on where the settings came from, submit to either the submission endpoint (old) or oauth endpoint (new).\n\n\n            var requestPromise = _nativePromiseOnly.default.resolve();\n\n            if (_lodash.default.has(_this3, 'root.form.config.oauth') && _this3.root.form.config.oauth[_this3.component.oauthProvider]) {\n              _params.provider = settings.provider;\n              _params.redirectURI = originalRedirectUri; // Needs for the exclude oAuth Actions that not related to this button\n\n              _params.triggeredBy = _this3.key;\n              requestPromise = _this3.root.formio.makeRequest('oauth', \"\".concat(_this3.root.formio.projectUrl, \"/oauth2\"), 'POST', _params);\n            } else {\n              var submission = {\n                data: {},\n                oauth: {}\n              };\n              submission.oauth[settings.provider] = _params;\n              submission.oauth[settings.provider].redirectURI = originalRedirectUri; // Needs for the exclude oAuth Actions that not related to this button\n\n              submission.oauth[settings.provider].triggeredBy = _this3.key;\n              requestPromise = _this3.root.formio.saveSubmission(submission);\n            }\n\n            requestPromise.then(function (result) {\n              _this3.root.onSubmit(result, true);\n            }).catch(function (err) {\n              _this3.root.onSubmissionError(err);\n            });\n          }\n        } catch (error) {\n          if (error.name !== 'SecurityError') {\n            _this3.root.setAlert('danger', error.message || error);\n          }\n        }\n\n        if (!popup || popup.closed || popup.closed === undefined) {\n          clearInterval(interval);\n        }\n      }, 100);\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.refs.button) {\n        this.refs.button.focus();\n      }\n    }\n  }, {\n    key: \"triggerReCaptcha\",\n    value: function triggerReCaptcha() {\n      var _this4 = this;\n\n      if (!this.root) {\n        return;\n      }\n\n      var recaptchaComponent;\n      this.root.everyComponent(function (component) {\n        if (component.component.type === 'recaptcha' && component.component.eventType === 'buttonClick' && component.component.buttonKey === _this4.component.key) {\n          recaptchaComponent = component;\n        }\n      });\n\n      if (recaptchaComponent) {\n        recaptchaComponent.verify(\"\".concat(this.component.key, \"Click\"));\n      }\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _Input.default.schema.apply(_Input.default, [{\n        type: 'button',\n        label: 'Submit',\n        key: 'submit',\n        size: 'md',\n        leftIcon: '',\n        rightIcon: '',\n        block: false,\n        action: 'submit',\n        persistent: false,\n        disableOnInvalid: false,\n        theme: 'primary',\n        dataGridLabel: true\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Button',\n        group: 'basic',\n        icon: 'stop',\n        documentation: '/userguide/#button',\n        weight: 110,\n        schema: ButtonComponent.schema()\n      };\n    }\n  }]);\n\n  return ButtonComponent;\n}(_Field2.default);\n\nexports.default = ButtonComponent;","map":null,"metadata":{},"sourceType":"script"}