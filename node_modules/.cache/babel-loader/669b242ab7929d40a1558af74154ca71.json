{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.search\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.AddressComponentMode = void 0;\n\nvar _autocompleter = _interopRequireDefault(require(\"autocompleter\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Formio = require(\"../../Formio\");\n\nvar _GoogleAddressProvider = require(\"../../providers/address/GoogleAddressProvider\");\n\nvar _Field = _interopRequireDefault(require(\"../_classes/field/Field\"));\n\nvar _NestedComponent = _interopRequireDefault(require(\"../_classes/nested/NestedComponent\"));\n\nvar _Container = _interopRequireDefault(require(\"../container/Container\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar AddressComponentMode = {\n  Autocomplete: 'autocomplete',\n  Manual: 'manual'\n};\nexports.AddressComponentMode = AddressComponentMode;\nvar RemoveValueIconHiddenClass = 'address-autocomplete-remove-value-icon--hidden';\nvar ChildConditional = 'show = _.get(instance, \\'parent.manualMode\\', false);';\n\nvar AddressComponent = /*#__PURE__*/function (_ContainerComponent) {\n  _inherits(AddressComponent, _ContainerComponent);\n\n  var _super = _createSuper(AddressComponent);\n\n  function AddressComponent() {\n    _classCallCheck(this, AddressComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AddressComponent, [{\n    key: \"mergeSchema\",\n    value: function mergeSchema() {\n      var component = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var defaultSchema = this.defaultSchema;\n\n      if (component.components) {\n        defaultSchema = _lodash.default.omit(defaultSchema, 'components');\n      }\n\n      return _lodash.default.defaultsDeep(component, defaultSchema);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.components = this.components || [];\n\n      if (this.builderMode || this.manualModeEnabled) {\n        _NestedComponent.default.prototype.addComponents.call(this, this.manualMode ? this.address : {});\n      }\n\n      _Field.default.prototype.init.call(this);\n\n      if (!this.builderMode) {\n        if (this.component.provider) {\n          var _this$component = this.component,\n              provider = _this$component.provider,\n              providerOptions = _this$component.providerOptions;\n          this.provider = this.initializeProvider(provider, providerOptions);\n        } else if (this.component.map) {\n          // Fallback to legacy version where Google Maps was the only provider.\n          this.component.provider = _GoogleAddressProvider.GoogleAddressProvider.name;\n          this.component.providerOptions = this.component.providerOptions || {};\n          var _this$component2 = this.component,\n              map = _this$component2.map,\n              _provider = _this$component2.provider,\n              _providerOptions = _this$component2.providerOptions;\n          var key = map.key,\n              region = map.region;\n\n          if (key) {\n            _lodash.default.set(_providerOptions, 'params.key', key);\n          }\n\n          if (region) {\n            _lodash.default.set(_providerOptions, 'params.region', region);\n          }\n\n          this.provider = this.initializeProvider(_provider, _providerOptions);\n        }\n      }\n    }\n  }, {\n    key: \"initializeProvider\",\n    value: function initializeProvider(provider) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var url = this.interpolate(options.url);\n\n      var Provider = _Formio.GlobalFormio.Providers.getProvider('address', provider);\n\n      return new Provider(_objectSpread(_objectSpread({}, options), {}, {\n        url: url\n      }));\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return this.manualModeEnabled ? {\n        mode: AddressComponentMode.Autocomplete,\n        address: {}\n      } : {};\n    }\n  }, {\n    key: \"mode\",\n    get: function get() {\n      var _this$dataValue$mode, _this$dataValue;\n\n      if (!this.manualModeEnabled) {\n        return AddressComponentMode.Autocomplete;\n      }\n\n      return (_this$dataValue$mode = (_this$dataValue = this.dataValue) === null || _this$dataValue === void 0 ? void 0 : _this$dataValue.mode) !== null && _this$dataValue$mode !== void 0 ? _this$dataValue$mode : AddressComponentMode.Autocomplete;\n    },\n    set: function set(value) {\n      if (this.manualModeEnabled) {\n        this.dataValue.mode = value;\n      }\n    }\n  }, {\n    key: \"autocompleteMode\",\n    get: function get() {\n      return this.mode === AddressComponentMode.Autocomplete;\n    }\n  }, {\n    key: \"manualMode\",\n    get: function get() {\n      return this.mode === AddressComponentMode.Manual;\n    }\n  }, {\n    key: \"manualModeEnabled\",\n    get: function get() {\n      return !this.isMultiple && Boolean(this.component.enableManualMode);\n    }\n  }, {\n    key: \"restoreComponentsContext\",\n    value: function restoreComponentsContext() {\n      var _this = this;\n\n      this.getComponents().forEach(function (component) {\n        component.data = _this.address;\n        component.setValue(component.dataValue, {\n          noUpdateEvent: true\n        });\n      });\n    }\n  }, {\n    key: \"isMultiple\",\n    get: function get() {\n      return Boolean(this.component.multiple);\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      if (this.isMultiple) {\n        return _lodash.default.isArray(this.dataValue) ? this.dataValue : [this.dataValue];\n      } // Manual mode is not implementing for multiple value\n\n\n      return this.manualModeEnabled && this.dataValue ? this.dataValue.address : this.dataValue;\n    },\n    set: function set(value) {\n      if (this.manualModeEnabled && !this.isMultiple) {\n        this.dataValue.address = value;\n      } else {\n        this.dataValue = value;\n      }\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      var defaultValue = _get(_getPrototypeOf(AddressComponent.prototype), \"defaultValue\", this);\n\n      if (this.isMultiple) {\n        defaultValue = _lodash.default.isArray(defaultValue) ? defaultValue : [defaultValue];\n      }\n\n      return defaultValue;\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return AddressComponent.schema();\n    }\n  }, {\n    key: \"isValueInLegacyFormat\",\n    value: function isValueInLegacyFormat(value) {\n      return value && !value.mode;\n    }\n  }, {\n    key: \"normalizeValue\",\n    value: function normalizeValue(value) {\n      return this.manualModeEnabled && this.isValueInLegacyFormat(value) ? {\n        mode: AddressComponentMode.Autocomplete,\n        address: value\n      } : value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var changed = _Field.default.prototype.setValue.call(this, value, flags);\n\n      if (this.manualMode) {\n        this.restoreComponentsContext();\n      }\n\n      if (changed || !_lodash.default.isEmpty(value) && flags.fromSubmission) {\n        this.redraw();\n      }\n\n      return changed;\n    }\n  }, {\n    key: \"modeSwitcher\",\n    get: function get() {\n      return this.refs ? this.refs[AddressComponent.modeSwitcherRef] || null : null;\n    }\n  }, {\n    key: \"removeValueIcon\",\n    get: function get() {\n      return this.refs ? this.refs[AddressComponent.removeValueIconRef] || null : null;\n    }\n  }, {\n    key: \"searchInput\",\n    get: function get() {\n      return this.refs ? this.refs[AddressComponent.searchInputRef] || null : null;\n    }\n  }, {\n    key: \"addRowButton\",\n    get: function get() {\n      return this.refs ? this.refs[AddressComponent.addRowButtonRef] || null : null;\n    }\n  }, {\n    key: \"removeRowButton\",\n    get: function get() {\n      return this.refs ? this.refs[AddressComponent.removeRowButtonRef] || null : null;\n    }\n  }, {\n    key: \"searchInputAttributes\",\n    get: function get() {\n      var attr = {\n        name: this.options.name,\n        type: 'text',\n        class: 'form-control',\n        lang: this.options.language,\n        tabindex: this.component.tabindex || 0\n      };\n\n      if (this.component.placeholder) {\n        attr.placeholder = this.t(this.component.placeholder), {\n          _userInput: true\n        };\n      }\n\n      if (this.disabled) {\n        attr.disabled = 'disabled';\n      }\n\n      _lodash.default.defaults(attr, this.component.attributes);\n\n      return attr;\n    }\n  }, {\n    key: \"templateName\",\n    get: function get() {\n      return 'address';\n    }\n  }, {\n    key: \"gridTemplateName\",\n    get: function get() {\n      return 'multiValueTable';\n    }\n  }, {\n    key: \"rowTemplateName\",\n    get: function get() {\n      return 'multiValueRow';\n    }\n  }, {\n    key: \"hasChildren\",\n    get: function get() {\n      return !this.isMultiple && (this.builderMode || this.manualModeEnabled);\n    }\n  }, {\n    key: \"addAnother\",\n    get: function get() {\n      return this.t(this.component.addAnother || 'Add Another');\n    }\n  }, {\n    key: \"renderElement\",\n    value: function renderElement(value) {\n      return this.renderTemplate(this.templateName, {\n        children: this.hasChildren ? this.renderComponents() : '',\n        nestedKey: this.nestedKey,\n        inputAttributes: this.searchInputAttributes,\n        ref: {\n          modeSwitcher: AddressComponent.modeSwitcherRef,\n          removeValueIcon: AddressComponent.removeValueIconRef,\n          searchInput: AddressComponent.searchInputRef\n        },\n        displayValue: this.getDisplayValue(value),\n        mode: {\n          autocomplete: this.autocompleteMode,\n          manual: this.manualMode\n        }\n      });\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow(value, index) {\n      return this.renderTemplate(this.rowTemplateName, {\n        index: index,\n        disabled: this.disabled,\n        element: \"\".concat(this.renderElement(value, index))\n      });\n    }\n  }, {\n    key: \"renderGrid\",\n    value: function renderGrid() {\n      return this.renderTemplate(this.gridTemplateName, {\n        rows: this.address.map(this.renderRow.bind(this)).join(''),\n        disabled: this.disabled,\n        addAnother: this.addAnother\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.isMultiple) {\n        return _get(_getPrototypeOf(AddressComponent.prototype), \"render\", this).call(this, this.renderGrid());\n      }\n\n      return _get(_getPrototypeOf(AddressComponent.prototype), \"render\", this).call(this, this.renderElement());\n    }\n  }, {\n    key: \"onSelectAddress\",\n    value: function onSelectAddress(address, element, index) {\n      if (this.isMultiple) {\n        this.address[index] = address;\n        this.address = _toConsumableArray(this.address);\n      } else {\n        this.address = address;\n      }\n\n      this.triggerChange({\n        modified: true\n      });\n\n      if (element) {\n        element.value = this.getDisplayValue(this.isMultiple ? this.address[index] : this.address);\n      }\n\n      this.updateRemoveIcon(index);\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow() {\n      this.address = this.address.concat(this.emptyValue);\n\n      _get(_getPrototypeOf(AddressComponent.prototype), \"redraw\", this).call(this);\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this$loadRefs,\n          _this2 = this;\n\n      var result = (this.builderMode || this.manualMode ? _get(_getPrototypeOf(AddressComponent.prototype), \"attach\", this) : _Field.default.prototype.attach).call(this, element);\n\n      if (!this.builderMode) {\n        if (!this.provider && this.component.provider) {\n          var _this$component3 = this.component,\n              provider = _this$component3.provider,\n              providerOptions = _this$component3.providerOptions;\n          this.provider = this.initializeProvider(provider, providerOptions);\n        }\n      }\n\n      this.loadRefs(element, (_this$loadRefs = {}, _defineProperty(_this$loadRefs, AddressComponent.addRowButtonRef, 'single'), _defineProperty(_this$loadRefs, AddressComponent.modeSwitcherRef, 'single'), _defineProperty(_this$loadRefs, AddressComponent.removeRowButtonRef, 'multiple'), _defineProperty(_this$loadRefs, AddressComponent.removeValueIconRef, 'multiple'), _defineProperty(_this$loadRefs, AddressComponent.searchInputRef, 'multiple'), _this$loadRefs));\n      this.searchInput.forEach(function (element, index) {\n        if (!_this2.builderMode && element && _this2.provider) {\n          if (_this2.component.provider === 'google') {\n            _this2.provider.attachAutocomplete(element, index, _this2.onSelectAddress.bind(_this2));\n          } else {\n            (0, _autocompleter.default)({\n              input: element,\n              debounceWaitMs: 300,\n              fetch: function fetch(text, update) {\n                var query = text;\n\n                _this2.provider.search(query).then(update);\n              },\n              render: function render(address) {\n                var div = _this2.ce('div');\n\n                div.textContent = _this2.getDisplayValue(address);\n                return div;\n              },\n              onSelect: function onSelect(address) {\n                _this2.onSelectAddress(address, element, index);\n              }\n            });\n          }\n\n          _this2.addEventListener(element, 'blur', function () {\n            if (!element) {\n              return;\n            }\n\n            if (element.value) {\n              element.value = _this2.getDisplayValue(_this2.isMultiple ? _this2.address[index] : _this2.address);\n            }\n          });\n\n          _this2.addEventListener(element, 'keyup', function () {\n            if (!element) {\n              return;\n            }\n\n            if (!element.value) {\n              _this2.clearAddress(element, index);\n            }\n          });\n        }\n      });\n\n      if (this.addRowButton) {\n        this.addEventListener(this.addRowButton, 'click', function (event) {\n          event.preventDefault();\n\n          _this2.addRow();\n        });\n      }\n\n      this.removeRowButton.forEach(function (removeRowButton, index) {\n        _this2.addEventListener(removeRowButton, 'click', function (event) {\n          event.preventDefault();\n\n          _this2.removeValue(index);\n        });\n      });\n\n      if (this.modeSwitcher) {\n        this.addEventListener(this.modeSwitcher, 'change', function () {\n          if (!_this2.modeSwitcher) {\n            return;\n          }\n\n          _this2.dataValue = _this2.emptyValue;\n          _this2.mode = _this2.modeSwitcher.checked ? AddressComponentMode.Manual : AddressComponentMode.Autocomplete;\n\n          if (!_this2.builderMode) {\n            if (_this2.manualMode) {\n              _this2.restoreComponentsContext();\n            }\n\n            _this2.triggerChange({\n              modified: true\n            });\n          }\n\n          _this2.redraw();\n        });\n      }\n\n      if (!this.builderMode) {\n        this.removeValueIcon.forEach(function (removeValueIcon, index) {\n          _this2.updateRemoveIcon(index);\n\n          var removeValueHandler = function removeValueHandler() {\n            var _this2$searchInput;\n\n            var searchInput = (_this2$searchInput = _this2.searchInput) === null || _this2$searchInput === void 0 ? void 0 : _this2$searchInput[index];\n\n            _this2.clearAddress(searchInput, index);\n\n            if (searchInput) {\n              searchInput.focus();\n            }\n          };\n\n          _this2.addEventListener(removeValueIcon, 'click', removeValueHandler);\n\n          _this2.addEventListener(removeValueIcon, 'keydown', function (_ref) {\n            var key = _ref.key;\n\n            if (key === 'Enter') {\n              removeValueHandler();\n            }\n          });\n        });\n      }\n\n      return result;\n    }\n  }, {\n    key: \"addChildComponent\",\n    value: function addChildComponent(component) {\n      component.customConditional = ChildConditional;\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      var _this3 = this;\n\n      var modeSwitcherInFocus = this.modeSwitcher && document.activeElement === this.modeSwitcher;\n      return _get(_getPrototypeOf(AddressComponent.prototype), \"redraw\", this).call(this).then(function (result) {\n        if (modeSwitcherInFocus && _this3.modeSwitcher) {\n          _this3.modeSwitcher.focus();\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"clearAddress\",\n    value: function clearAddress(element, index) {\n      var _this$address;\n\n      if (!this.isEmpty()) {\n        this.triggerChange();\n      }\n\n      if ((_this$address = this.address) !== null && _this$address !== void 0 && _this$address[index]) {\n        this.address[index] = this.emptyValue;\n      } else {\n        this.address = this.emptyValue;\n      }\n\n      if (element) {\n        element.value = '';\n      }\n\n      this.updateRemoveIcon(index);\n    }\n  }, {\n    key: \"getDisplayValue\",\n    value: function getDisplayValue() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.address;\n      return this.provider && !this.manualMode ? this.provider.getDisplayValue(value) : '';\n    }\n  }, {\n    key: \"validateMultiple\",\n    value: function validateMultiple() {\n      return this.isMultiple;\n    }\n  }, {\n    key: \"updateRemoveIcon\",\n    value: function updateRemoveIcon(index) {\n      var _this$removeValueIcon;\n\n      var removeValueIcon = (_this$removeValueIcon = this.removeValueIcon) === null || _this$removeValueIcon === void 0 ? void 0 : _this$removeValueIcon[index];\n\n      if (removeValueIcon) {\n        var value = this.isMultiple ? this.address[index] : this.address;\n\n        if (this.isEmpty(value) || this.disabled) {\n          this.addClass(removeValueIcon, RemoveValueIconHiddenClass);\n        } else {\n          this.removeClass(removeValueIcon, RemoveValueIconHiddenClass);\n        }\n      }\n    }\n  }, {\n    key: \"getValueAsString\",\n    value: function getValueAsString(value, options) {\n      if (!value) {\n        return '';\n      }\n\n      var normalizedValue = this.normalizeValue(value);\n\n      var _ref2 = this.manualModeEnabled ? normalizedValue : {\n        address: normalizedValue,\n        mode: AddressComponentMode.Autocomplete\n      },\n          address = _ref2.address,\n          mode = _ref2.mode;\n\n      var valueInManualMode = mode === AddressComponentMode.Manual;\n\n      if (this.provider && !valueInManualMode) {\n        return this.getDisplayValue(address);\n      }\n\n      if (valueInManualMode) {\n        if (this.component.manualModeViewString) {\n          return this.interpolate(this.component.manualModeViewString, {\n            address: address,\n            data: this.data,\n            component: this.component\n          });\n        }\n\n        return this.getComponents().filter(function (component) {\n          return component.hasValue(address);\n        }).map(function (component) {\n          return [component, _lodash.default.get(address, component.key)];\n        }).filter(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n              component = _ref4[0],\n              componentValue = _ref4[1];\n\n          return !component.isEmpty(componentValue);\n        }).map(function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n              component = _ref6[0],\n              componentValue = _ref6[1];\n\n          return component.getValueAsString(componentValue, options);\n        }).join(', ');\n      }\n\n      return _get(_getPrototypeOf(AddressComponent.prototype), \"getValueAsString\", this).call(this, address, options);\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.searchInput && this.searchInput[0]) {\n        this.searchInput[0].focus();\n      }\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _Container.default.schema.apply(_Container.default, [{\n        type: 'address',\n        label: 'Address',\n        key: 'address',\n        switchToManualModeLabel: 'Can\\'t find address? Switch to manual mode.',\n        provider: '',\n        providerOptions: {},\n        manualModeViewString: '',\n        hideLabel: false,\n        disableClearIcon: false,\n        enableManualMode: false,\n        components: [{\n          label: 'Address 1',\n          tableView: false,\n          key: 'address1',\n          type: 'textfield',\n          input: true,\n          customConditional: ChildConditional\n        }, {\n          label: 'Address 2',\n          tableView: false,\n          key: 'address2',\n          type: 'textfield',\n          input: true,\n          customConditional: ChildConditional\n        }, {\n          label: 'City',\n          tableView: false,\n          key: 'city',\n          type: 'textfield',\n          input: true,\n          customConditional: ChildConditional\n        }, {\n          label: 'State',\n          tableView: false,\n          key: 'state',\n          type: 'textfield',\n          input: true,\n          customConditional: ChildConditional\n        }, {\n          label: 'Country',\n          tableView: false,\n          key: 'country',\n          type: 'textfield',\n          input: true,\n          customConditional: ChildConditional\n        }, {\n          label: 'Zip Code',\n          tableView: false,\n          key: 'zip',\n          type: 'textfield',\n          input: true,\n          customConditional: ChildConditional\n        }]\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Address',\n        group: 'advanced',\n        icon: 'home',\n        documentation: '/userguide/#address',\n        weight: 35,\n        schema: AddressComponent.schema()\n      };\n    }\n  }, {\n    key: \"modeSwitcherRef\",\n    get: function get() {\n      return 'modeSwitcher';\n    }\n  }, {\n    key: \"removeValueIconRef\",\n    get: function get() {\n      return 'removeValueIcon';\n    }\n  }, {\n    key: \"searchInputRef\",\n    get: function get() {\n      return 'searchInput';\n    }\n  }, {\n    key: \"addRowButtonRef\",\n    get: function get() {\n      return 'addButton';\n    }\n  }, {\n    key: \"removeRowButtonRef\",\n    get: function get() {\n      return 'removeRow';\n    }\n  }]);\n\n  return AddressComponent;\n}(_Container.default);\n\nexports.default = AddressComponent;","map":null,"metadata":{},"sourceType":"script"}