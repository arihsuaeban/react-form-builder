{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _uuid = require(\"uuid\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar indexeddb = function indexeddb() {\n  return {\n    title: 'indexedDB',\n    name: 'indexeddb',\n    uploadFile: function uploadFile(file, fileName, dir, progressCallback, url, options) {\n      var _this = this;\n\n      if (!('indexedDB' in window)) {\n        console.log('This browser doesn\\'t support IndexedDB');\n        return;\n      }\n\n      return new _nativePromiseOnly.default(function (resolve) {\n        var request = indexedDB.open(options.indexeddb, 3);\n\n        request.onsuccess = function (event) {\n          var db = event.target.result;\n          resolve(db);\n        };\n\n        request.onupgradeneeded = function (e) {\n          var db = e.target.result;\n          db.createObjectStore(options.indexeddbTable);\n        };\n      }).then(function (db) {\n        var reader = new FileReader();\n        return new _nativePromiseOnly.default(function (resolve, reject) {\n          reader.onload = function () {\n            var blobObject = new Blob([file], {\n              type: file.type\n            });\n            var id = (0, _uuid.v4)(blobObject);\n            var data = {\n              id: id,\n              data: blobObject,\n              name: file.name,\n              size: file.size,\n              type: file.type,\n              url: url\n            };\n            var trans = db.transaction([options.indexeddbTable], 'readwrite');\n            var addReq = trans.objectStore(options.indexeddbTable).put(data, id);\n\n            addReq.onerror = function (e) {\n              console.log('error storing data');\n              console.error(e);\n            };\n\n            trans.oncomplete = function () {\n              resolve({\n                storage: 'indexeddb',\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                url: url,\n                id: id\n              });\n            };\n          };\n\n          reader.onerror = function () {\n            return reject(_this);\n          };\n\n          reader.readAsDataURL(file);\n        });\n      });\n    },\n    downloadFile: function downloadFile(file, options) {\n      var _this2 = this;\n\n      return new _nativePromiseOnly.default(function (resolve) {\n        var request = indexedDB.open(options.indexeddb, 3);\n\n        request.onsuccess = function (event) {\n          var db = event.target.result;\n          resolve(db);\n        };\n      }).then(function (db) {\n        return new _nativePromiseOnly.default(function (resolve, reject) {\n          var trans = db.transaction([options.indexeddbTable], 'readonly');\n          var store = trans.objectStore(options.indexeddbTable).get(file.id);\n\n          store.onsuccess = function () {\n            trans.oncomplete = function () {\n              var result = store.result;\n              var dbFile = new File([store.result.data], file.name, {\n                type: store.result.type\n              });\n              var reader = new FileReader();\n\n              reader.onload = function (event) {\n                result.url = event.target.result;\n                result.storage = file.storage;\n                resolve(result);\n              };\n\n              reader.onerror = function () {\n                return reject(_this2);\n              };\n\n              reader.readAsDataURL(dbFile);\n            };\n          };\n\n          store.onerror = function () {\n            return reject(_this2);\n          };\n        });\n      });\n    },\n    deleteFile: function deleteFile(file, options) {\n      var _this3 = this;\n\n      return new _nativePromiseOnly.default(function (resolve) {\n        var request = indexedDB.open(options.indexeddb, 3);\n\n        request.onsuccess = function (event) {\n          var db = event.target.result;\n          resolve(db);\n        };\n      }).then(function (db) {\n        return new _nativePromiseOnly.default(function (resolve, reject) {\n          var trans = db.transaction([options.indexeddbTable], 'readwrite');\n          var store = trans.objectStore(options.indexeddbTable).delete(file.id);\n\n          store.onsuccess = function () {\n            trans.oncomplete = function () {\n              var result = store.result;\n              resolve(result);\n            };\n          };\n\n          store.onerror = function () {\n            return reject(_this3);\n          };\n        });\n      });\n    }\n  };\n};\n\nindexeddb.title = 'IndexedDB';\nvar _default = indexeddb;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}