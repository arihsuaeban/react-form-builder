{"ast":null,"code":"import _slicedToArray from \"D:\\\\banbufuto\\\\symbioo\\\\_LocalResearch\\\\react-form-builder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nexport default function compareVersions(v1, v2) {\n  // validate input and split into segments\n  var n1 = validateAndParse(v1);\n  var n2 = validateAndParse(v2); // pop off the patch\n\n  var p1 = n1.pop();\n  var p2 = n2.pop(); // validate numbers\n\n  var r = compareSegments(n1, n2);\n  if (r !== 0) return r; // validate pre-release\n\n  if (p1 && p2) {\n    return compareSegments(p1.split('.'), p2.split('.'));\n  } else if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n\n  return 0;\n}\nexport var validate = function validate(v) {\n  return typeof v === 'string' && /^[v\\d]/.test(v) && semver.test(v);\n};\nexport var compare = function compare(v1, v2, operator) {\n  // validate input operator\n  assertValidOperator(operator); // since result of compareVersions can only be -1 or 0 or 1\n  // a simple map can be used to replace switch\n\n  var res = compareVersions(v1, v2);\n  return operatorResMap[operator].includes(res);\n};\nexport var satisfies = function satisfies(v, r) {\n  // if no range operator then \"=\"\n  var m = r.match(/^([<>=~^]+)/);\n  var op = m ? m[1] : '='; // if gt/lt/eq then operator compare\n\n  if (op !== '^' && op !== '~') return compare(v, r, op); // else range of either \"~\" or \"^\" is assumed\n\n  var _validateAndParse = validateAndParse(v),\n      _validateAndParse2 = _slicedToArray(_validateAndParse, 3),\n      v1 = _validateAndParse2[0],\n      v2 = _validateAndParse2[1],\n      v3 = _validateAndParse2[2];\n\n  var _validateAndParse3 = validateAndParse(r),\n      _validateAndParse4 = _slicedToArray(_validateAndParse3, 3),\n      r1 = _validateAndParse4[0],\n      r2 = _validateAndParse4[1],\n      r3 = _validateAndParse4[2];\n\n  if (compareStrings(v1, r1) !== 0) return false;\n\n  if (op === '^') {\n    return compareSegments([v2, v3], [r2, r3]) >= 0;\n  }\n\n  if (compareStrings(v2, r2) !== 0) return false;\n  return compareStrings(v3, r3) >= 0;\n}; // export CJS style for parity\n\ncompareVersions.validate = validate;\ncompareVersions.compare = compare;\ncompareVersions.sastisfies = satisfies;\nvar semver = /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\nvar validateAndParse = function validateAndParse(v) {\n  if (typeof v !== 'string') {\n    throw new TypeError('Invalid argument expected string');\n  }\n\n  var match = v.match(semver);\n\n  if (!match) {\n    throw new Error(\"Invalid argument not valid semver ('\".concat(v, \"' received)\"));\n  }\n\n  match.shift();\n  return match;\n};\n\nvar isWildcard = function isWildcard(s) {\n  return s === '*' || s === 'x' || s === 'X';\n};\n\nvar tryParse = function tryParse(v) {\n  var n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\n\nvar forceType = function forceType(a, b) {\n  return typeof a !== typeof b ? [String(a), String(b)] : [a, b];\n};\n\nvar compareStrings = function compareStrings(a, b) {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n\n  var _forceType = forceType(tryParse(a), tryParse(b)),\n      _forceType2 = _slicedToArray(_forceType, 2),\n      ap = _forceType2[0],\n      bp = _forceType2[1];\n\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\n\nvar compareSegments = function compareSegments(a, b) {\n  for (var i = 0; i < Math.max(a.length, b.length); i++) {\n    var r = compareStrings(a[i] || 0, b[i] || 0);\n    if (r !== 0) return r;\n  }\n\n  return 0;\n};\n\nvar operatorResMap = {\n  '>': [1],\n  '>=': [0, 1],\n  '=': [0],\n  '<=': [-1, 0],\n  '<': [-1]\n};\nvar allowedOperators = Object.keys(operatorResMap);\n\nvar assertValidOperator = function assertValidOperator(op) {\n  if (typeof op !== 'string') {\n    throw new TypeError(\"Invalid operator type, expected string but got \".concat(typeof op));\n  }\n\n  if (allowedOperators.indexOf(op) === -1) {\n    throw new Error(\"Invalid operator, expected one of \".concat(allowedOperators.join('|')));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}