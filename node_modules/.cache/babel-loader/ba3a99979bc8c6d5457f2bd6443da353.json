{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar fileProcessor = function fileProcessor(formio, config) {\n  return function (file, options) {\n    return new _nativePromiseOnly.default(function (resolve, reject) {\n      var xhr = new XMLHttpRequest(); // Fire on network error.\n\n      xhr.onerror = function (err) {\n        err.networkError = true;\n        reject(err);\n      }; // Fire on network abort.\n\n\n      xhr.onabort = function (err) {\n        err.networkError = true;\n        reject(err);\n      }; // Fired when the response has made it back from the server.\n\n\n      xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          var mimetype = xhr.getResponseHeader('Content-Type') || file.type;\n          resolve(new File([xhr.response], file.name, {\n            type: mimetype\n          }));\n        } else {\n          reject(xhr.response || 'Unable to process file');\n        }\n      }; // Set the onabort error callback.\n\n\n      xhr.onabort = reject;\n      xhr.open('POST', config.url);\n      var token = formio.getToken();\n\n      if (token) {\n        xhr.setRequestHeader('x-jwt-token', token);\n      }\n\n      xhr.responseType = 'arraybuffer';\n      var data = new FormData();\n      data.append('file', file);\n      data.append('processorOptions', JSON.stringify(config.options || {}));\n      data.append('options', JSON.stringify(options || {})); // Get the request and send it to the server.\n\n      xhr.send(data);\n    });\n  };\n};\n\nvar _default = fileProcessor;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}