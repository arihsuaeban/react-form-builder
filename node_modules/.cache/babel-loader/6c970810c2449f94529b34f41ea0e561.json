{"ast":null,"code":"import _createForOfIteratorHelper from \"D:\\\\banbufuto\\\\symbioo\\\\_LocalResearch\\\\react-form-builder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _inherits from \"D:\\\\banbufuto\\\\symbioo\\\\_LocalResearch\\\\react-form-builder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:\\\\banbufuto\\\\symbioo\\\\_LocalResearch\\\\react-form-builder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"D:\\\\banbufuto\\\\symbioo\\\\_LocalResearch\\\\react-form-builder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\banbufuto\\\\symbioo\\\\_LocalResearch\\\\react-form-builder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/*!\n * Signature Pad v4.0.5 | https://github.com/szimek/signature_pad\n * (c) 2022 Szymon Nowak | Released under the MIT license\n */\nvar Point = /*#__PURE__*/function () {\n  function Point(x, y, pressure, time) {\n    _classCallCheck(this, Point);\n\n    if (isNaN(x) || isNaN(y)) {\n      throw new Error(\"Point is invalid: (\".concat(x, \", \").concat(y, \")\"));\n    }\n\n    this.x = +x;\n    this.y = +y;\n    this.pressure = pressure || 0;\n    this.time = time || Date.now();\n  }\n\n  _createClass(Point, [{\n    key: \"distanceTo\",\n    value: function distanceTo(start) {\n      return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.x === other.x && this.y === other.y && this.pressure === other.pressure && this.time === other.time;\n    }\n  }, {\n    key: \"velocityFrom\",\n    value: function velocityFrom(start) {\n      return this.time !== start.time ? this.distanceTo(start) / (this.time - start.time) : 0;\n    }\n  }]);\n\n  return Point;\n}();\n\nvar Bezier = /*#__PURE__*/function () {\n  function Bezier(startPoint, control2, control1, endPoint, startWidth, endWidth) {\n    _classCallCheck(this, Bezier);\n\n    this.startPoint = startPoint;\n    this.control2 = control2;\n    this.control1 = control1;\n    this.endPoint = endPoint;\n    this.startWidth = startWidth;\n    this.endWidth = endWidth;\n  }\n\n  _createClass(Bezier, [{\n    key: \"length\",\n    value: function length() {\n      var steps = 10;\n      var length = 0;\n      var px;\n      var py;\n\n      for (var i = 0; i <= steps; i += 1) {\n        var t = i / steps;\n        var cx = this.point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);\n        var cy = this.point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);\n\n        if (i > 0) {\n          var xdiff = cx - px;\n          var ydiff = cy - py;\n          length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n        }\n\n        px = cx;\n        py = cy;\n      }\n\n      return length;\n    }\n  }, {\n    key: \"point\",\n    value: function point(t, start, c1, c2, end) {\n      return start * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * c1 * (1.0 - t) * (1.0 - t) * t + 3.0 * c2 * (1.0 - t) * t * t + end * t * t * t;\n    }\n  }], [{\n    key: \"fromPoints\",\n    value: function fromPoints(points, widths) {\n      var c2 = this.calculateControlPoints(points[0], points[1], points[2]).c2;\n      var c3 = this.calculateControlPoints(points[1], points[2], points[3]).c1;\n      return new Bezier(points[1], c2, c3, points[2], widths.start, widths.end);\n    }\n  }, {\n    key: \"calculateControlPoints\",\n    value: function calculateControlPoints(s1, s2, s3) {\n      var dx1 = s1.x - s2.x;\n      var dy1 = s1.y - s2.y;\n      var dx2 = s2.x - s3.x;\n      var dy2 = s2.y - s3.y;\n      var m1 = {\n        x: (s1.x + s2.x) / 2.0,\n        y: (s1.y + s2.y) / 2.0\n      };\n      var m2 = {\n        x: (s2.x + s3.x) / 2.0,\n        y: (s2.y + s3.y) / 2.0\n      };\n      var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n      var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\n      var dxm = m1.x - m2.x;\n      var dym = m1.y - m2.y;\n      var k = l2 / (l1 + l2);\n      var cm = {\n        x: m2.x + dxm * k,\n        y: m2.y + dym * k\n      };\n      var tx = s2.x - cm.x;\n      var ty = s2.y - cm.y;\n      return {\n        c1: new Point(m1.x + tx, m1.y + ty),\n        c2: new Point(m2.x + tx, m2.y + ty)\n      };\n    }\n  }]);\n\n  return Bezier;\n}();\n\nvar SignatureEventTarget = /*#__PURE__*/function () {\n  function SignatureEventTarget() {\n    _classCallCheck(this, SignatureEventTarget);\n\n    try {\n      this._et = new EventTarget();\n    } catch (error) {\n      this._et = document;\n    }\n  }\n\n  _createClass(SignatureEventTarget, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this._et.addEventListener(type, listener, options);\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event) {\n      return this._et.dispatchEvent(event);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, callback, options) {\n      this._et.removeEventListener(type, callback, options);\n    }\n  }]);\n\n  return SignatureEventTarget;\n}();\n\nfunction throttle(fn) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;\n  var previous = 0;\n  var timeout = null;\n  var result;\n  var storedContext;\n  var storedArgs;\n\n  var later = function later() {\n    previous = Date.now();\n    timeout = null;\n    result = fn.apply(storedContext, storedArgs);\n\n    if (!timeout) {\n      storedContext = null;\n      storedArgs = [];\n    }\n  };\n\n  return function wrapper() {\n    var now = Date.now();\n    var remaining = wait - (now - previous);\n    storedContext = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    storedArgs = args;\n\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      previous = now;\n      result = fn.apply(storedContext, storedArgs);\n\n      if (!timeout) {\n        storedContext = null;\n        storedArgs = [];\n      }\n    } else if (!timeout) {\n      timeout = window.setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\nvar SignaturePad = /*#__PURE__*/function (_SignatureEventTarget) {\n  _inherits(SignaturePad, _SignatureEventTarget);\n\n  var _super = _createSuper(SignaturePad);\n\n  function SignaturePad(canvas) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, SignaturePad);\n\n    _this = _super.call(this);\n    _this.canvas = canvas;\n\n    _this._handleMouseDown = function (event) {\n      if (event.buttons === 1) {\n        _this._drawningStroke = true;\n\n        _this._strokeBegin(event);\n      }\n    };\n\n    _this._handleMouseMove = function (event) {\n      if (_this._drawningStroke) {\n        _this._strokeMoveUpdate(event);\n      }\n    };\n\n    _this._handleMouseUp = function (event) {\n      if (event.buttons === 1 && _this._drawningStroke) {\n        _this._drawningStroke = false;\n\n        _this._strokeEnd(event);\n      }\n    };\n\n    _this._handleTouchStart = function (event) {\n      event.preventDefault();\n\n      if (event.targetTouches.length === 1) {\n        var touch = event.changedTouches[0];\n\n        _this._strokeBegin(touch);\n      }\n    };\n\n    _this._handleTouchMove = function (event) {\n      event.preventDefault();\n      var touch = event.targetTouches[0];\n\n      _this._strokeMoveUpdate(touch);\n    };\n\n    _this._handleTouchEnd = function (event) {\n      var wasCanvasTouched = event.target === _this.canvas;\n\n      if (wasCanvasTouched) {\n        event.preventDefault();\n        var touch = event.changedTouches[0];\n\n        _this._strokeEnd(touch);\n      }\n    };\n\n    _this._handlePointerStart = function (event) {\n      _this._drawningStroke = true;\n      event.preventDefault();\n\n      _this._strokeBegin(event);\n    };\n\n    _this._handlePointerMove = function (event) {\n      if (_this._drawningStroke) {\n        event.preventDefault();\n\n        _this._strokeMoveUpdate(event);\n      }\n    };\n\n    _this._handlePointerEnd = function (event) {\n      if (_this._drawningStroke) {\n        event.preventDefault();\n        _this._drawningStroke = false;\n\n        _this._strokeEnd(event);\n      }\n    };\n\n    _this.velocityFilterWeight = options.velocityFilterWeight || 0.7;\n    _this.minWidth = options.minWidth || 0.5;\n    _this.maxWidth = options.maxWidth || 2.5;\n    _this.throttle = 'throttle' in options ? options.throttle : 16;\n    _this.minDistance = 'minDistance' in options ? options.minDistance : 5;\n    _this.dotSize = options.dotSize || 0;\n    _this.penColor = options.penColor || 'black';\n    _this.backgroundColor = options.backgroundColor || 'rgba(0,0,0,0)';\n    _this._strokeMoveUpdate = _this.throttle ? throttle(SignaturePad.prototype._strokeUpdate, _this.throttle) : SignaturePad.prototype._strokeUpdate;\n    _this._ctx = canvas.getContext('2d');\n\n    _this.clear();\n\n    _this.on();\n\n    return _this;\n  }\n\n  _createClass(SignaturePad, [{\n    key: \"clear\",\n    value: function clear() {\n      var ctx = this._ctx,\n          canvas = this.canvas;\n      ctx.fillStyle = this.backgroundColor;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      this._data = [];\n\n      this._reset();\n\n      this._isEmpty = true;\n    }\n  }, {\n    key: \"fromDataURL\",\n    value: function fromDataURL(dataUrl) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve, reject) {\n        var image = new Image();\n        var ratio = options.ratio || window.devicePixelRatio || 1;\n        var width = options.width || _this2.canvas.width / ratio;\n        var height = options.height || _this2.canvas.height / ratio;\n        var xOffset = options.xOffset || 0;\n        var yOffset = options.yOffset || 0;\n\n        _this2._reset();\n\n        image.onload = function () {\n          _this2._ctx.drawImage(image, xOffset, yOffset, width, height);\n\n          resolve();\n        };\n\n        image.onerror = function (error) {\n          reject(error);\n        };\n\n        image.crossOrigin = 'anonymous';\n        image.src = dataUrl;\n        _this2._isEmpty = false;\n      });\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';\n      var encoderOptions = arguments.length > 1 ? arguments[1] : undefined;\n\n      switch (type) {\n        case 'image/svg+xml':\n          return this._toSVG();\n\n        default:\n          return this.canvas.toDataURL(type, encoderOptions);\n      }\n    }\n  }, {\n    key: \"on\",\n    value: function on() {\n      this.canvas.style.touchAction = 'none';\n      this.canvas.style.msTouchAction = 'none';\n      this.canvas.style.userSelect = 'none';\n      var isIOS = /Macintosh/.test(navigator.userAgent) && 'ontouchstart' in document;\n\n      if (window.PointerEvent && !isIOS) {\n        this._handlePointerEvents();\n      } else {\n        this._handleMouseEvents();\n\n        if ('ontouchstart' in window) {\n          this._handleTouchEvents();\n        }\n      }\n    }\n  }, {\n    key: \"off\",\n    value: function off() {\n      this.canvas.style.touchAction = 'auto';\n      this.canvas.style.msTouchAction = 'auto';\n      this.canvas.style.userSelect = 'auto';\n      this.canvas.removeEventListener('pointerdown', this._handlePointerStart);\n      this.canvas.removeEventListener('pointermove', this._handlePointerMove);\n      document.removeEventListener('pointerup', this._handlePointerEnd);\n      this.canvas.removeEventListener('mousedown', this._handleMouseDown);\n      this.canvas.removeEventListener('mousemove', this._handleMouseMove);\n      document.removeEventListener('mouseup', this._handleMouseUp);\n      this.canvas.removeEventListener('touchstart', this._handleTouchStart);\n      this.canvas.removeEventListener('touchmove', this._handleTouchMove);\n      this.canvas.removeEventListener('touchend', this._handleTouchEnd);\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._isEmpty;\n    }\n  }, {\n    key: \"fromData\",\n    value: function fromData(pointGroups) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$clear = _ref.clear,\n          clear = _ref$clear === void 0 ? true : _ref$clear;\n\n      if (clear) {\n        this.clear();\n      }\n\n      this._fromData(pointGroups, this._drawCurve.bind(this), this._drawDot.bind(this));\n\n      this._data = this._data.concat(pointGroups);\n    }\n  }, {\n    key: \"toData\",\n    value: function toData() {\n      return this._data;\n    }\n  }, {\n    key: \"_strokeBegin\",\n    value: function _strokeBegin(event) {\n      this.dispatchEvent(new CustomEvent('beginStroke', {\n        detail: event\n      }));\n      var newPointGroup = {\n        dotSize: this.dotSize,\n        minWidth: this.minWidth,\n        maxWidth: this.maxWidth,\n        penColor: this.penColor,\n        points: []\n      };\n\n      this._data.push(newPointGroup);\n\n      this._reset();\n\n      this._strokeUpdate(event);\n    }\n  }, {\n    key: \"_strokeUpdate\",\n    value: function _strokeUpdate(event) {\n      if (this._data.length === 0) {\n        this._strokeBegin(event);\n\n        return;\n      }\n\n      this.dispatchEvent(new CustomEvent('beforeUpdateStroke', {\n        detail: event\n      }));\n      var x = event.clientX;\n      var y = event.clientY;\n      var pressure = event.pressure !== undefined ? event.pressure : event.force !== undefined ? event.force : 0;\n\n      var point = this._createPoint(x, y, pressure);\n\n      var lastPointGroup = this._data[this._data.length - 1];\n      var lastPoints = lastPointGroup.points;\n      var lastPoint = lastPoints.length > 0 && lastPoints[lastPoints.length - 1];\n      var isLastPointTooClose = lastPoint ? point.distanceTo(lastPoint) <= this.minDistance : false;\n      var penColor = lastPointGroup.penColor,\n          dotSize = lastPointGroup.dotSize,\n          minWidth = lastPointGroup.minWidth,\n          maxWidth = lastPointGroup.maxWidth;\n\n      if (!lastPoint || !(lastPoint && isLastPointTooClose)) {\n        var curve = this._addPoint(point);\n\n        if (!lastPoint) {\n          this._drawDot(point, {\n            penColor: penColor,\n            dotSize: dotSize,\n            minWidth: minWidth,\n            maxWidth: maxWidth\n          });\n        } else if (curve) {\n          this._drawCurve(curve, {\n            penColor: penColor,\n            dotSize: dotSize,\n            minWidth: minWidth,\n            maxWidth: maxWidth\n          });\n        }\n\n        lastPoints.push({\n          time: point.time,\n          x: point.x,\n          y: point.y,\n          pressure: point.pressure\n        });\n      }\n\n      this.dispatchEvent(new CustomEvent('afterUpdateStroke', {\n        detail: event\n      }));\n    }\n  }, {\n    key: \"_strokeEnd\",\n    value: function _strokeEnd(event) {\n      this._strokeUpdate(event);\n\n      this.dispatchEvent(new CustomEvent('endStroke', {\n        detail: event\n      }));\n    }\n  }, {\n    key: \"_handlePointerEvents\",\n    value: function _handlePointerEvents() {\n      this._drawningStroke = false;\n      this.canvas.addEventListener('pointerdown', this._handlePointerStart);\n      this.canvas.addEventListener('pointermove', this._handlePointerMove);\n      document.addEventListener('pointerup', this._handlePointerEnd);\n    }\n  }, {\n    key: \"_handleMouseEvents\",\n    value: function _handleMouseEvents() {\n      this._drawningStroke = false;\n      this.canvas.addEventListener('mousedown', this._handleMouseDown);\n      this.canvas.addEventListener('mousemove', this._handleMouseMove);\n      document.addEventListener('mouseup', this._handleMouseUp);\n    }\n  }, {\n    key: \"_handleTouchEvents\",\n    value: function _handleTouchEvents() {\n      this.canvas.addEventListener('touchstart', this._handleTouchStart);\n      this.canvas.addEventListener('touchmove', this._handleTouchMove);\n      this.canvas.addEventListener('touchend', this._handleTouchEnd);\n    }\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      this._lastPoints = [];\n      this._lastVelocity = 0;\n      this._lastWidth = (this.minWidth + this.maxWidth) / 2;\n      this._ctx.fillStyle = this.penColor;\n    }\n  }, {\n    key: \"_createPoint\",\n    value: function _createPoint(x, y, pressure) {\n      var rect = this.canvas.getBoundingClientRect();\n      return new Point(x - rect.left, y - rect.top, pressure, new Date().getTime());\n    }\n  }, {\n    key: \"_addPoint\",\n    value: function _addPoint(point) {\n      var _lastPoints = this._lastPoints;\n\n      _lastPoints.push(point);\n\n      if (_lastPoints.length > 2) {\n        if (_lastPoints.length === 3) {\n          _lastPoints.unshift(_lastPoints[0]);\n        }\n\n        var widths = this._calculateCurveWidths(_lastPoints[1], _lastPoints[2]);\n\n        var curve = Bezier.fromPoints(_lastPoints, widths);\n\n        _lastPoints.shift();\n\n        return curve;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_calculateCurveWidths\",\n    value: function _calculateCurveWidths(startPoint, endPoint) {\n      var velocity = this.velocityFilterWeight * endPoint.velocityFrom(startPoint) + (1 - this.velocityFilterWeight) * this._lastVelocity;\n\n      var newWidth = this._strokeWidth(velocity);\n\n      var widths = {\n        end: newWidth,\n        start: this._lastWidth\n      };\n      this._lastVelocity = velocity;\n      this._lastWidth = newWidth;\n      return widths;\n    }\n  }, {\n    key: \"_strokeWidth\",\n    value: function _strokeWidth(velocity) {\n      return Math.max(this.maxWidth / (velocity + 1), this.minWidth);\n    }\n  }, {\n    key: \"_drawCurveSegment\",\n    value: function _drawCurveSegment(x, y, width) {\n      var ctx = this._ctx;\n      ctx.moveTo(x, y);\n      ctx.arc(x, y, width, 0, 2 * Math.PI, false);\n      this._isEmpty = false;\n    }\n  }, {\n    key: \"_drawCurve\",\n    value: function _drawCurve(curve, options) {\n      var ctx = this._ctx;\n      var widthDelta = curve.endWidth - curve.startWidth;\n      var drawSteps = Math.ceil(curve.length()) * 2;\n      ctx.beginPath();\n      ctx.fillStyle = options.penColor;\n\n      for (var i = 0; i < drawSteps; i += 1) {\n        var t = i / drawSteps;\n        var tt = t * t;\n        var ttt = tt * t;\n        var u = 1 - t;\n        var uu = u * u;\n        var uuu = uu * u;\n        var x = uuu * curve.startPoint.x;\n        x += 3 * uu * t * curve.control1.x;\n        x += 3 * u * tt * curve.control2.x;\n        x += ttt * curve.endPoint.x;\n        var y = uuu * curve.startPoint.y;\n        y += 3 * uu * t * curve.control1.y;\n        y += 3 * u * tt * curve.control2.y;\n        y += ttt * curve.endPoint.y;\n        var width = Math.min(curve.startWidth + ttt * widthDelta, options.maxWidth);\n\n        this._drawCurveSegment(x, y, width);\n      }\n\n      ctx.closePath();\n      ctx.fill();\n    }\n  }, {\n    key: \"_drawDot\",\n    value: function _drawDot(point, options) {\n      var ctx = this._ctx;\n      var width = options.dotSize > 0 ? options.dotSize : (options.minWidth + options.maxWidth) / 2;\n      ctx.beginPath();\n\n      this._drawCurveSegment(point.x, point.y, width);\n\n      ctx.closePath();\n      ctx.fillStyle = options.penColor;\n      ctx.fill();\n    }\n  }, {\n    key: \"_fromData\",\n    value: function _fromData(pointGroups, drawCurve, drawDot) {\n      var _iterator = _createForOfIteratorHelper(pointGroups),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var group = _step.value;\n          var penColor = group.penColor,\n              dotSize = group.dotSize,\n              minWidth = group.minWidth,\n              maxWidth = group.maxWidth,\n              points = group.points;\n\n          if (points.length > 1) {\n            for (var j = 0; j < points.length; j += 1) {\n              var basicPoint = points[j];\n              var point = new Point(basicPoint.x, basicPoint.y, basicPoint.pressure, basicPoint.time);\n              this.penColor = penColor;\n\n              if (j === 0) {\n                this._reset();\n              }\n\n              var curve = this._addPoint(point);\n\n              if (curve) {\n                drawCurve(curve, {\n                  penColor: penColor,\n                  dotSize: dotSize,\n                  minWidth: minWidth,\n                  maxWidth: maxWidth\n                });\n              }\n            }\n          } else {\n            this._reset();\n\n            drawDot(points[0], {\n              penColor: penColor,\n              dotSize: dotSize,\n              minWidth: minWidth,\n              maxWidth: maxWidth\n            });\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_toSVG\",\n    value: function _toSVG() {\n      var pointGroups = this._data;\n      var ratio = Math.max(window.devicePixelRatio || 1, 1);\n      var minX = 0;\n      var minY = 0;\n      var maxX = this.canvas.width / ratio;\n      var maxY = this.canvas.height / ratio;\n      var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n      svg.setAttribute('width', this.canvas.width.toString());\n      svg.setAttribute('height', this.canvas.height.toString());\n\n      this._fromData(pointGroups, function (curve, _ref2) {\n        var penColor = _ref2.penColor;\n        var path = document.createElement('path');\n\n        if (!isNaN(curve.control1.x) && !isNaN(curve.control1.y) && !isNaN(curve.control2.x) && !isNaN(curve.control2.y)) {\n          var attr = \"M \".concat(curve.startPoint.x.toFixed(3), \",\").concat(curve.startPoint.y.toFixed(3), \" \") + \"C \".concat(curve.control1.x.toFixed(3), \",\").concat(curve.control1.y.toFixed(3), \" \") + \"\".concat(curve.control2.x.toFixed(3), \",\").concat(curve.control2.y.toFixed(3), \" \") + \"\".concat(curve.endPoint.x.toFixed(3), \",\").concat(curve.endPoint.y.toFixed(3));\n          path.setAttribute('d', attr);\n          path.setAttribute('stroke-width', (curve.endWidth * 2.25).toFixed(3));\n          path.setAttribute('stroke', penColor);\n          path.setAttribute('fill', 'none');\n          path.setAttribute('stroke-linecap', 'round');\n          svg.appendChild(path);\n        }\n      }, function (point, _ref3) {\n        var penColor = _ref3.penColor,\n            dotSize = _ref3.dotSize,\n            minWidth = _ref3.minWidth,\n            maxWidth = _ref3.maxWidth;\n        var circle = document.createElement('circle');\n        var size = dotSize > 0 ? dotSize : (minWidth + maxWidth) / 2;\n        circle.setAttribute('r', size.toString());\n        circle.setAttribute('cx', point.x.toString());\n        circle.setAttribute('cy', point.y.toString());\n        circle.setAttribute('fill', penColor);\n        svg.appendChild(circle);\n      });\n\n      var prefix = 'data:image/svg+xml;base64,';\n      var header = '<svg' + ' xmlns=\"http://www.w3.org/2000/svg\"' + ' xmlns:xlink=\"http://www.w3.org/1999/xlink\"' + \" viewBox=\\\"\".concat(minX, \" \").concat(minY, \" \").concat(this.canvas.width, \" \").concat(this.canvas.height, \"\\\"\") + \" width=\\\"\".concat(maxX, \"\\\"\") + \" height=\\\"\".concat(maxY, \"\\\"\") + '>';\n      var body = svg.innerHTML;\n\n      if (body === undefined) {\n        var dummy = document.createElement('dummy');\n        var nodes = svg.childNodes;\n        dummy.innerHTML = '';\n\n        for (var i = 0; i < nodes.length; i += 1) {\n          dummy.appendChild(nodes[i].cloneNode(true));\n        }\n\n        body = dummy.innerHTML;\n      }\n\n      var footer = '</svg>';\n      var data = header + body + footer;\n      return prefix + btoa(data);\n    }\n  }]);\n\n  return SignaturePad;\n}(SignatureEventTarget);\n\nexport { SignaturePad as default };","map":null,"metadata":{},"sourceType":"module"}