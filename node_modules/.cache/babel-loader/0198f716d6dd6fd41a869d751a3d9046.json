{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _widgets = _interopRequireDefault(require(\"../../../widgets\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = [{\n  weight: 400,\n  type: 'select',\n  input: true,\n  key: 'widget.type',\n  label: 'Widget',\n  placeholder: 'Select a widget',\n  tooltip: 'The widget is the display UI used to input the value of the field.',\n  defaultValue: 'input',\n  onChange: function onChange(context) {\n    context.data.widget = _lodash.default.pick(context.data.widget, 'type');\n  },\n  dataSrc: 'values',\n  data: {\n    values: [{\n      label: 'Input Field',\n      value: 'input'\n    }, {\n      label: 'Calendar Picker',\n      value: 'calendar'\n    }]\n  },\n  conditional: {\n    json: {\n      '===': [{\n        var: 'data.type'\n      }, 'textfield']\n    }\n  }\n}, {\n  weight: 405,\n  type: 'textarea',\n  key: 'widget',\n  label: 'Widget Settings',\n  refreshOn: 'wiget.type',\n  clearOnHide: false,\n  // Deleted clearOnHide and refreshOn to make possible to change exist widget settings.\n  calculateValue: function calculateValue(context) {\n    var calculatedValue = context.instance.calculatedValue;\n    var type = context.data.widget.type;\n\n    if (_lodash.default.isEmpty(_lodash.default.omit(context.data.widget, 'type')) || _lodash.default.isEmpty(_lodash.default.omit(calculatedValue, 'type'))) {\n      if (calculatedValue && !calculatedValue.type) {\n        return context.data.widget;\n      }\n\n      var existWidget = context.instance._currentForm.options.editComponent.widget;\n\n      if (existWidget && !_lodash.default.isEmpty(_lodash.default.omit(existWidget, 'type')) && type === existWidget.type) {\n        return _lodash.default.omit(existWidget, 'language');\n      } else if (type) {\n        return _lodash.default.omit(_widgets.default[type].defaultSettings, 'language');\n      }\n    }\n\n    return context.data.widget;\n  },\n  input: true,\n  rows: 5,\n  editor: 'ace',\n  as: 'json',\n  conditional: {\n    json: {\n      '!==': [{\n        var: 'data.widget.type'\n      }, 'input']\n    }\n  }\n}, {\n  weight: 410,\n  type: 'textfield',\n  input: true,\n  key: 'inputMask',\n  label: 'Input Mask',\n  tooltip: 'An input mask helps the user with input by ensuring a predefined format.<br><br>9: numeric<br>a: alphabetical<br>*: alphanumeric<br><br>Example telephone mask: (999) 999-9999<br><br>See the <a target=\\'_blank\\' href=\\'https://github.com/RobinHerbots/jquery.inputmask\\'>jquery.inputmask documentation</a> for more information.</a>',\n  customConditional: function customConditional(context) {\n    return !context.data.allowMultipleMasks;\n  }\n}, {\n  weight: 410,\n  type: 'textfield',\n  input: true,\n  key: 'displayMask',\n  label: 'Display Mask',\n  tooltip: 'A display mask helps to display the input in a readable way, this won\\'t affect the  value which will be saved (to affect both view and saved value, delete Display Mask and use Input Mask).<br><br>9: numeric<br>a: alphabetical<br>*: alphanumeric<br><br>Example telephone mask: (999) 999-9999<br><br>See the <a target=\\'_blank\\' href=\\'https://github.com/RobinHerbots/jquery.inputmask\\'>jquery.inputmask documentation</a> for more information.</a>',\n  customConditional: function customConditional(context) {\n    return !context.data.allowMultipleMasks;\n  }\n}, {\n  weight: 411,\n  type: 'textfield',\n  input: true,\n  key: 'inputMaskPlaceholderChar',\n  label: 'Input Mask Placeholder Char',\n  tooltip: \"You can specify a char which will be used as a placeholder in the field. <br>E.g., \\u02CD<br>Make note that placeholder char will be replaced by a space if it is used inside the mask\",\n  validation: {\n    maxLength: 1\n  },\n  customConditional: function customConditional(context) {\n    return context.data.inputMask || context.data.displayMask;\n  }\n}, {\n  weight: 413,\n  type: 'checkbox',\n  input: true,\n  key: 'allowMultipleMasks',\n  label: 'Allow Multiple Masks'\n}, {\n  weight: 1350,\n  type: 'checkbox',\n  input: true,\n  key: 'spellcheck',\n  defaultValue: true,\n  label: 'Allow Spellcheck'\n}, {\n  weight: 417,\n  type: 'datagrid',\n  input: true,\n  key: 'inputMasks',\n  label: 'Input Masks',\n  customConditional: function customConditional(context) {\n    return context.data.allowMultipleMasks === true;\n  },\n  reorder: true,\n  components: [{\n    type: 'textfield',\n    key: 'label',\n    label: 'Label',\n    input: true\n  }, {\n    type: 'textfield',\n    key: 'mask',\n    label: 'Mask',\n    input: true\n  }]\n}, {\n  weight: 320,\n  type: 'textfield',\n  input: true,\n  key: 'prefix',\n  label: 'Prefix'\n}, {\n  weight: 330,\n  type: 'textfield',\n  input: true,\n  key: 'suffix',\n  label: 'Suffix'\n}, {\n  weight: 700,\n  type: 'textfield',\n  input: true,\n  key: 'autocomplete',\n  label: 'Autocomplete',\n  placeholder: 'on',\n  tooltip: 'Indicates whether input elements can by default have their values automatically completed by the browser. See the <a href=\\'https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\\'>MDN documentation</a> on autocomplete for more information.'\n}, {\n  weight: 1300,\n  type: 'checkbox',\n  label: 'Hide Input',\n  tooltip: 'Hide the input in the browser. This does not encrypt on the server. Do not use for passwords.',\n  key: 'mask',\n  input: true\n}, {\n  weight: 1200,\n  type: 'checkbox',\n  label: 'Show Word Counter',\n  tooltip: 'Show a live count of the number of words.',\n  key: 'showWordCount',\n  input: true\n}, {\n  weight: 1201,\n  type: 'checkbox',\n  label: 'Show Character Counter',\n  tooltip: 'Show a live count of the number of characters.',\n  key: 'showCharCount',\n  input: true\n}];\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}