{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.reflect.set\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Component = _interopRequireDefault(require(\"../_classes/component/Component\"));\n\nvar _Components = _interopRequireDefault(require(\"../Components\"));\n\nvar _NestedDataComponent2 = _interopRequireDefault(require(\"../_classes/nesteddata/NestedDataComponent\"));\n\nvar _Node = _interopRequireDefault(require(\"./Node\"));\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction set(target, property, value, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.set) {\n    set = Reflect.set;\n  } else {\n    set = function set(target, property, value, receiver) {\n      var base = _superPropBase(target, property);\n\n      var desc;\n\n      if (base) {\n        desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.set) {\n          desc.set.call(receiver, value);\n          return true;\n        } else if (!desc.writable) {\n          return false;\n        }\n      }\n\n      desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n      if (desc) {\n        if (!desc.writable) {\n          return false;\n        }\n\n        desc.value = value;\n        Object.defineProperty(receiver, property, desc);\n      } else {\n        _defineProperty(receiver, property, value);\n      }\n\n      return true;\n    };\n  }\n\n  return set(target, property, value, receiver);\n}\n\nfunction _set(target, property, value, receiver, isStrict) {\n  var s = set(target, property, value, receiver || target);\n\n  if (!s && isStrict) {\n    throw new Error('failed to set property');\n  }\n\n  return value;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar TreeComponent = /*#__PURE__*/function (_NestedDataComponent) {\n  _inherits(TreeComponent, _NestedDataComponent);\n\n  var _super = _createSuper(TreeComponent);\n\n  function TreeComponent() {\n    var _this;\n\n    _classCallCheck(this, TreeComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.type = 'tree';\n    return _this;\n  }\n\n  _createClass(TreeComponent, [{\n    key: \"emptyValue\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"viewComponents\",\n    get: function get() {\n      if (!this.viewComponentsInstantiated) {\n        this.viewComponentsInstantiated = true;\n        this._viewComponents = this.createComponents({});\n      }\n\n      return this._viewComponents;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      if (this.builderMode) {\n        return _get(_getPrototypeOf(TreeComponent.prototype), \"init\", this).call(this);\n      }\n\n      this.components = [];\n      this.componentOptions = _objectSpread(_objectSpread({}, this.options), {}, {\n        parent: this,\n        root: this.root || this\n      });\n      this.disabled = this.shouldDisabled;\n      this.setRoot();\n      this.viewComponentsInstantiated = false;\n      this._viewComponents = [];\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return _get(_getPrototypeOf(TreeComponent.prototype), \"disabled\", this);\n    },\n    set: function set(disabled) {\n      _set(_getPrototypeOf(TreeComponent.prototype), \"disabled\", disabled, this, true);\n\n      this.viewComponents.forEach(function (component) {\n        return component.parentDisabled = disabled;\n      });\n    }\n  }, {\n    key: \"isDefaultValueComponent\",\n    get: function get() {\n      return !!this.options.editComponent && !!this.options.editForm && this.component.key === 'defaultValue';\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _get(_getPrototypeOf(TreeComponent.prototype), \"destroy\", this).call(this);\n\n      if (!this.builderMode) {\n        this.removeComponents(this._viewComponents);\n      }\n    }\n  }, {\n    key: \"createComponents\",\n    value: function createComponents(data, node) {\n      var _this2 = this;\n\n      var components = this.componentComponents.map(function (component) {\n        var componentInstance = _Components.default.create(component, _this2.componentOptions, data);\n\n        componentInstance.init();\n        componentInstance.parentDisabled = _this2.disabled;\n        return componentInstance;\n      });\n\n      if (node) {\n        this.checkNode(this.data, node);\n      }\n\n      return components;\n    }\n  }, {\n    key: \"removeComponents\",\n    value: function removeComponents(components) {\n      return components.map(function (component) {\n        return component.destroy();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.builderMode) {\n        return _get(_getPrototypeOf(TreeComponent.prototype), \"render\", this).call(this);\n      }\n\n      return _get(_getPrototypeOf(TreeComponent.prototype), \"render\", this).call(this, this.renderTree(this.treeRoot));\n    }\n  }, {\n    key: \"renderTree\",\n    value: function renderTree() {\n      var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var odd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var childNodes = node.hasChildren && !node.collapsed ? this.renderChildNodes(node.children, !odd) : [];\n      var content = node.changing ? this.renderEdit(node) : this.renderView(node);\n      return this.renderTemplate('tree', {\n        odd: odd,\n        childNodes: childNodes,\n        content: content,\n        node: node\n      });\n    }\n  }, {\n    key: \"renderChildNodes\",\n    value: function renderChildNodes() {\n      var _this3 = this;\n\n      var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var odd = arguments.length > 1 ? arguments[1] : undefined;\n      return nodes.map(function (node) {\n        return _this3.renderTree(node, odd);\n      });\n    }\n  }, {\n    key: \"renderEdit\",\n    value: function renderEdit() {\n      var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.renderTemplate('treeEdit', {\n        children: this.renderComponents(node.components),\n        node: node\n      });\n    }\n  }, {\n    key: \"renderView\",\n    value: function renderView() {\n      var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.renderTemplate('treeView', {\n        values: this.viewComponents.map(function (component) {\n          component.data = node.data;\n          component.checkComponentConditions(node.data);\n          return component.getView(component.dataValue);\n        }),\n        nodeData: node.data,\n        node: node\n      });\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      if (this.builderMode) {\n        return _get(_getPrototypeOf(TreeComponent.prototype), \"attach\", this).call(this, element);\n      }\n\n      this.loadRefs(element, {\n        root: 'single'\n      });\n      return _nativePromiseOnly.default.all([_get(_getPrototypeOf(TreeComponent.prototype), \"attach\", this).call(this, element), this.attachNode(this.refs.root, this.treeRoot)]);\n    }\n  }, {\n    key: \"attachNode\",\n    value: function attachNode(element, node) {\n      if (!element) {\n        return _nativePromiseOnly.default.resolve();\n      }\n\n      var componentsPromise = _nativePromiseOnly.default.resolve();\n\n      var childrenPromise = _nativePromiseOnly.default.resolve();\n\n      node.refs = _lodash.default.reduce(element.children, function (refs, child) {\n        return child.hasAttribute('ref') ? _objectSpread(_objectSpread({}, refs), {}, _defineProperty({}, child.getAttribute('ref'), child)) : refs;\n      }, {});\n\n      if (node.refs.content) {\n        this.attachActions(node);\n        componentsPromise = this.attachComponents(node);\n      }\n\n      if (node.refs.childNodes) {\n        childrenPromise = this.attachChildren(node);\n      }\n\n      return _nativePromiseOnly.default.all([componentsPromise, childrenPromise]);\n    }\n  }, {\n    key: \"attachActions\",\n    value: function attachActions(node) {\n      var _node$refs$content$ch,\n          _this4 = this;\n\n      if (!node.editing) {\n        this.loadRefs.call(node, node.refs.content, {\n          addChild: 'single',\n          editNode: 'single',\n          removeNode: 'single',\n          revertNode: 'single',\n          toggleNode: 'single'\n        });\n      } //load refs correctly (if there is nested tree)\n\n\n      this.loadRefs.call(node, ((_node$refs$content$ch = node.refs.content.children[0]) === null || _node$refs$content$ch === void 0 ? void 0 : _node$refs$content$ch.children[1]) || node.refs.content, {\n        cancelNode: 'single',\n        saveNode: 'single'\n      });\n\n      if (node.refs.addChild) {\n        this.addEventListener(node.refs.addChild, 'click', function () {\n          _this4.addChild(node);\n        });\n      }\n\n      if (node.refs.cancelNode) {\n        this.addEventListener(node.refs.cancelNode, 'click', function () {\n          _this4.cancelNode(node);\n        });\n      }\n\n      if (node.refs.editNode) {\n        this.addEventListener(node.refs.editNode, 'click', function () {\n          _this4.editNode(node);\n        });\n      }\n\n      if (node.refs.removeNode) {\n        this.addEventListener(node.refs.removeNode, 'click', function () {\n          _this4.removeNode(node);\n        });\n      }\n\n      if (node.refs.revertNode) {\n        this.addEventListener(node.refs.revertNode, 'click', function () {\n          _this4.revertNode(node);\n        });\n      }\n\n      if (node.refs.saveNode) {\n        this.addEventListener(node.refs.saveNode, 'click', function () {\n          _this4.saveNode(node);\n        });\n      }\n\n      if (node.refs.toggleNode) {\n        this.addEventListener(node.refs.toggleNode, 'click', function () {\n          _this4.toggleNode(node);\n        });\n      }\n    }\n  }, {\n    key: \"attachComponents\",\n    value: function attachComponents(node) {\n      if (this.builderMode) {\n        var _get2;\n\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        return (_get2 = _get(_getPrototypeOf(TreeComponent.prototype), \"attachComponents\", this)).call.apply(_get2, [this, node].concat(args));\n      }\n\n      this.loadRefs.call(node, node.refs.content, {\n        nodeEdit: 'single'\n      });\n      return node.refs.nodeEdit ? _get(_getPrototypeOf(TreeComponent.prototype), \"attachComponents\", this).call(this, node.refs.nodeEdit, node.components) : _nativePromiseOnly.default.resolve();\n    }\n  }, {\n    key: \"attachChildren\",\n    value: function attachChildren(node) {\n      var _this5 = this;\n\n      var childElements = node.refs.childNodes.children;\n      return _nativePromiseOnly.default.all(_lodash.default.map(childElements, function (childElement, index) {\n        return _this5.attachNode(childElement, node.children[index]);\n      }));\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var changed = this.updateValue(value, flags);\n      this.setRoot();\n      return changed;\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild(parent) {\n      var _this6 = this;\n\n      if (this.options.readOnly || parent.new) {\n        return;\n      }\n\n      this.hook('tree.addChild', {\n        parent: parent,\n        component: this\n      }, function () {\n        var child = parent.addChild();\n\n        _this6.redraw();\n\n        return child;\n      });\n    }\n  }, {\n    key: \"cancelNode\",\n    value: function cancelNode(node) {\n      var _this7 = this;\n\n      if (this.options.readOnly) {\n        return;\n      }\n\n      this.hook('tree.cancelNode', {\n        node: node,\n        component: this\n      }, function () {\n        if (node.isRoot) {\n          if (node.persistentData && !_lodash.default.isEmpty(node.persistentData)) {\n            node.cancel();\n\n            _this7.redraw();\n          } else {\n            _this7.removeRoot();\n          }\n        } else {\n          node.cancel();\n\n          _this7.redraw();\n        }\n\n        return node;\n      });\n    }\n  }, {\n    key: \"editNode\",\n    value: function editNode(node) {\n      var _this8 = this;\n\n      if (this.options.readOnly || node.new) {\n        return;\n      }\n\n      this.hook('tree.editNode', {\n        node: node,\n        component: this\n      }, function () {\n        node.edit();\n\n        _this8.redraw();\n\n        return node;\n      });\n    }\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(node) {\n      var _this9 = this;\n\n      if (this.options.readOnly || node.new) {\n        return;\n      }\n\n      this.hook('tree.removeNode', {\n        node: node,\n        component: this\n      }, function () {\n        if (node.isRoot) {\n          _this9.removeRoot();\n        } else {\n          node.remove();\n\n          _this9.updateTree();\n        }\n\n        return node;\n      });\n    }\n  }, {\n    key: \"revertNode\",\n    value: function revertNode(node) {\n      var _this10 = this;\n\n      if (this.options.readOnly || !node.revertAvailable) {\n        return;\n      }\n\n      this.hook('tree.revertNode', {\n        node: node,\n        component: this\n      }, function () {\n        node.revert();\n\n        _this10.updateTree();\n\n        return node;\n      });\n    }\n  }, {\n    key: \"saveNode\",\n    value: function saveNode(node) {\n      var _this11 = this;\n\n      if (this.options.readOnly) {\n        return;\n      }\n\n      this.hook('tree.saveNode', {\n        node: node,\n        component: this\n      }, function () {\n        var isSaved = node.save();\n\n        if (isSaved) {\n          _this11.updateTree();\n        }\n\n        return node;\n      });\n    }\n  }, {\n    key: \"toggleNode\",\n    value: function toggleNode(node) {\n      var _this12 = this;\n\n      this.hook('tree.toggleNode', {\n        node: node,\n        component: this\n      }, function () {\n        node.collapsed = !node.collapsed;\n\n        _this12.redraw();\n\n        return node;\n      });\n    }\n  }, {\n    key: \"removeRoot\",\n    value: function removeRoot() {\n      if (this.options.readOnly) {\n        return;\n      }\n\n      this.dataValue = this.defaultValue;\n      this.setRoot();\n      this.redraw();\n    }\n  }, {\n    key: \"setRoot\",\n    value: function setRoot() {\n      var value = this.getValue();\n      this.treeRoot = new _Node.default(null, value, {\n        isNew: this.builderMode ? true : !value.data,\n        createComponents: this.createComponents.bind(this),\n        checkNode: this.checkNode.bind(this, this.data),\n        removeComponents: this.removeComponents,\n        parentPath: this.isDefaultValueComponent ? this.path || this.component.key : null\n      });\n      this.hook('tree.setRoot', {\n        root: this.treeRoot,\n        component: this\n      });\n      this.redraw();\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.dataValue || {};\n    }\n  }, {\n    key: \"updateTree\",\n    value: function updateTree() {\n      this.updateValue(this.treeRoot.value);\n      this.redraw();\n    }\n  }, {\n    key: \"checkData\",\n    value: function checkData(data, flags, row) {\n      return this.checkNode(data, this.treeRoot, flags, row);\n    }\n  }, {\n    key: \"checkNode\",\n    value: function checkNode(data, node, flags, row) {\n      var _this13 = this;\n\n      return node.children.reduce(function (result, child) {\n        return _this13.checkNode(data, child, flags, row) && result;\n      }, _get(_getPrototypeOf(TreeComponent.prototype), \"checkData\", this).call(this, data, flags, node.data, node.components) && !node.editing && !node.new);\n    }\n  }, {\n    key: \"getComponents\",\n    value: function getComponents() {\n      return this.treeRoot && (this.isDefaultValueComponent || !this.isDefaultValueComponent && !this.builderMode) ? this.treeRoot.getComponents() : _get(_getPrototypeOf(TreeComponent.prototype), \"getComponents\", this).call(this);\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len3 = arguments.length, extend = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        extend[_key3] = arguments[_key3];\n      }\n\n      return _NestedDataComponent2.default.schema.apply(_NestedDataComponent2.default, [{\n        label: 'Tree',\n        key: 'tree',\n        type: 'tree',\n        clearOnHide: true,\n        input: true,\n        tree: true,\n        components: [],\n        multiple: false\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Tree',\n        icon: 'indent',\n        group: 'data',\n        weight: 40,\n        schema: TreeComponent.schema()\n      };\n    }\n  }]);\n\n  return TreeComponent;\n}(_NestedDataComponent2.default);\n\nexports.default = TreeComponent;\nTreeComponent.prototype.hasChanged = _Component.default.prototype.hasChanged;","map":null,"metadata":{},"sourceType":"script"}