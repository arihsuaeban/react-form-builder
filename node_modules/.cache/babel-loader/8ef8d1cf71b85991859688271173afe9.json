{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nvar Node = /*#__PURE__*/function () {\n  function Node(parent) {\n    var _this = this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$data = _ref.data,\n        data = _ref$data === void 0 ? {} : _ref$data,\n        _ref$children = _ref.children,\n        children = _ref$children === void 0 ? [] : _ref$children;\n\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        checkNode = _ref2.checkNode,\n        createComponents = _ref2.createComponents,\n        _ref2$isNew = _ref2.isNew,\n        isNew = _ref2$isNew === void 0 ? true : _ref2$isNew,\n        removeComponents = _ref2.removeComponents,\n        _ref2$parentPath = _ref2.parentPath,\n        parentPath = _ref2$parentPath === void 0 ? '' : _ref2$parentPath;\n\n    _classCallCheck(this, Node);\n\n    this.parent = parent;\n    this.previousData = {};\n    this.persistentData = _lodash.default.cloneDeep(data);\n    this.new = isNew;\n    this.createComponents = createComponents;\n    this.checkNode = checkNode;\n    this.removeComponents = removeComponents;\n    this.revertAvailable = false;\n    this.editing = false;\n    this.collapsed = false;\n    this.components = [];\n    this.children = [];\n    this.parentPath = parentPath;\n    this.resetData();\n    this.children = children.map(function (child, index) {\n      return new Node(_this, child, {\n        checkNode: checkNode,\n        createComponents: createComponents,\n        isNew: false,\n        removeComponents: removeComponents,\n        parentPath: _this.getChildrenPath(index)\n      });\n    });\n  }\n\n  _createClass(Node, [{\n    key: \"value\",\n    get: function get() {\n      return this.new ? null // Check the special case for empty root node.\n      : {\n        data: _lodash.default.cloneDeep(this.persistentData),\n        children: this.children.filter(function (child) {\n          return !child.new;\n        }).map(function (child) {\n          return child.value;\n        })\n      };\n    }\n  }, {\n    key: \"isRoot\",\n    get: function get() {\n      return this.parent === null;\n    }\n  }, {\n    key: \"changing\",\n    get: function get() {\n      return this.new || this.editing;\n    }\n  }, {\n    key: \"hasChangingChildren\",\n    get: function get() {\n      return this.changin || this.children.some(function (child) {\n        return child.hasChangingChildren;\n      });\n    }\n  }, {\n    key: \"hasData\",\n    get: function get() {\n      return !_lodash.default.isEmpty(this.persistentData);\n    }\n  }, {\n    key: \"hasChildren\",\n    get: function get() {\n      return Array.isArray(this.children) && this.children.length > 0;\n    }\n  }, {\n    key: \"getChildrenPath\",\n    value: function getChildrenPath(index) {\n      return this.parentPath ? \"\".concat(this.parentPath, \".children[\").concat(index, \"]\") : '';\n    }\n  }, {\n    key: \"eachChild\",\n    value: function eachChild(iteratee) {\n      iteratee(this);\n      this.children.forEach(function (child) {\n        return child.eachChild(iteratee);\n      });\n      return this;\n    }\n  }, {\n    key: \"getComponents\",\n    value: function getComponents() {\n      return this.children.reduce(function (components, child) {\n        return components.concat(child.getComponents());\n      }, this.components);\n    }\n  }, {\n    key: \"validateNode\",\n    value: function validateNode() {\n      var _this2 = this;\n\n      var valid = true;\n      this.getComponents().forEach(function (comp) {\n        comp.setPristine(false);\n        valid &= comp.checkValidity(null, false, _this2.persistentData);\n      });\n      return valid;\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild() {\n      if (this.new) {\n        return null;\n      }\n\n      var child = new Node(this, {}, {\n        checkNode: this.checkNode,\n        createComponents: this.createComponents,\n        isNew: true,\n        removeComponents: this.removeComponents,\n        parentPath: this.getChildrenPath(this.children.length)\n      });\n      this.children = this.children.concat(child);\n      return child;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(childToRemove) {\n      if (!this.new) {\n        this.children = this.children.filter(function (child) {\n          return child !== childToRemove;\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"edit\",\n    value: function edit() {\n      if (this.new) {\n        return this;\n      }\n\n      this.editing = true;\n      return this.resetData();\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      var isValid = this.validateNode();\n\n      if (this.changing && isValid) {\n        if (this.new) {\n          this.new = false;\n        } else {\n          this.editing = false;\n          this.revertAvailable = true;\n        }\n\n        this.commitData();\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.new) {\n        this.remove();\n      } else if (this.editing) {\n        this.editing = false;\n        this.resetData();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.parent.removeChild(this);\n      this.parent = null;\n      this.clearComponents();\n      return this;\n    }\n  }, {\n    key: \"revert\",\n    value: function revert() {\n      if (!this.revertAvailable) {\n        return this;\n      }\n\n      this.data = this.previousData;\n      return this.commitData();\n    }\n  }, {\n    key: \"commitData\",\n    value: function commitData() {\n      this.previousData = this.persistentData;\n      this.persistentData = _lodash.default.cloneDeep(this.data);\n      this.clearComponents();\n      return this;\n    }\n  }, {\n    key: \"resetData\",\n    value: function resetData() {\n      this.data = _lodash.default.cloneDeep(this.persistentData);\n      this.updateComponentsContext();\n      return this;\n    }\n  }, {\n    key: \"updateComponentsContext\",\n    value: function updateComponentsContext() {\n      if (this.changing) {\n        this.instantiateComponents();\n      } else {\n        this.clearComponents();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"instantiateComponents\",\n    value: function instantiateComponents() {\n      var _this3 = this;\n\n      this.components = this.createComponents(this.data, this);\n      this.components.forEach(function (component) {\n        if (_this3.parentPath) {\n          var path = _this3.calculateComponentPath(component);\n\n          component.path = path;\n        }\n      });\n      this.checkNode(this);\n    }\n  }, {\n    key: \"clearComponents\",\n    value: function clearComponents() {\n      this.removeComponents(this.components);\n      this.components = [];\n    }\n    /**\n     * Return a path of component's value.\n     *\n     * @param {Object} component - The component instance.\n     * @return {string} - The component's value path.\n     */\n\n  }, {\n    key: \"calculateComponentPath\",\n    value: function calculateComponentPath(component) {\n      var path = '';\n\n      if (component.component.key) {\n        path = \"\".concat(this.parentPath, \".data.\").concat(component.component.key);\n      }\n\n      return path;\n    }\n  }]);\n\n  return Node;\n}();\n\nexports.default = Node;","map":null,"metadata":{},"sourceType":"script"}