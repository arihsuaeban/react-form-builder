{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deleteSubmission = exports.saveSubmission = exports.getSubmission = exports.resetSubmission = exports.clearSubmissionError = undefined;\n\nvar _Formio = require('formiojs/Formio');\n\nvar _Formio2 = _interopRequireDefault(_Formio);\n\nvar _constants = require('./constants');\n\nvar types = _interopRequireWildcard(_constants);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar clearSubmissionError = exports.clearSubmissionError = function clearSubmissionError(name) {\n  return {\n    type: types.SUBMISSION_CLEAR_ERROR,\n    name: name\n  };\n};\n\nvar requestSubmission = function requestSubmission(name, id, formId, url) {\n  return {\n    type: types.SUBMISSION_REQUEST,\n    name: name,\n    id: id,\n    formId: formId,\n    url: url\n  };\n};\n\nvar sendSubmission = function sendSubmission(name, data) {\n  return {\n    type: types.SUBMISSION_SAVE,\n    name: name\n  };\n};\n\nvar receiveSubmission = function receiveSubmission(name, submission, url) {\n  return {\n    type: types.SUBMISSION_SUCCESS,\n    name: name,\n    submission: submission,\n    url: url\n  };\n};\n\nvar failSubmission = function failSubmission(name, error) {\n  return {\n    type: types.SUBMISSION_FAILURE,\n    name: name,\n    error: error\n  };\n};\n\nvar resetSubmission = exports.resetSubmission = function resetSubmission(name) {\n  return {\n    type: types.SUBMISSION_RESET,\n    name: name\n  };\n};\n\nvar getSubmission = exports.getSubmission = function getSubmission(name, id, formId) {\n  var done = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n  return function (dispatch, getState) {\n    // Check to see if the submission is already loaded.\n    if (getState().id === id) {\n      return;\n    }\n\n    var url = _Formio2.default.getProjectUrl() + '/' + (formId ? 'form/' + formId : name) + '/submission/' + id;\n    var formio = new _Formio2.default(url);\n    dispatch(requestSubmission(name, id, formId, url));\n    formio.loadSubmission().then(function (result) {\n      dispatch(receiveSubmission(name, result));\n      done(null, result);\n    }).catch(function (error) {\n      dispatch(failSubmission(name, error));\n      done(error);\n    });\n  };\n};\n\nvar saveSubmission = exports.saveSubmission = function saveSubmission(name, data, formId) {\n  var done = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n  return function (dispatch) {\n    dispatch(sendSubmission(name, data));\n    var id = data._id;\n    var formio = new _Formio2.default(_Formio2.default.getProjectUrl() + '/' + (formId ? 'form/' + formId : name) + '/submission' + (id ? '/' + id : ''));\n    formio.saveSubmission(data).then(function (result) {\n      var url = _Formio2.default.getProjectUrl() + '/' + (formId ? 'form/' + formId : name) + '/submission/' + result._id;\n\n      dispatch(receiveSubmission(name, result, url));\n      done(null, result);\n    }).catch(function (error) {\n      dispatch(failSubmission(name, error));\n      done(error);\n    });\n  };\n};\n\nvar deleteSubmission = exports.deleteSubmission = function deleteSubmission(name, id, formId) {\n  var done = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};\n  return function (dispatch, getState) {\n    var formio = new _Formio2.default(_Formio2.default.getProjectUrl() + '/' + (formId ? 'form/' + formId : name) + '/submission/' + id);\n    return formio.deleteSubmission().then(function () {\n      dispatch(resetSubmission(name));\n      done(null, true);\n    }).catch(function (error) {\n      dispatch(failSubmission(name, error));\n      done(error);\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}