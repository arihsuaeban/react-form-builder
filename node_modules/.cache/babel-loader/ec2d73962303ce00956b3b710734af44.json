{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.promise\");\n\nrequire(\"core-js/modules/es.promise.finally\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFormioUploadAdapterPlugin = void 0;\n\nvar _utils = require(\"../../utils/utils\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n/**\n * UploadAdapter for CKEditor https://ckeditor.com/docs/ckeditor5/latest/framework/guides/deep-dive/upload-adapter.html\n */\n\n\nvar FormioUploadAdapter = /*#__PURE__*/function () {\n  function FormioUploadAdapter(loader, fileService, component) {\n    _classCallCheck(this, FormioUploadAdapter);\n\n    this.loader = loader;\n    this.fileService = fileService;\n    this.component = component;\n  }\n\n  _createClass(FormioUploadAdapter, [{\n    key: \"upload\",\n    value: function upload() {\n      var _this = this;\n\n      return this.loader.file.then(function (file) {\n        return new _nativePromiseOnly.default(function (resolve, reject) {\n          var _this$fileService;\n\n          var _this$component$compo = _this.component.component,\n              uploadStorage = _this$component$compo.uploadStorage,\n              uploadUrl = _this$component$compo.uploadUrl,\n              uploadOptions = _this$component$compo.uploadOptions,\n              uploadDir = _this$component$compo.uploadDir,\n              fileKey = _this$component$compo.fileKey;\n          var uploadParams = [uploadStorage, file, (0, _utils.uniqueName)(file.name), uploadDir || '', //should pass empty string if undefined\n          function (evt) {\n            return _this.onUploadProgress(evt);\n          }, uploadUrl, uploadOptions, fileKey, null, null];\n\n          var uploadPromise = (_this$fileService = _this.fileService).uploadFile.apply(_this$fileService, uploadParams.concat([function () {\n            return _this.component.emit('fileUploadingStart', uploadPromise);\n          }])).then(function (result) {\n            return _this.fileService.downloadFile(result);\n          }).then(function (result) {\n            return resolve({\n              default: result.url\n            });\n          }).catch(function (err) {\n            console.warn('An Error occured while uploading file', err);\n            reject(err);\n          }).finally(function () {\n            _this.component.emit('fileUploadingEnd', uploadPromise);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {}\n  }, {\n    key: \"onUploadProgress\",\n    value: function onUploadProgress(evt) {\n      if (evt.lengthComputable) {\n        this.loader.uploadTotal = evt.total;\n        this.loader.uploaded = evt.loaded;\n      }\n    }\n  }]);\n\n  return FormioUploadAdapter;\n}();\n\nvar getFormioUploadAdapterPlugin = function getFormioUploadAdapterPlugin(fileService, component) {\n  return function (editor) {\n    editor.plugins.get('FileRepository').createUploadAdapter = function (loader) {\n      return new FormioUploadAdapter(loader, fileService, component);\n    };\n  };\n};\n\nexports.getFormioUploadAdapterPlugin = getFormioUploadAdapterPlugin;","map":null,"metadata":{},"sourceType":"script"}