{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.find\");\n\nrequire(\"core-js/modules/es.array.find-index\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.array.splice\");\n\nrequire(\"core-js/modules/es.object.entries\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.object.values\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.reflect.set\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _NestedArrayComponent2 = _interopRequireDefault(require(\"../_classes/nestedarray/NestedArrayComponent\"));\n\nvar _utils = require(\"../../utils/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction set(target, property, value, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.set) {\n    set = Reflect.set;\n  } else {\n    set = function set(target, property, value, receiver) {\n      var base = _superPropBase(target, property);\n\n      var desc;\n\n      if (base) {\n        desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.set) {\n          desc.set.call(receiver, value);\n          return true;\n        } else if (!desc.writable) {\n          return false;\n        }\n      }\n\n      desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n      if (desc) {\n        if (!desc.writable) {\n          return false;\n        }\n\n        desc.value = value;\n        Object.defineProperty(receiver, property, desc);\n      } else {\n        _defineProperty(receiver, property, value);\n      }\n\n      return true;\n    };\n  }\n\n  return set(target, property, value, receiver);\n}\n\nfunction _set(target, property, value, receiver, isStrict) {\n  var s = set(target, property, value, receiver || target);\n\n  if (!s && isStrict) {\n    throw new Error('failed to set property');\n  }\n\n  return value;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar dragula;\n\nif (typeof window !== 'undefined') {\n  // Import from \"dist\" because it would require and \"global\" would not be defined in Angular apps.\n  dragula = require('dragula/dist/dragula');\n}\n\nvar DataGridComponent = /*#__PURE__*/function (_NestedArrayComponent) {\n  _inherits(DataGridComponent, _NestedArrayComponent);\n\n  var _super = _createSuper(DataGridComponent);\n\n  function DataGridComponent() {\n    var _this;\n\n    _classCallCheck(this, DataGridComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.type = 'datagrid';\n    _this.tabIndex = 0;\n    return _this;\n  }\n\n  _createClass(DataGridComponent, [{\n    key: \"init\",\n    value: function init() {\n      this.components = this.components || []; // Add new values based on minLength.\n\n      this.rows = [];\n      this.columns = _toConsumableArray(this.component.components);\n\n      if (this.initRows || !_lodash.default.isEqual(this.dataValue, this.emptyValue)) {\n        this.createRows(true);\n      }\n\n      this.visibleColumns = {};\n      this.prevHasAddButton = this.hasAddButton();\n      this.checkColumns();\n    }\n  }, {\n    key: \"dataValue\",\n    get: function get() {\n      var dataValue = _get(_getPrototypeOf(DataGridComponent.prototype), \"dataValue\", this);\n\n      if (!dataValue || !Array.isArray(dataValue)) {\n        return this.emptyValue;\n      }\n\n      return dataValue;\n    },\n    set: function set(value) {\n      _set(_getPrototypeOf(DataGridComponent.prototype), \"dataValue\", value, this, true);\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return DataGridComponent.schema();\n    }\n  }, {\n    key: \"initEmpty\",\n    get: function get() {\n      return this.component.initEmpty || this.component.noFirstRow;\n    }\n  }, {\n    key: \"initRows\",\n    get: function get() {\n      return this.builderMode || this.path === 'defaultValue' || !this.initEmpty;\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return this.initEmpty ? [] : [{}];\n    }\n  }, {\n    key: \"addAnotherPosition\",\n    get: function get() {\n      return _lodash.default.get(this.component, 'addAnotherPosition', 'bottom');\n    }\n  }, {\n    key: \"minLength\",\n    get: function get() {\n      if (this.hasRowGroups()) {\n        return _lodash.default.sum(this.getGroupSizes());\n      } else {\n        return _lodash.default.get(this.component, 'validate.minLength', 0);\n      }\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      var isBuilderMode = this.builderMode;\n      var isEmptyInit = this.initEmpty; // Ensure we have one and only one row in builder mode.\n\n      if (isBuilderMode || isEmptyInit && !this.dataValue.length) {\n        return isEmptyInit && !isBuilderMode ? [] : [{}];\n      }\n\n      var value = _get(_getPrototypeOf(DataGridComponent.prototype), \"defaultValue\", this);\n\n      var defaultValue;\n\n      if (Array.isArray(value)) {\n        defaultValue = value;\n      } else if (value && _typeof(value) === 'object') {\n        defaultValue = [value];\n      } else {\n        defaultValue = this.emptyValue;\n      }\n\n      for (var dIndex = defaultValue.length; dIndex < this.minLength; dIndex++) {\n        defaultValue.push({});\n      }\n\n      return defaultValue;\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return _get(_getPrototypeOf(DataGridComponent.prototype), \"disabled\", this);\n    },\n    set: function set(disabled) {\n      _set(_getPrototypeOf(DataGridComponent.prototype), \"disabled\", disabled, this, true);\n\n      _lodash.default.each(this.refs[\"\".concat(this.datagridKey, \"-addRow\")], function (button) {\n        button.disabled = disabled;\n      });\n\n      _lodash.default.each(this.refs[\"\".concat(this.datagridKey, \"-removeRow\")], function (button) {\n        button.disabled = disabled;\n      });\n    }\n  }, {\n    key: \"datagridKey\",\n    get: function get() {\n      return \"datagrid-\".concat(this.key);\n    }\n  }, {\n    key: \"allowReorder\",\n    get: function get() {\n      return !this.options.readOnly && _lodash.default.get(this.component, 'reorder', false);\n    }\n  }, {\n    key: \"iteratableRows\",\n    get: function get() {\n      var _this2 = this;\n\n      return this.rows.map(function (row, index) {\n        return {\n          components: row,\n          data: _this2.dataValue[index]\n        };\n      });\n    }\n    /**\n     * Split rows into chunks.\n     * @param {Number[]} groups - array of numbers where each item is size of group\n     * @param {Array<T>} rows - rows collection\n     * @return {Array<T[]>}\n     */\n\n  }, {\n    key: \"getRowChunks\",\n    value: function getRowChunks(groups, rows) {\n      var _groups$reduce = groups.reduce(function (_ref, size) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            startIndex = _ref2[0],\n            acc = _ref2[1];\n\n        var endIndex = startIndex + size;\n        return [endIndex, [].concat(_toConsumableArray(acc), [[startIndex, endIndex]])];\n      }, [0, []]),\n          _groups$reduce2 = _slicedToArray(_groups$reduce, 2),\n          chunks = _groups$reduce2[1];\n\n      return chunks.map(function (range) {\n        return _lodash.default.slice.apply(_lodash.default, [rows].concat(_toConsumableArray(range)));\n      });\n    }\n    /**\n     * Create groups object.\n     * Each key in object represents index of first row in group.\n     * @return {Object}\n     */\n\n  }, {\n    key: \"getGroups\",\n    value: function getGroups() {\n      var groups = _lodash.default.get(this.component, 'rowGroups', []);\n\n      var sizes = _lodash.default.map(groups, 'numberOfRows').slice(0, -1);\n\n      var indexes = sizes.reduce(function (groupIndexes, size) {\n        var last = groupIndexes[groupIndexes.length - 1];\n        return groupIndexes.concat(last + size);\n      }, [0]);\n      return groups.reduce(function (gidxs, group, idx) {\n        return _objectSpread(_objectSpread({}, gidxs), {}, _defineProperty({}, indexes[idx], group));\n      }, {});\n    }\n    /**\n     * Retrun group sizes.\n     * @return {Number[]}\n     */\n\n  }, {\n    key: \"getGroupSizes\",\n    value: function getGroupSizes() {\n      return _lodash.default.map(_lodash.default.get(this.component, 'rowGroups', []), 'numberOfRows');\n    }\n  }, {\n    key: \"hasRowGroups\",\n    value: function hasRowGroups() {\n      return _lodash.default.get(this, 'component.enableRowGroups', false) && !this.builderMode;\n    }\n  }, {\n    key: \"totalRowsNumber\",\n    value: function totalRowsNumber(groups) {\n      return _lodash.default.sum(_lodash.default.map(groups, 'numberOfRows'));\n    }\n  }, {\n    key: \"setStaticValue\",\n    value: function setStaticValue(n) {\n      this.dataValue = _lodash.default.range(n).map(function () {\n        return {};\n      });\n    }\n  }, {\n    key: \"hasExtraColumn\",\n    value: function hasExtraColumn() {\n      return this.hasRemoveButtons() || this.canAddColumn;\n    }\n  }, {\n    key: \"hasRemoveButtons\",\n    value: function hasRemoveButtons() {\n      return !this.builderMode && !this.component.disableAddingRemovingRows && !this.options.readOnly && !this.disabled && this.fullMode && this.dataValue.length > _lodash.default.get(this.component, 'validate.minLength', 0);\n    }\n  }, {\n    key: \"hasTopSubmit\",\n    value: function hasTopSubmit() {\n      return this.hasAddButton() && ['top', 'both'].includes(this.addAnotherPosition);\n    }\n  }, {\n    key: \"hasBottomSubmit\",\n    value: function hasBottomSubmit() {\n      return this.hasAddButton() && ['bottom', 'both'].includes(this.addAnotherPosition);\n    }\n  }, {\n    key: \"canAddColumn\",\n    get: function get() {\n      return this.builderMode;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var columns = this.getColumns();\n      var columnExtra = 0;\n      var hasRemoveButtons = this.hasRemoveButtons();\n\n      if (this.component.reorder) {\n        columnExtra++;\n      }\n\n      if (hasRemoveButtons) {\n        columnExtra++;\n      }\n\n      if (this.canAddColumn) {\n        columnExtra++;\n      }\n\n      var colWidth = Math.floor(12 / (columns.length + columnExtra));\n      return _get(_getPrototypeOf(DataGridComponent.prototype), \"render\", this).call(this, this.renderTemplate('datagrid', {\n        rows: this.getRows(),\n        columns: columns,\n        groups: this.hasRowGroups() ? this.getGroups() : [],\n        visibleColumns: this.visibleColumns,\n        hasToggle: _lodash.default.get(this, 'component.groupToggle', false),\n        hasHeader: this.hasHeader(),\n        hasExtraColumn: this.hasExtraColumn(),\n        hasAddButton: this.hasAddButton(),\n        hasRemoveButtons: hasRemoveButtons,\n        hasTopSubmit: this.hasTopSubmit(),\n        hasBottomSubmit: this.hasBottomSubmit(),\n        hasGroups: this.hasRowGroups(),\n        numColumns: columns.length + (this.hasExtraColumn() ? 1 : 0),\n        datagridKey: this.datagridKey,\n        allowReorder: this.allowReorder,\n        builder: this.builderMode,\n        canAddColumn: this.canAddColumn,\n        tabIndex: this.tabIndex,\n        placeholder: this.renderTemplate('builderPlaceholder', {\n          position: this.componentComponents.length\n        }),\n        colWidth: colWidth.toString()\n      }));\n    }\n  }, {\n    key: \"getRows\",\n    value: function getRows() {\n      return this.rows.map(function (row) {\n        var components = {};\n\n        _lodash.default.each(row, function (col, key) {\n          components[key] = col.render();\n        });\n\n        return components;\n      });\n    }\n  }, {\n    key: \"getColumns\",\n    value: function getColumns() {\n      var _this3 = this;\n\n      return this.columns.filter(function (comp) {\n        return !_this3.visibleColumns.hasOwnProperty(comp.key) || _this3.visibleColumns[comp.key];\n      });\n    }\n  }, {\n    key: \"hasHeader\",\n    value: function hasHeader() {\n      return this.component.components.reduce(function (hasHeader, col) {\n        // If any of the components has a title and it isn't hidden, display the header.\n        return hasHeader || (col.label || col.title) && !col.hideLabel;\n      }, false);\n    }\n  }, {\n    key: \"loadRefs\",\n    value: function loadRefs(element, refs) {\n      _get(_getPrototypeOf(DataGridComponent.prototype), \"loadRefs\", this).call(this, element, refs);\n\n      if (refs['messageContainer'] === 'single') {\n        var container = _lodash.default.last(element.querySelectorAll('[ref=messageContainer]'));\n\n        this.refs['messageContainer'] = container || this.refs['messageContainer'];\n      }\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this$loadRefs,\n          _this4 = this;\n\n      this.loadRefs(element, (_this$loadRefs = {}, _defineProperty(_this$loadRefs, \"\".concat(this.datagridKey, \"-row\"), 'multiple'), _defineProperty(_this$loadRefs, \"\".concat(this.datagridKey, \"-tbody\"), 'single'), _defineProperty(_this$loadRefs, \"\".concat(this.datagridKey, \"-addRow\"), 'multiple'), _defineProperty(_this$loadRefs, \"\".concat(this.datagridKey, \"-removeRow\"), 'multiple'), _defineProperty(_this$loadRefs, \"\".concat(this.datagridKey, \"-group-header\"), 'multiple'), _defineProperty(_this$loadRefs, this.datagridKey, 'multiple'), _defineProperty(_this$loadRefs, 'messageContainer', 'single'), _this$loadRefs));\n\n      if (this.allowReorder) {\n        this.refs[\"\".concat(this.datagridKey, \"-row\")].forEach(function (row, index) {\n          row.dragInfo = {\n            index: index\n          };\n        });\n\n        if (dragula) {\n          this.dragula = dragula([this.refs[\"\".concat(this.datagridKey, \"-tbody\")]], {\n            moves: function moves(_draggedElement, _oldParent, clickedElement) {\n              var clickedElementKey = clickedElement.getAttribute('data-key');\n\n              var oldParentKey = _oldParent.getAttribute('data-key'); //Check if the clicked button belongs to that container, if false, it belongs to the nested container\n\n\n              if (oldParentKey === clickedElementKey) {\n                return clickedElement.classList.contains('formio-drag-button');\n              }\n            }\n          }).on('drop', this.onReorder.bind(this));\n          this.dragula.on('cloned', function (el, original) {\n            if (el && el.children && original && original.children) {\n              original.children.forEach(function (child, index) {\n                var styles = getComputedStyle(child, null);\n\n                if (styles.cssText !== '') {\n                  el.children[index].style.cssText = styles.cssText;\n                } else {\n                  var cssText = Object.values(styles).reduce(function (css, propertyName) {\n                    return \"\".concat(css).concat(propertyName, \":\").concat(styles.getPropertyValue(propertyName), \";\");\n                  }, '');\n                  el.children[index].style.cssText = cssText;\n                }\n              });\n            }\n          });\n        }\n      }\n\n      this.refs[\"\".concat(this.datagridKey, \"-addRow\")].forEach(function (addButton) {\n        _this4.addEventListener(addButton, 'click', _this4.addRow.bind(_this4));\n      });\n      this.refs[\"\".concat(this.datagridKey, \"-removeRow\")].forEach(function (removeButton, index) {\n        _this4.addEventListener(removeButton, 'click', _this4.removeRow.bind(_this4, index));\n      });\n\n      if (this.hasRowGroups()) {\n        this.refs.chunks = this.getRowChunks(this.getGroupSizes(), this.refs[\"\".concat(this.datagridKey, \"-row\")]);\n        this.refs[\"\".concat(this.datagridKey, \"-group-header\")].forEach(function (header, index) {\n          _this4.addEventListener(header, 'click', function () {\n            return _this4.toggleGroup(header, index);\n          });\n        });\n      }\n\n      var columns = this.getColumns();\n      var rowLength = columns.length;\n      this.rows.forEach(function (row, rowIndex) {\n        var columnIndex = 0;\n        columns.forEach(function (col) {\n          _this4.attachComponents(_this4.refs[_this4.datagridKey][rowIndex * rowLength + columnIndex], [_this4.rows[rowIndex][col.key]], _this4.getComponentsContainer());\n\n          columnIndex++;\n        });\n      });\n      return _get(_getPrototypeOf(DataGridComponent.prototype), \"attach\", this).call(this, element);\n    }\n  }, {\n    key: \"getComponentsContainer\",\n    value: function getComponentsContainer() {\n      return this.component.components;\n    }\n  }, {\n    key: \"onReorder\",\n    value: function onReorder(element, _target, _source, sibling) {\n      if (!element.dragInfo || sibling && !sibling.dragInfo) {\n        console.warn('There is no Drag Info available for either dragged or sibling element');\n        return;\n      }\n\n      var oldPosition = element.dragInfo.index; //should drop at next sibling position; no next sibling means drop to last position\n\n      var newPosition = sibling ? sibling.dragInfo.index : this.dataValue.length;\n      var movedBelow = newPosition > oldPosition;\n      var dataValue = (0, _utils.fastCloneDeep)(this.dataValue);\n      var draggedRowData = dataValue[oldPosition]; //insert element at new position\n\n      dataValue.splice(newPosition, 0, draggedRowData); //remove element from old position (if was moved above, after insertion it's at +1 index)\n\n      dataValue.splice(movedBelow ? oldPosition : oldPosition + 1, 1); //need to re-build rows to re-calculate indexes and other indexed fields for component instance (like rows for ex.)\n\n      this.setValue(dataValue, {\n        isReordered: true\n      });\n      this.rebuild();\n    }\n  }, {\n    key: \"focusOnNewRowElement\",\n    value: function focusOnNewRowElement(row) {\n      Object.keys(row).find(function (key) {\n        var focusableElements = (0, _utils.getFocusableElements)(row[key].element);\n\n        if (focusableElements && focusableElements[0]) {\n          focusableElements[0].focus();\n          return true;\n        }\n\n        return false;\n      });\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow() {\n      var _this5 = this;\n\n      var index = this.rows.length; // Handle length mismatch between rows and dataValue\n\n      if (this.dataValue.length === index) {\n        this.dataValue.push({});\n      }\n\n      var row;\n      var dataValue = this.dataValue;\n      var defaultValue = this.defaultValue;\n\n      if (this.initEmpty && defaultValue[index]) {\n        row = defaultValue[index];\n        dataValue[index] = row;\n      } else {\n        row = dataValue[index];\n      }\n\n      this.rows[index] = this.createRowComponents(row, index);\n      this.emit('dataGridAddRow', {\n        component: this.component,\n        row: row\n      });\n      this.checkConditions();\n      this.triggerChange();\n      this.redraw().then(function () {\n        _this5.focusOnNewRowElement(_this5.rows[index]);\n      });\n    }\n  }, {\n    key: \"updateComponentsRowIndex\",\n    value: function updateComponentsRowIndex(components, rowIndex) {\n      var _this6 = this;\n\n      components.forEach(function (component, colIndex) {\n        var _component$options;\n\n        if ((_component$options = component.options) !== null && _component$options !== void 0 && _component$options.name) {\n          var newName = \"[\".concat(_this6.key, \"][\").concat(rowIndex, \"]\");\n          component.options.name = component.options.name.replace(\"[\".concat(_this6.key, \"][\").concat(component.rowIndex, \"]\"), newName);\n        }\n\n        component.rowIndex = rowIndex;\n        component.row = \"\".concat(rowIndex, \"-\").concat(colIndex);\n        component.path = _this6.calculateComponentPath(component);\n      });\n    }\n  }, {\n    key: \"updateRowsComponents\",\n    value: function updateRowsComponents(rowIndex) {\n      var _this7 = this;\n\n      this.rows.slice(rowIndex).forEach(function (row, index) {\n        _this7.updateComponentsRowIndex(Object.values(row), rowIndex + index);\n      });\n    }\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(index) {\n      this.splice(index, {\n        isReordered: true\n      });\n      this.emit('dataGridDeleteRow', {\n        index: index\n      });\n\n      var _this$rows$splice = this.rows.splice(index, 1),\n          _this$rows$splice2 = _slicedToArray(_this$rows$splice, 1),\n          row = _this$rows$splice2[0];\n\n      this.removeRowComponents(row);\n      this.updateRowsComponents(index);\n      this.setValue(this.dataValue, {\n        isReordered: true\n      });\n      this.redraw();\n    }\n  }, {\n    key: \"removeRowComponents\",\n    value: function removeRowComponents(row) {\n      var _this8 = this;\n\n      _lodash.default.each(row, function (component) {\n        return _this8.removeComponent(component);\n      });\n    }\n  }, {\n    key: \"getRowValues\",\n    value: function getRowValues() {\n      return this.dataValue;\n    }\n  }, {\n    key: \"setRowComponentsData\",\n    value: function setRowComponentsData(rowIndex, rowData) {\n      _lodash.default.each(this.rows[rowIndex], function (component) {\n        component.data = rowData;\n      });\n    }\n  }, {\n    key: \"createRows\",\n    value: function createRows(init, rebuild) {\n      var _this9 = this;\n\n      var added = false;\n      var rowValues = this.getRowValues(); // Create any missing rows.\n\n      rowValues.forEach(function (row, index) {\n        if (!rebuild && _this9.rows[index]) {\n          _this9.setRowComponentsData(index, row);\n        } else {\n          if (_this9.rows[index]) {\n            _this9.removeRowComponents(_this9.rows[index]);\n          }\n\n          _this9.rows[index] = _this9.createRowComponents(row, index);\n          added = true;\n        }\n      }); // Delete any extra rows.\n\n      var removedRows = this.rows.splice(rowValues.length);\n      var removed = !!removedRows.length; // Delete components of extra rows (to make sure that this.components contain only components of exisiting rows)\n\n      if (removed) {\n        removedRows.forEach(function (row) {\n          return _this9.removeRowComponents(row);\n        });\n      }\n\n      if (!init && (added || removed)) {\n        this.redraw();\n      }\n\n      return added;\n    }\n  }, {\n    key: \"createRowComponents\",\n    value: function createRowComponents(row, rowIndex) {\n      var _this10 = this;\n\n      var components = {};\n      this.tabIndex = 0;\n      this.component.components.map(function (col, colIndex) {\n        var options = _lodash.default.clone(_this10.options);\n\n        options.name += \"[\".concat(rowIndex, \"]\");\n        options.row = \"\".concat(rowIndex, \"-\").concat(colIndex);\n        var columnComponent;\n\n        if (_this10.builderMode) {\n          col.id = col.id + rowIndex;\n          columnComponent = col;\n        } else {\n          columnComponent = _objectSpread(_objectSpread({}, col), {}, {\n            id: col.id + rowIndex\n          });\n        }\n\n        var component = _this10.createComponent(columnComponent, options, row);\n\n        component.parentDisabled = !!_this10.disabled;\n        component.rowIndex = rowIndex;\n        component.inDataGrid = true;\n\n        if (columnComponent.tabindex && parseInt(columnComponent.tabindex) > _this10.tabIndex) {\n          _this10.tabIndex = parseInt(columnComponent.tabindex);\n        }\n\n        components[col.key] = component;\n      });\n      return components;\n    }\n    /**\n     * Checks the validity of this datagrid.\n     *\n     * @param data\n     * @param dirty\n     * @return {*}\n     */\n\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity(data, dirty, row, silentCheck) {\n      data = data || this.rootValue;\n      row = row || this.data;\n\n      if (!this.checkCondition(row, data)) {\n        this.setCustomValidity('');\n        return true;\n      }\n\n      if (!this.checkComponentValidity(data, dirty, row, {\n        silentCheck: silentCheck\n      })) {\n        return false;\n      }\n\n      var isValid = this.checkRows('checkValidity', data, dirty, true, silentCheck);\n      this.checkModal(isValid, dirty);\n      return isValid;\n    }\n  }, {\n    key: \"checkColumns\",\n    value: function checkColumns(data) {\n      var _this11 = this;\n\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      data = data || this.rootValue;\n      var show = false;\n\n      if (!this.rows || !this.rows.length) {\n        return {\n          rebuild: false,\n          show: false\n        };\n      }\n\n      if (this.builderMode) {\n        return {\n          rebuild: false,\n          show: true\n        };\n      }\n\n      var visibility = {};\n      var logicRebuild = false;\n      var dataValue = this.dataValue;\n      this.rows.forEach(function (row, rowIndex) {\n        _lodash.default.each(row, function (col, key) {\n          if (col && typeof col.checkConditions === 'function') {\n            var firstRowCheck = visibility[key] === undefined;\n            visibility[key] = !!visibility[key] || col.checkConditions(data, flags, dataValue[rowIndex]) && col.type !== 'hidden';\n\n            if (col.component.logic && firstRowCheck) {\n              var compIndex = _lodash.default.findIndex(_this11.columns, ['key', key]);\n\n              if (!_lodash.default.isEqual(_this11.columns[compIndex], col.component)) {\n                logicRebuild = true;\n                _this11.columns[compIndex] = col.component;\n              }\n            }\n          }\n        });\n      });\n      var rebuild = !_lodash.default.isEqual(visibility, this.visibleColumns) || logicRebuild;\n\n      _lodash.default.each(visibility, function (col) {\n        show |= col;\n      });\n\n      this.visibleColumns = visibility;\n      return {\n        rebuild: rebuild,\n        show: show\n      };\n    }\n  }, {\n    key: \"checkComponentConditions\",\n    value: function checkComponentConditions(data, flags, row) {\n      var isVisible = this.visible; // If table isn't visible, don't bother calculating columns.\n\n      if (!_get(_getPrototypeOf(DataGridComponent.prototype), \"checkComponentConditions\", this).call(this, data, flags, row)) {\n        return false;\n      }\n\n      var _this$checkColumns = this.checkColumns(data, flags),\n          rebuild = _this$checkColumns.rebuild,\n          show = _this$checkColumns.show; // Check if a rebuild is needed or the visibility changes.\n\n\n      if (rebuild || !isVisible) {\n        this.createRows(false, rebuild);\n      } // Return if this table should show.\n\n\n      return show;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var _this12 = this;\n\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!value) {\n        this.dataValue = this.defaultValue;\n        this.createRows();\n        return false;\n      }\n\n      if (!Array.isArray(value)) {\n        if (_typeof(value) === 'object') {\n          value = [value];\n        } else {\n          this.createRows();\n          value = [{}];\n        }\n      } // Make sure we always have at least one row.\n      // NOTE: Removing this will break \"Public Configurations\" in portal. ;)\n\n\n      if (value && !value.length && !this.initEmpty) {\n        value.push({});\n      }\n\n      var isSettingSubmission = flags.fromSubmission && !_lodash.default.isEqual(value, this.emptyValue);\n      var changed = this.hasChanged(value, this.dataValue);\n      this.dataValue = value;\n\n      if (this.initRows || isSettingSubmission) {\n        if (!this.createRows() && changed) {\n          this.redraw();\n        }\n      }\n\n      if (this.componentModal && isSettingSubmission) {\n        this.componentModal.setValue(value);\n      }\n\n      this.rows.forEach(function (row, rowIndex) {\n        if (value.length <= rowIndex) {\n          return;\n        }\n\n        _lodash.default.each(row, function (col) {\n          col.rowIndex = rowIndex;\n\n          _this12.setNestedValue(col, value[rowIndex], flags);\n        });\n      });\n      this.updateOnChange(flags, changed);\n      return changed;\n    }\n  }, {\n    key: \"restoreComponentsContext\",\n    value: function restoreComponentsContext() {\n      var _this13 = this;\n\n      this.rows.forEach(function (row, index) {\n        return _lodash.default.forIn(row, function (component) {\n          return component.data = _this13.dataValue[index];\n        });\n      });\n    }\n  }, {\n    key: \"getComponent\",\n    value: function getComponent(path, fn) {\n      path = Array.isArray(path) ? path : [path];\n\n      var _path = path,\n          _path2 = _toArray(_path),\n          key = _path2[0],\n          remainingPath = _path2.slice(1);\n\n      var result = [];\n\n      if (_lodash.default.isNumber(key) && remainingPath.length) {\n        var compKey = remainingPath.pop();\n        result = this.rows[key][compKey]; // If the component is inside a Layout Component, try to find it among all the row's components\n\n        if (!result) {\n          Object.entries(this.rows[key]).forEach(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n                comp = _ref4[1];\n\n            if ('getComponent' in comp) {\n              var possibleResult = comp.getComponent([compKey], fn);\n\n              if (possibleResult) {\n                result = possibleResult;\n              }\n            }\n          });\n        }\n\n        if (result && _lodash.default.isFunction(fn)) {\n          fn(result, this.getComponents());\n        }\n\n        if (remainingPath.length && 'getComponent' in result) {\n          return result.getComponent(remainingPath, fn);\n        }\n\n        return result;\n      }\n\n      if (!_lodash.default.isString(key)) {\n        return result;\n      }\n\n      this.everyComponent(function (component, components) {\n        if (component.component.key === key) {\n          var comp = component;\n\n          if (remainingPath.length > 0 && 'getComponent' in component) {\n            comp = component.getComponent(remainingPath, fn);\n          } else if (fn) {\n            fn(component, components);\n          }\n\n          result = result.concat(comp);\n        }\n      });\n      return result.length > 0 ? result : null;\n    }\n  }, {\n    key: \"toggleGroup\",\n    value: function toggleGroup(element, index) {\n      element.classList.toggle('collapsed');\n\n      _lodash.default.each(this.refs.chunks[index], function (row) {\n        row.classList.toggle('hidden');\n      });\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len2 = arguments.length, extend = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        extend[_key2] = arguments[_key2];\n      }\n\n      return _NestedArrayComponent2.default.schema.apply(_NestedArrayComponent2.default, [{\n        label: 'Data Grid',\n        key: 'dataGrid',\n        type: 'datagrid',\n        clearOnHide: true,\n        input: true,\n        tree: true,\n        components: []\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Data Grid',\n        icon: 'th',\n        group: 'data',\n        documentation: '/userguide/#datagrid',\n        weight: 30,\n        schema: DataGridComponent.schema()\n      };\n    }\n  }]);\n\n  return DataGridComponent;\n}(_NestedArrayComponent2.default);\n\nexports.default = DataGridComponent;","map":null,"metadata":{},"sourceType":"script"}