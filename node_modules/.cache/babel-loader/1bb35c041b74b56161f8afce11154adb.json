{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.find\");\n\nrequire(\"core-js/modules/es.array.find-index\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.string.includes\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.split\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Webform2 = _interopRequireDefault(require(\"./Webform\"));\n\nvar _Formio = require(\"./Formio\");\n\nvar _utils = require(\"./utils/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar Wizard = /*#__PURE__*/function (_Webform) {\n  _inherits(Wizard, _Webform);\n\n  var _super = _createSuper(Wizard);\n  /**\n   * Constructor for wizard based forms\n   * @param element Dom element to place this wizard.\n   * @param {Object} options Options object, supported options are:\n   *    - breadcrumbSettings.clickable: true (default) determines if the breadcrumb bar is clickable or not\n   *    - buttonSettings.show*(Previous, Next, Cancel): true (default) determines if the button is shown or not\n   *    - allowPrevious: false (default) determines if the breadcrumb bar is clickable or not for visited tabs\n   */\n\n\n  function Wizard() {\n    var _this;\n\n    _classCallCheck(this, Wizard);\n\n    var element, options;\n\n    if (arguments[0] instanceof HTMLElement || arguments[1]) {\n      element = arguments[0];\n      options = arguments[1] || {};\n    } else {\n      options = arguments[0] || {};\n    }\n\n    options.display = 'wizard';\n    _this = _super.call(this, element, options);\n    _this.pages = [];\n    _this.prefixComps = [];\n    _this.suffixComps = [];\n    _this.components = [];\n    _this.originalComponents = [];\n    _this.page = 0;\n    _this.currentPanel = null;\n    _this.currentPanels = null;\n    _this.currentNextPage = 0;\n    _this._seenPages = [0];\n    _this.subWizards = [];\n    _this.allPages = [];\n    _this.lastPromise = _nativePromiseOnly.default.resolve();\n    _this.enabledIndex = 0;\n    _this.editMode = false;\n    _this.originalOptions = _lodash.default.cloneDeep(_this.options);\n    return _this;\n  }\n\n  _createClass(Wizard, [{\n    key: \"isLastPage\",\n    value: function isLastPage() {\n      var next = this.getNextPage();\n\n      if (_lodash.default.isNumber(next)) {\n        return next === -1;\n      }\n\n      return _lodash.default.isNull(next);\n    }\n  }, {\n    key: \"getPages\",\n    value: function getPages() {\n      var _this2 = this;\n\n      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _args$all = args.all,\n          all = _args$all === void 0 ? false : _args$all;\n      var pages = this.hasExtraPages ? this.components : this.pages;\n      var filteredPages = pages.filter(all ? _lodash.default.identity : function (p, index) {\n        return _this2._seenPages.includes(index);\n      });\n      return filteredPages;\n    }\n  }, {\n    key: \"hasExtraPages\",\n    get: function get() {\n      return !_lodash.default.isEmpty(this.subWizards);\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return _get(_getPrototypeOf(Wizard.prototype), \"data\", this);\n    },\n    set: function set(value) {\n      var _this3 = this;\n\n      this._data = value;\n\n      _lodash.default.each(this.getPages({\n        all: true\n      }), function (component) {\n        component.data = _this3.componentContext(component);\n      });\n    }\n  }, {\n    key: \"localData\",\n    get: function get() {\n      var _this$pages$this$page, _this$pages$this$page2;\n\n      return ((_this$pages$this$page = this.pages[this.page]) === null || _this$pages$this$page === void 0 ? void 0 : (_this$pages$this$page2 = _this$pages$this$page.root) === null || _this$pages$this$page2 === void 0 ? void 0 : _this$pages$this$page2.submission.data) || this.submission.data;\n    }\n  }, {\n    key: \"checkConditions\",\n    value: function checkConditions(data, flags, row) {\n      var visible = _get(_getPrototypeOf(Wizard.prototype), \"checkConditions\", this).call(this, data, flags, row);\n\n      this.establishPages(data);\n      return visible;\n    }\n  }, {\n    key: \"getComponents\",\n    value: function getComponents() {\n      return this.submitting ? this.getPages({\n        all: this.isLastPage()\n      }) : _get(_getPrototypeOf(Wizard.prototype), \"getComponents\", this).call(this);\n    }\n  }, {\n    key: \"resetValue\",\n    value: function resetValue() {\n      this.getPages({\n        all: true\n      }).forEach(function (page) {\n        return page.resetValue();\n      });\n      this.setPristine(true);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this$pages,\n          _this4 = this; // Check for and initlize button settings object\n\n\n      this.options.buttonSettings = _lodash.default.defaults(this.options.buttonSettings, {\n        showPrevious: true,\n        showNext: true,\n        showSubmit: true,\n        showCancel: !this.options.readOnly\n      });\n\n      if (!this.isSecondInit) {\n        var _this$options, _this$options$breadcr;\n\n        this.isClickableDefined = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : (_this$options$breadcr = _this$options.breadcrumbSettings) === null || _this$options$breadcr === void 0 ? void 0 : _this$options$breadcr.hasOwnProperty('clickable');\n        this.isSecondInit = true;\n      }\n\n      this.options.breadcrumbSettings = _lodash.default.defaults(this.options.breadcrumbSettings, {\n        clickable: true\n      });\n      this.options.allowPrevious = this.options.allowPrevious || false;\n      this.page = 0;\n\n      var onReady = _get(_getPrototypeOf(Wizard.prototype), \"init\", this).call(this);\n\n      this.setComponentSchema();\n\n      if ((_this$pages = this.pages) !== null && _this$pages !== void 0 && _this$pages[this.page]) {\n        this.component = this.pages[this.page].component;\n      }\n\n      this.on('subWizardsUpdated', function (subForm) {\n        var subWizard = _this4.subWizards.find(function (subWizard) {\n          var _subWizard$subForm;\n\n          return (subForm === null || subForm === void 0 ? void 0 : subForm.id) && ((_subWizard$subForm = subWizard.subForm) === null || _subWizard$subForm === void 0 ? void 0 : _subWizard$subForm.id) === (subForm === null || subForm === void 0 ? void 0 : subForm.id);\n        });\n\n        if (_this4.subWizards.length && subWizard) {\n          subWizard.subForm.setValue(subForm._submission, {}, true);\n\n          _this4.establishPages();\n\n          _this4.redraw();\n        }\n      });\n      return onReady;\n    }\n  }, {\n    key: \"wizardKey\",\n    get: function get() {\n      return \"wizard-\".concat(this.id);\n    }\n  }, {\n    key: \"wizard\",\n    get: function get() {\n      return this.form;\n    },\n    set: function set(form) {\n      this.setForm(form);\n    }\n  }, {\n    key: \"buttons\",\n    get: function get() {\n      var _this5 = this;\n\n      var buttons = {};\n      [{\n        name: 'cancel',\n        method: 'cancel'\n      }, {\n        name: 'previous',\n        method: 'prevPage'\n      }, {\n        name: 'next',\n        method: 'nextPage'\n      }, {\n        name: 'submit',\n        method: 'submit'\n      }].forEach(function (button) {\n        if (_this5.hasButton(button.name)) {\n          buttons[button.name] = button;\n        }\n      });\n      return buttons;\n    }\n  }, {\n    key: \"buttonOrder\",\n    get: function get() {\n      var _this$options$propert, _this$options$propert2, _this$options$propert3;\n\n      var defaultButtonOrder = ['cancel', 'previous', 'next', 'submit'];\n      return (_this$options$propert = (_this$options$propert2 = this.options.properties) === null || _this$options$propert2 === void 0 ? void 0 : (_this$options$propert3 = _this$options$propert2.wizardButtonOrder) === null || _this$options$propert3 === void 0 ? void 0 : _this$options$propert3.toLowerCase().split(', ')) !== null && _this$options$propert !== void 0 ? _this$options$propert : defaultButtonOrder;\n    }\n  }, {\n    key: \"renderContext\",\n    get: function get() {\n      var _this$root, _this$root$component;\n\n      return {\n        wizardKey: this.wizardKey,\n        isBreadcrumbClickable: this.isBreadcrumbClickable(),\n        isSubForm: !!this.parent && !((_this$root = this.root) !== null && _this$root !== void 0 && (_this$root$component = _this$root.component) !== null && _this$root$component !== void 0 && _this$root$component.type) === 'wizard',\n        panels: this.allPages.length ? this.allPages.map(function (page) {\n          return page.component;\n        }) : this.pages.map(function (page) {\n          return page.component;\n        }),\n        buttons: this.buttons,\n        currentPage: this.page,\n        buttonOrder: this.buttonOrder\n      };\n    }\n  }, {\n    key: \"prepareNavigationSettings\",\n    value: function prepareNavigationSettings(ctx) {\n      var currentPanel = this.currentPanel;\n\n      if (currentPanel && currentPanel.buttonSettings) {\n        Object.keys(currentPanel.buttonSettings).forEach(function () {\n          Object.keys(ctx.buttons).forEach(function (key) {\n            if (typeof currentPanel.buttonSettings[key] !== 'undefined' && !currentPanel.buttonSettings[key] || ctx.isSubForm) {\n              ctx.buttons[key] = null;\n            }\n          });\n        });\n      }\n\n      return this.renderTemplate('wizardNav', ctx);\n    }\n  }, {\n    key: \"prepareHeaderSettings\",\n    value: function prepareHeaderSettings(ctx, headerType) {\n      if (this.currentPanel && this.currentPanel.breadcrumb === 'none' || ctx.isSubForm) {\n        return null;\n      }\n\n      return this.renderTemplate(headerType, ctx);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var ctx = this.renderContext;\n\n      if (this.component.key) {\n        ctx.panels.map(function (panel) {\n          if (panel.key === _this6.component.key) {\n            _this6.currentPanel = panel;\n            ctx.wizardPageTooltip = _this6.getFormattedTooltip(panel.tooltip);\n          }\n        });\n      }\n\n      var wizardNav = this.prepareNavigationSettings(ctx);\n      var wizardHeaderType = \"wizardHeader\".concat(_lodash.default.get(this.form, 'settings.wizardHeaderType', ''));\n\n      var wizardHeaderLocation = _lodash.default.get(this.form, 'settings.wizardHeaderLocation', 'left');\n\n      var wizardHeader = this.prepareHeaderSettings(ctx, wizardHeaderType);\n      return this.renderTemplate('wizard', _objectSpread(_objectSpread({}, ctx), {}, {\n        className: _get(_getPrototypeOf(Wizard.prototype), \"getClassName\", this).call(this),\n        wizardHeader: wizardHeader,\n        wizardHeaderType: wizardHeaderType,\n        wizardHeaderLocation: wizardHeaderLocation,\n        wizardNav: wizardNav,\n        components: this.renderComponents([].concat(_toConsumableArray(this.prefixComps), _toConsumableArray(this.currentPage.components), _toConsumableArray(this.suffixComps)))\n      }), this.builderMode ? 'builder' : 'form');\n    }\n  }, {\n    key: \"redrawNavigation\",\n    value: function redrawNavigation() {\n      if (this.element) {\n        var navElement = this.element.querySelector(\"#\".concat(this.wizardKey, \"-nav\"));\n\n        if (navElement) {\n          var _this$loadRefs;\n\n          this.detachNav();\n          navElement.outerHTML = this.renderTemplate('wizardNav', this.renderContext);\n          navElement = this.element.querySelector(\"#\".concat(this.wizardKey, \"-nav\"));\n          this.loadRefs(navElement, (_this$loadRefs = {}, _defineProperty(_this$loadRefs, \"\".concat(this.wizardKey, \"-cancel\"), 'single'), _defineProperty(_this$loadRefs, \"\".concat(this.wizardKey, \"-previous\"), 'single'), _defineProperty(_this$loadRefs, \"\".concat(this.wizardKey, \"-next\"), 'single'), _defineProperty(_this$loadRefs, \"\".concat(this.wizardKey, \"-submit\"), 'single'), _this$loadRefs));\n          this.attachNav();\n        }\n      }\n    }\n  }, {\n    key: \"redrawHeader\",\n    value: function redrawHeader() {\n      if (this.element) {\n        var headerElement = this.element.querySelector(\"#\".concat(this.wizardKey, \"-header\"));\n\n        if (headerElement) {\n          var _this$loadRefs2;\n\n          this.detachHeader();\n          headerElement.outerHTML = this.renderTemplate(\"wizardHeader\".concat(_lodash.default.get(this.form, 'settings.wizardHeaderType', '')), this.renderContext);\n          headerElement = this.element.querySelector(\"#\".concat(this.wizardKey, \"-header\"));\n          this.loadRefs(headerElement, (_this$loadRefs2 = {}, _defineProperty(_this$loadRefs2, \"\".concat(this.wizardKey, \"-link\"), 'multiple'), _defineProperty(_this$loadRefs2, \"\".concat(this.wizardKey, \"-tooltip\"), 'multiple'), _this$loadRefs2));\n          this.attachHeader();\n        }\n      }\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this$loadRefs3,\n          _this7 = this;\n\n      this.element = element;\n      this.loadRefs(element, (_this$loadRefs3 = {}, _defineProperty(_this$loadRefs3, this.wizardKey, 'single'), _defineProperty(_this$loadRefs3, \"\".concat(this.wizardKey, \"-header\"), 'single'), _defineProperty(_this$loadRefs3, \"\".concat(this.wizardKey, \"-cancel\"), 'single'), _defineProperty(_this$loadRefs3, \"\".concat(this.wizardKey, \"-previous\"), 'single'), _defineProperty(_this$loadRefs3, \"\".concat(this.wizardKey, \"-next\"), 'single'), _defineProperty(_this$loadRefs3, \"\".concat(this.wizardKey, \"-submit\"), 'single'), _defineProperty(_this$loadRefs3, \"\".concat(this.wizardKey, \"-link\"), 'multiple'), _defineProperty(_this$loadRefs3, \"\".concat(this.wizardKey, \"-tooltip\"), 'multiple'), _this$loadRefs3));\n\n      if ((this.options.readOnly || this.editMode) && !this.enabledIndex) {\n        var _this$pages2;\n\n        this.enabledIndex = ((_this$pages2 = this.pages) === null || _this$pages2 === void 0 ? void 0 : _this$pages2.length) - 1;\n      }\n\n      this.hook('attachWebform', element, this);\n      var promises = this.attachComponents(this.refs[this.wizardKey], [].concat(_toConsumableArray(this.prefixComps), _toConsumableArray(this.currentPage.components), _toConsumableArray(this.suffixComps)));\n      this.attachNav();\n      this.attachHeader();\n      return promises.then(function () {\n        _this7.emit('render', {\n          component: _this7.currentPage,\n          page: _this7.page\n        });\n\n        if (_this7.component.scrollToTop) {\n          _this7.scrollPageToTop();\n        }\n      });\n    }\n  }, {\n    key: \"scrollPageToTop\",\n    value: function scrollPageToTop() {\n      var _this$refs$;\n\n      var pageTop = (_this$refs$ = this.refs[\"\".concat(this.wizardKey, \"-header\")]) !== null && _this$refs$ !== void 0 ? _this$refs$ : this.refs[this.wizardKey];\n\n      if (!pageTop) {\n        return;\n      }\n\n      if ('scrollIntoView' in pageTop) {\n        pageTop.scrollIntoView(true);\n      } else {\n        this.scrollIntoView(pageTop);\n      }\n    }\n  }, {\n    key: \"isBreadcrumbClickable\",\n    value: function isBreadcrumbClickable() {\n      var _this8 = this;\n\n      var currentPage = null;\n      this.pages.map(function (page) {\n        if (_lodash.default.isEqual(_this8.currentPage.component, page.component)) {\n          currentPage = page;\n        }\n      });\n      return this.isClickableDefined ? this.options.breadcrumbSettings.clickable : _lodash.default.get(currentPage, 'component.breadcrumbClickable', true);\n    }\n  }, {\n    key: \"isAllowPrevious\",\n    value: function isAllowPrevious() {\n      var _this9 = this;\n\n      var currentPage = null;\n      this.pages.map(function (page) {\n        if (_lodash.default.isEqual(_this9.currentPage.component, page.component)) {\n          currentPage = page;\n        }\n      });\n      return _lodash.default.get(currentPage.component, 'allowPrevious', this.options.allowPrevious);\n    }\n  }, {\n    key: \"handleNaviageteOnEnter\",\n    value: function handleNaviageteOnEnter(event) {\n      if (event.keyCode === 13) {\n        var clickEvent = new CustomEvent('click');\n        var buttonElement = this.refs[\"\".concat(this.wizardKey, \"-\").concat(this.buttons.next.name)];\n\n        if (buttonElement) {\n          buttonElement.dispatchEvent(clickEvent);\n        }\n      }\n    }\n  }, {\n    key: \"handleSaveOnEnter\",\n    value: function handleSaveOnEnter(event) {\n      if (event.keyCode === 13) {\n        var clickEvent = new CustomEvent('click');\n        var buttonElement = this.refs[\"\".concat(this.wizardKey, \"-\").concat(this.buttons.submit.name)];\n\n        if (buttonElement) {\n          buttonElement.dispatchEvent(clickEvent);\n        }\n      }\n    }\n  }, {\n    key: \"attachNav\",\n    value: function attachNav() {\n      var _this10 = this;\n\n      if (this.component.navigateOnEnter) {\n        this.addEventListener(document, 'keyup', this.handleNaviageteOnEnter.bind(this));\n      }\n\n      if (this.component.saveOnEnter) {\n        this.addEventListener(document, 'keyup', this.handleSaveOnEnter.bind(this));\n      }\n\n      _lodash.default.each(this.buttons, function (button) {\n        var buttonElement = _this10.refs[\"\".concat(_this10.wizardKey, \"-\").concat(button.name)];\n\n        _this10.addEventListener(buttonElement, 'click', function (event) {\n          event.preventDefault(); // Disable the button until done.\n\n          buttonElement.setAttribute('disabled', 'disabled');\n\n          _this10.setLoading(buttonElement, true); // Call the button method, then re-enable the button.\n\n\n          _this10[button.method]().then(function () {\n            buttonElement.removeAttribute('disabled');\n\n            _this10.setLoading(buttonElement, false);\n          }).catch(function () {\n            buttonElement.removeAttribute('disabled');\n\n            _this10.setLoading(buttonElement, false);\n          });\n        });\n      });\n    }\n  }, {\n    key: \"emitWizardPageSelected\",\n    value: function emitWizardPageSelected(index) {\n      this.emit('wizardPageSelected', this.pages[index], index);\n    }\n  }, {\n    key: \"attachHeader\",\n    value: function attachHeader() {\n      var _this11 = this;\n\n      var isAllowPrevious = this.isAllowPrevious();\n      this.attachTooltips(this.refs[\"\".concat(this.wizardKey, \"-tooltip\")], this.currentPanel.tooltip);\n\n      if (this.isBreadcrumbClickable() || isAllowPrevious) {\n        var _this$refs$2;\n\n        (_this$refs$2 = this.refs[\"\".concat(this.wizardKey, \"-link\")]) === null || _this$refs$2 === void 0 ? void 0 : _this$refs$2.forEach(function (link, index) {\n          if (!isAllowPrevious || index <= _this11.enabledIndex) {\n            _this11.addEventListener(link, 'click', function (event) {\n              _this11.emit('wizardNavigationClicked', _this11.pages[index]);\n\n              event.preventDefault();\n              return _this11.setPage(index).then(function () {\n                _this11.emitWizardPageSelected(index);\n              });\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"detachNav\",\n    value: function detachNav() {\n      var _this12 = this;\n\n      if (this.component.navigateOnEnter) {\n        this.removeEventListener(document, 'keyup', this.handleNaviageteOnEnter.bind(this));\n      }\n\n      if (this.component.saveOnEnter) {\n        this.removeEventListener(document, 'keyup', this.handleSaveOnEnter.bind(this));\n      }\n\n      _lodash.default.each(this.buttons, function (button) {\n        _this12.removeEventListener(_this12.refs[\"\".concat(_this12.wizardKey, \"-\").concat(button.name)], 'click');\n      });\n    }\n  }, {\n    key: \"detachHeader\",\n    value: function detachHeader() {\n      var _this13 = this;\n\n      if (this.refs[\"\".concat(this.wizardKey, \"-link\")]) {\n        this.refs[\"\".concat(this.wizardKey, \"-link\")].forEach(function (link) {\n          _this13.removeEventListener(link, 'click');\n        });\n      }\n    }\n  }, {\n    key: \"transformPages\",\n    value: function transformPages() {\n      var _this14 = this;\n\n      var allComponents = [];\n      var components = this.getSortedComponents(this);\n      var defferedComponents = [];\n      this.allPages = []; // Get all components including all nested components and line up in the correct order\n\n      var getAllComponents = function getAllComponents(nestedComp, compsArr) {\n        var pushAllowed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var nestedPages = [];\n        var dataArrayComponents = ['datagrid', 'editgrid', 'dynamicWizard'];\n        var currentComponents = nestedComp !== null && nestedComp !== void 0 && nestedComp.subForm ? _this14.getSortedComponents(nestedComp.subForm) : (nestedComp === null || nestedComp === void 0 ? void 0 : nestedComp.components) || [];\n        var visibleComponents = currentComponents.filter(function (comp) {\n          return comp._visible;\n        });\n        var filteredComponents = visibleComponents.filter(function (comp) {\n          return !dataArrayComponents.includes(comp.component.type) && (comp.type !== 'form' || comp.isNestedWizard);\n        });\n        var additionalComponents = currentComponents.filter(function (comp) {\n          var _comp$subForm;\n\n          return ((_comp$subForm = comp.subForm) === null || _comp$subForm === void 0 ? void 0 : _comp$subForm._form.display) !== 'wizard';\n        });\n        var hasNested = false;\n        (0, _utils.eachComponent)(filteredComponents, function (comp) {\n          if (comp && comp.component) {\n            if (comp.component.type === 'panel' && comp !== null && comp !== void 0 && comp.parent.wizard && !getAllComponents(comp, compsArr, false)) {\n              if (pushAllowed) {\n                _this14.setRootPanelId(comp);\n\n                nestedPages.push(comp);\n              }\n\n              hasNested = true;\n            }\n\n            if (comp.isNestedWizard && comp.subForm) {\n              var hasNestedForm = getAllComponents(comp, nestedPages, pushAllowed);\n\n              if (!hasNested) {\n                hasNested = hasNestedForm;\n              }\n            }\n          }\n        }, true);\n\n        if (nestedComp.component.type === 'panel') {\n          if (!hasNested && pushAllowed) {\n            _this14.setRootPanelId(nestedComp);\n\n            compsArr.push(nestedComp);\n          }\n\n          if (hasNested && additionalComponents.length) {\n            var newComp = _lodash.default.clone(nestedComp);\n\n            newComp.components = additionalComponents;\n\n            _this14.setRootPanelId(newComp);\n\n            defferedComponents.push(newComp);\n          }\n        }\n\n        if (pushAllowed) {\n          compsArr.push.apply(compsArr, _toConsumableArray(defferedComponents).concat(nestedPages));\n          defferedComponents = [];\n        }\n\n        return hasNested;\n      };\n\n      components.forEach(function (component) {\n        if (component.visible) {\n          getAllComponents(component, allComponents);\n        }\n      }, []); // recalculate pages only for root wizards, including the situation when the wizard is in a wrapper\n\n      if (this.localRoot && this.id === this.localRoot.id) {\n        allComponents.forEach(function (comp, index) {\n          comp.eachComponent(function (component) {\n            component.page = index;\n          });\n        });\n      }\n\n      this.allPages = allComponents;\n    }\n  }, {\n    key: \"getSortedComponents\",\n    value: function getSortedComponents(_ref) {\n      var components = _ref.components,\n          originalComponents = _ref.originalComponents; // sorts components if they were shuffled after the conditional logic\n\n      var currentComponents = [];\n      var currentPages = [];\n\n      if (components && components.length) {\n        components.map(function (page) {\n          if (page.component.type === 'panel') {\n            currentPages[page.component.key || page.component.title] = page;\n          }\n        });\n      }\n\n      originalComponents === null || originalComponents === void 0 ? void 0 : originalComponents.forEach(function (item) {\n        if (!item.key) {\n          item.key = item.title;\n        }\n\n        if (currentPages[item.key]) {\n          currentComponents.push(currentPages[item.key]);\n        }\n      });\n      return currentComponents;\n    }\n  }, {\n    key: \"findRootPanel\",\n    value: function findRootPanel(component) {\n      var _component$parent;\n\n      return (_component$parent = component.parent) !== null && _component$parent !== void 0 && _component$parent.parent ? this.findRootPanel(component.parent) : component;\n    }\n  }, {\n    key: \"setRootPanelId\",\n    value: function setRootPanelId(component) {\n      var _component$parent2;\n\n      if (component.rootPanelId && component.rootPanelId !== component.id) {\n        return;\n      }\n\n      var parent = (_component$parent2 = component.parent) !== null && _component$parent2 !== void 0 && _component$parent2.parent ? this.findRootPanel(component.parent) : component;\n      component.rootPanelId = parent.id;\n    }\n  }, {\n    key: \"establishPages\",\n    value: function establishPages() {\n      var _this15 = this;\n\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.data;\n      this.pages = [];\n      this.prefixComps = [];\n      this.suffixComps = [];\n      var visible = [];\n      var currentPages = {};\n\n      var pageOptions = _objectSpread(_objectSpread({}, _lodash.default.clone(this.options)), this.parent ? {\n        root: this\n      } : {});\n\n      if (this.components && this.components.length) {\n        this.components.forEach(function (page) {\n          if (page.component.type === 'panel') {\n            currentPages[page.component.key || page.component.title] = page;\n          }\n        });\n      }\n\n      if (this.originalComponents) {\n        this.originalComponents.forEach(function (item) {\n          if (item.type === 'panel') {\n            if (!item.key) {\n              item.key = item.title;\n            }\n\n            var page = currentPages[item.key];\n            var forceShow = _this15.options.show ? _this15.options.show[item.key] : false;\n            var forceHide = _this15.options.hide ? _this15.options.hide[item.key] : false;\n            var isVisible = !page ? (0, _utils.checkCondition)(item, data, data, _this15.component, _this15) && !item.hidden : page.visible;\n\n            if (forceShow) {\n              isVisible = true;\n            } else if (forceHide) {\n              isVisible = false;\n            }\n\n            if (isVisible) {\n              visible.push(item);\n\n              if (page) {\n                _this15.pages.push(page);\n              }\n            }\n\n            if (!page && isVisible) {\n              page = _this15.createComponent(item, pageOptions);\n              page.visible = isVisible;\n\n              _this15.pages.push(page);\n\n              page.eachComponent(function (component) {\n                component.page = _this15.pages.length - 1;\n              });\n            }\n          } else if (item.type !== 'button') {\n            if (!_this15.pages.length) {\n              _this15.prefixComps.push(_this15.createComponent(item, pageOptions));\n            } else {\n              _this15.suffixComps.push(_this15.createComponent(item, pageOptions));\n            }\n          }\n        });\n      }\n\n      if (this.pages.length) {\n        this.emit('pagesChanged');\n      }\n\n      this.transformPages();\n\n      if (this.allPages && this.allPages.length) {\n        this.updatePages();\n      }\n\n      return visible;\n    }\n  }, {\n    key: \"updatePages\",\n    value: function updatePages() {\n      this.pages = this.allPages;\n    }\n  }, {\n    key: \"addComponents\",\n    value: function addComponents() {\n      this.establishPages();\n    }\n  }, {\n    key: \"setPage\",\n    value: function setPage(num) {\n      var _this16 = this;\n\n      if (num === this.page) {\n        return _nativePromiseOnly.default.resolve();\n      }\n\n      if (num >= 0 && num < this.pages.length) {\n        this.page = num;\n        this.pageFieldLogic(num);\n        this.getNextPage();\n        var parentNum = num;\n\n        if (this.hasExtraPages) {\n          var pageFromPages = this.pages[num];\n          var pageFromComponents = this.components[num];\n\n          if (!pageFromComponents || (pageFromPages === null || pageFromPages === void 0 ? void 0 : pageFromPages.id) !== pageFromComponents.id) {\n            parentNum = this.components.findIndex(function (comp) {\n              var _this16$pages, _this16$pages$parentN;\n\n              return comp.id === ((_this16$pages = _this16.pages) === null || _this16$pages === void 0 ? void 0 : (_this16$pages$parentN = _this16$pages[parentNum]) === null || _this16$pages$parentN === void 0 ? void 0 : _this16$pages$parentN.rootPanelId);\n            });\n          }\n        }\n\n        if (!this._seenPages.includes(parentNum)) {\n          this._seenPages = this._seenPages.concat(parentNum);\n        }\n\n        this.redraw().then(function () {\n          _this16.checkData(_this16.submission.data);\n        });\n        return _nativePromiseOnly.default.resolve();\n      } else if (!this.pages.length) {\n        this.redraw();\n        return _nativePromiseOnly.default.resolve();\n      }\n\n      return _nativePromiseOnly.default.reject('Page not found');\n    }\n  }, {\n    key: \"pageFieldLogic\",\n    value: function pageFieldLogic(page) {\n      var _this$pages3;\n\n      if ((_this$pages3 = this.pages) !== null && _this$pages3 !== void 0 && _this$pages3[page]) {\n        // Handle field logic on pages.\n        this.component = this.pages[page].component;\n        this.originalComponent = (0, _utils.fastCloneDeep)(this.component);\n        this.fieldLogic(this.data); // If disabled changed, be sure to distribute the setting.\n\n        this.disabled = this.shouldDisabled;\n      }\n    }\n  }, {\n    key: \"currentPage\",\n    get: function get() {\n      return this.pages && this.pages.length >= this.page ? this.pages[this.page] : {\n        components: []\n      };\n    }\n  }, {\n    key: \"getNextPage\",\n    value: function getNextPage() {\n      var _this$pages4;\n\n      if ((_this$pages4 = this.pages) !== null && _this$pages4 !== void 0 && _this$pages4[this.page]) {\n        var data = this.submission.data;\n        var form = this.pages[this.page].component; // Check conditional nextPage\n\n        if (form) {\n          var page = this.pages.length > this.page + 1 && !this.showAllErrors ? this.page + 1 : -1;\n\n          if (form.nextPage) {\n            var next = this.evaluate(form.nextPage, {\n              next: page,\n              data: data,\n              page: page,\n              form: form\n            }, 'next');\n\n            if (next === null) {\n              this.currentNextPage = null;\n              return null;\n            }\n\n            var pageNum = parseInt(next, 10);\n\n            if (!isNaN(parseInt(pageNum, 10)) && isFinite(pageNum)) {\n              this.currentNextPage = pageNum;\n              return pageNum;\n            }\n\n            this.currentNextPage = this.getPageIndexByKey(next);\n            return this.currentNextPage;\n          }\n\n          this.currentNextPage = page;\n          return page;\n        }\n\n        this.currentNextPage = null;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getPreviousPage\",\n    value: function getPreviousPage() {\n      return this.page - 1;\n    }\n  }, {\n    key: \"beforeSubmit\",\n    value: function beforeSubmit() {\n      var pages = this.getPages();\n      return _nativePromiseOnly.default.all(pages.map(function (page) {\n        page.options.beforeSubmit = true;\n        return page.beforeSubmit();\n      }));\n    }\n  }, {\n    key: \"beforePage\",\n    value: function beforePage(next) {\n      var _this17 = this;\n\n      return new _nativePromiseOnly.default(function (resolve, reject) {\n        _this17.hook(next ? 'beforeNext' : 'beforePrev', _this17.currentPage, _this17.submission, function (err) {\n          if (err) {\n            _this17.showErrors(err, true);\n\n            reject(err);\n          }\n\n          var form = _this17.currentPage;\n\n          if (form) {\n            form.beforePage(next).then(resolve).catch(reject);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"emitNextPage\",\n    value: function emitNextPage() {\n      this.emit('nextPage', {\n        page: this.page,\n        submission: this.submission\n      });\n    }\n  }, {\n    key: \"nextPage\",\n    value: function nextPage() {\n      var _this18 = this; // Read-only forms should not worry about validation before going to next page, nor should they submit.\n\n\n      if (this.options.readOnly) {\n        return this.beforePage(true).then(function () {\n          return _this18.setPage(_this18.getNextPage()).then(function () {\n            _this18.emitNextPage();\n          });\n        });\n      } // Validate the form, before go to the next page\n\n\n      if (this.checkValidity(this.localData, true, this.localData, true)) {\n        this.checkData(this.submission.data);\n        return this.beforePage(true).then(function () {\n          return _this18.setPage(_this18.getNextPage()).then(function () {\n            if (!(_this18.options.readOnly || _this18.editMode) && _this18.enabledIndex < _this18.page) {\n              _this18.enabledIndex = _this18.page;\n\n              _this18.redraw();\n            }\n\n            _this18.emitNextPage();\n          });\n        });\n      } else {\n        this.currentPage.components.forEach(function (comp) {\n          return comp.setPristine(false);\n        });\n        return _nativePromiseOnly.default.reject(this.showErrors([], true));\n      }\n    }\n  }, {\n    key: \"emitPrevPage\",\n    value: function emitPrevPage() {\n      this.emit('prevPage', {\n        page: this.page,\n        submission: this.submission\n      });\n    }\n  }, {\n    key: \"prevPage\",\n    value: function prevPage() {\n      var _this19 = this;\n\n      return this.beforePage().then(function () {\n        return _this19.setPage(_this19.getPreviousPage()).then(function () {\n          _this19.emitPrevPage();\n        });\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(noconfirm) {\n      var _this20 = this;\n\n      if (this.options.readOnly) {\n        return _nativePromiseOnly.default.resolve();\n      }\n\n      if (_get(_getPrototypeOf(Wizard.prototype), \"cancel\", this).call(this, noconfirm)) {\n        this.setPristine(true);\n        return this.setPage(0).then(function () {\n          if (_this20.enabledIndex) {\n            _this20.enabledIndex = 0;\n          }\n\n          _this20.onChange();\n\n          _this20.redraw();\n\n          return _this20.page;\n        });\n      }\n\n      return _nativePromiseOnly.default.resolve();\n    }\n  }, {\n    key: \"getPageIndexByKey\",\n    value: function getPageIndexByKey(key) {\n      var pageIndex = this.page;\n      this.pages.forEach(function (page, index) {\n        if (page.component.key === key) {\n          pageIndex = index;\n          return false;\n        }\n      });\n      return pageIndex;\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this.wizard;\n    }\n  }, {\n    key: \"setComponentSchema\",\n    value: function setComponentSchema() {\n      var _this21 = this;\n\n      var pageKeys = {};\n      this.originalComponents = [];\n      this.component.components.map(function (item) {\n        if (item.type === 'panel') {\n          item.key = (0, _utils.uniqueKey)(pageKeys, item.key || 'panel');\n          pageKeys[item.key] = true;\n\n          if (_this21.wizard.full) {\n            _this21.options.show = _this21.options.show || {};\n            _this21.options.show[item.key] = true;\n          } else if (_this21.wizard.hasOwnProperty('full') && !_lodash.default.isEqual(_this21.originalOptions.show, _this21.options.show)) {\n            _this21.options.show = _objectSpread({}, _this21.originalOptions.show || {});\n          }\n        }\n\n        _this21.originalComponents.push(_lodash.default.clone(item));\n      });\n\n      if (!Object.keys(pageKeys).length) {\n        var newPage = {\n          type: 'panel',\n          title: 'Page 1',\n          label: 'Page 1',\n          key: 'page1',\n          components: this.component.components\n        };\n        this.component.components = [newPage];\n        this.originalComponents.push(_lodash.default.clone(newPage));\n      }\n    }\n  }, {\n    key: \"setForm\",\n    value: function setForm(form, flags) {\n      if (!form) {\n        return;\n      }\n\n      return _get(_getPrototypeOf(Wizard.prototype), \"setForm\", this).call(this, form, flags);\n    }\n  }, {\n    key: \"onSetForm\",\n    value: function onSetForm(clonedForm, initialForm) {\n      this.component.components = (this._parentPath ? initialForm.components : clonedForm.components) || [];\n      this.setComponentSchema();\n    }\n  }, {\n    key: \"setEditMode\",\n    value: function setEditMode(submission) {\n      if (!this.editMode && submission._id && !this.options.readOnly) {\n        this.editMode = true;\n        this.redraw();\n      }\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(submission) {\n      var _this22 = this;\n\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var ignoreEstablishment = arguments.length > 2 ? arguments[2] : undefined;\n      this._submission = submission;\n\n      if (flags && flags.fromSubmission && (this.options.readOnly || this.editMode) && !this.isHtmlRenderMode()) {\n        this._data = submission.data;\n      }\n\n      if (!ignoreEstablishment) {\n        this.establishPages(submission.data);\n      }\n\n      var changed = this.getPages({\n        all: true\n      }).reduce(function (changed, page) {\n        return _this22.setNestedValue(page, submission.data, flags, changed) || changed;\n      }, false);\n\n      if (changed) {\n        this.pageFieldLogic(this.page);\n      }\n\n      this.setEditMode(submission);\n      return changed;\n    }\n  }, {\n    key: \"isClickable\",\n    value: function isClickable(page, index) {\n      return this.page !== index && (0, _utils.firstNonNil)([_lodash.default.get(page, 'breadcrumbClickable'), this.options.breadcrumbSettings.clickable]);\n    }\n  }, {\n    key: \"hasButton\",\n    value: function hasButton(name) {\n      var nextPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getNextPage(); // get page options with global options as default values\n\n      var _$get = _lodash.default.get(this.currentPage, 'component.buttonSettings', {}),\n          _$get$previous = _$get.previous,\n          previous = _$get$previous === void 0 ? this.options.buttonSettings.showPrevious : _$get$previous,\n          _$get$cancel = _$get.cancel,\n          cancel = _$get$cancel === void 0 ? this.options.buttonSettings.showCancel : _$get$cancel,\n          _$get$submit = _$get.submit,\n          submit = _$get$submit === void 0 ? this.options.buttonSettings.showSubmit : _$get$submit,\n          _$get$next = _$get.next,\n          next = _$get$next === void 0 ? this.options.buttonSettings.showNext : _$get$next;\n\n      switch (name) {\n        case 'previous':\n          return previous && this.getPreviousPage() > -1;\n\n        case 'next':\n          return next && nextPage !== null && nextPage !== -1;\n\n        case 'cancel':\n          return cancel && !this.options.readOnly;\n\n        case 'submit':\n          return submit && !this.options.readOnly && (nextPage === null || this.page === this.pages.length - 1);\n\n        default:\n          return true;\n      }\n    }\n  }, {\n    key: \"pageId\",\n    value: function pageId(page) {\n      if (page.key) {\n        // Some panels have the same key....\n        return \"\".concat(page.key, \"-\").concat(page.title);\n      } else if (page.components && page.components.length > 0) {\n        return this.pageId(page.components[0]);\n      } else {\n        return page.title;\n      }\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(flags, changed, modified, changes) {\n      var _this23 = this;\n\n      _get(_getPrototypeOf(Wizard.prototype), \"onChange\", this).call(this, flags, changed, modified, changes);\n\n      if (this.alert && !this.submitted) {\n        this.checkValidity(this.localData, false, this.localData, true);\n        this.showErrors([], true, true);\n      } // If the pages change, need to redraw the header.\n\n\n      var currentPanels;\n      var panels;\n      var currentNextPage = this.currentNextPage;\n\n      if (this.hasExtraPages) {\n        currentPanels = this.pages.map(function (page) {\n          return page.component.key;\n        });\n        this.establishPages();\n        panels = this.pages.map(function (page) {\n          return page.component.key;\n        });\n      } else {\n        var _this$currentPanel, _this$currentPanels;\n\n        currentPanels = this.currentPanels || this.pages.map(function (page) {\n          return page.component.key;\n        });\n        panels = this.establishPages().map(function (panel) {\n          return panel.key;\n        });\n        this.currentPanels = panels;\n\n        if ((_this$currentPanel = this.currentPanel) !== null && _this$currentPanel !== void 0 && _this$currentPanel.key && (_this$currentPanels = this.currentPanels) !== null && _this$currentPanels !== void 0 && _this$currentPanels.length) {\n          this.setPage(this.currentPanels.findIndex(function (panel) {\n            return panel === _this23.currentPanel.key;\n          }));\n        }\n      }\n\n      if (!_lodash.default.isEqual(panels, currentPanels) || flags && flags.fromSubmission) {\n        this.redrawHeader();\n      } // If the next page changes, then make sure to redraw navigation.\n\n\n      if (currentNextPage !== this.getNextPage()) {\n        this.redrawNavigation();\n      }\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      var _this$parent, _this$parent$componen;\n\n      if ((_this$parent = this.parent) !== null && _this$parent !== void 0 && (_this$parent$componen = _this$parent.component) !== null && _this$parent$componen !== void 0 && _this$parent$componen.modalEdit) {\n        return this.parent.redraw();\n      }\n\n      return _get(_getPrototypeOf(Wizard.prototype), \"redraw\", this).call(this);\n    }\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity(data, dirty, row, currentPageOnly) {\n      if (!this.checkCondition(row, data)) {\n        this.setCustomValidity('');\n        return true;\n      }\n\n      var components = !currentPageOnly || this.isLastPage() ? this.getComponents() : this.currentPage.components;\n      return components.reduce(function (check, comp) {\n        return comp.checkValidity(data, dirty, row) && check;\n      }, true);\n    }\n  }, {\n    key: \"errors\",\n    get: function get() {\n      if (!this.isLastPage()) {\n        return this.currentPage.errors;\n      }\n\n      return _get(_getPrototypeOf(Wizard.prototype), \"errors\", this);\n    }\n  }, {\n    key: \"focusOnComponent\",\n    value: function focusOnComponent(key) {\n      var _this24 = this;\n\n      var pageIndex = 0;\n\n      var _this$pages$filter = this.pages.filter(function (page, index) {\n        var hasComponent = false;\n        page.getComponent(key, function (comp) {\n          if (comp.path === key) {\n            pageIndex = index;\n            hasComponent = true;\n          }\n        });\n        return hasComponent;\n      }),\n          _this$pages$filter2 = _slicedToArray(_this$pages$filter, 1),\n          page = _this$pages$filter2[0];\n\n      if (page && page !== this.currentPage) {\n        return this.setPage(pageIndex).then(function () {\n          _this24.checkValidity(_this24.submission.data, true, _this24.submission.data);\n\n          _this24.showErrors();\n\n          _get(_getPrototypeOf(Wizard.prototype), \"focusOnComponent\", _this24).call(_this24, key);\n        });\n      }\n\n      return _get(_getPrototypeOf(Wizard.prototype), \"focusOnComponent\", this).call(this, key);\n    }\n  }]);\n\n  return Wizard;\n}(_Webform2.default);\n\nexports.default = Wizard;\nWizard.setBaseUrl = _Formio.GlobalFormio.setBaseUrl;\nWizard.setApiUrl = _Formio.GlobalFormio.setApiUrl;\nWizard.setAppUrl = _Formio.GlobalFormio.setAppUrl;","map":null,"metadata":{},"sourceType":"script"}