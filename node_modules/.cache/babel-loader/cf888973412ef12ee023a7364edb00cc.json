{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.find\");\n\nrequire(\"core-js/modules/es.array.find-index\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Field2 = _interopRequireDefault(require(\"../_classes/field/Field\"));\n\nvar _utils = require(\"../../utils/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar RadioComponent = /*#__PURE__*/function (_Field) {\n  _inherits(RadioComponent, _Field);\n\n  var _super = _createSuper(RadioComponent);\n\n  function RadioComponent(component, options, data) {\n    var _this;\n\n    _classCallCheck(this, RadioComponent);\n\n    _this = _super.call(this, component, options, data);\n    _this.previousValue = _this.dataValue || null;\n    return _this;\n  }\n\n  _createClass(RadioComponent, [{\n    key: \"defaultSchema\",\n    get: function get() {\n      return RadioComponent.schema();\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      var defaultValue = _get(_getPrototypeOf(RadioComponent.prototype), \"defaultValue\", this);\n\n      if (!defaultValue && this.component.defaultValue === false) {\n        defaultValue = this.component.defaultValue;\n      }\n\n      return defaultValue;\n    }\n  }, {\n    key: \"inputInfo\",\n    get: function get() {\n      var _this$root;\n\n      var info = _get(_getPrototypeOf(RadioComponent.prototype), \"elementInfo\", this).call(this);\n\n      info.type = 'input';\n      info.changeEvent = 'click';\n      info.attr.class = 'form-check-input';\n      info.attr.name = info.attr.name += \"[\".concat((_this$root = this.root) === null || _this$root === void 0 ? void 0 : _this$root.id, \"-\").concat(this.id, \"]\");\n      return info;\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      return '';\n    }\n  }, {\n    key: \"isRadio\",\n    get: function get() {\n      return this.component.inputType === 'radio';\n    }\n  }, {\n    key: \"optionSelectedClass\",\n    get: function get() {\n      return 'radio-selected';\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      _get(_getPrototypeOf(RadioComponent.prototype), \"init\", this).call(this);\n\n      this.validators = this.validators.concat(['select', 'onlyAvailableItems']);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _get(_getPrototypeOf(RadioComponent.prototype), \"render\", this).call(this, this.renderTemplate('radio', {\n        input: this.inputInfo,\n        inline: this.component.inline,\n        values: this.component.values,\n        value: this.dataValue,\n        row: this.row\n      }));\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this2 = this;\n\n      this.loadRefs(element, {\n        input: 'multiple',\n        wrapper: 'multiple'\n      });\n      this.refs.input.forEach(function (input, index) {\n        _this2.addEventListener(input, _this2.inputInfo.changeEvent, function () {\n          _this2.updateValue(null, {\n            modified: true\n          });\n        });\n\n        _this2.addShortcut(input, _this2.component.values[index].shortcut);\n\n        if (_this2.isRadio) {\n          var dataValue = _this2.dataValue;\n\n          if (!_lodash.default.isString(_this2.dataValue)) {\n            dataValue = _lodash.default.toString(_this2.dataValue);\n          }\n\n          input.checked = dataValue === input.value;\n\n          _this2.addEventListener(input, 'keyup', function (event) {\n            if (event.key === ' ' && dataValue === input.value) {\n              event.preventDefault();\n\n              _this2.updateValue(null, {\n                modified: true\n              });\n            }\n          });\n        }\n      });\n      this.setSelectedClasses();\n      return _get(_getPrototypeOf(RadioComponent.prototype), \"attach\", this).call(this, element);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach(element) {\n      var _this3 = this;\n\n      if (element && this.refs.input) {\n        this.refs.input.forEach(function (input, index) {\n          _this3.removeShortcut(input, _this3.component.values[index].shortcut);\n        });\n      }\n\n      _get(_getPrototypeOf(RadioComponent.prototype), \"detach\", this).call(this);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      if (this.viewOnly || !this.refs.input || !this.refs.input.length) {\n        return this.dataValue;\n      }\n\n      var value = this.dataValue;\n      this.refs.input.forEach(function (input) {\n        if (input.checked) {\n          value = input.value;\n        }\n      });\n      return value;\n    }\n  }, {\n    key: \"validateValueAvailability\",\n    value: function validateValueAvailability(setting, value) {\n      var _this4 = this;\n\n      if (!(0, _utils.boolValue)(setting) || !value) {\n        return true;\n      }\n\n      var values = this.component.values;\n\n      if (values) {\n        return values.findIndex(function (_ref) {\n          var optionValue = _ref.value;\n          return _this4.normalizeValue(optionValue) === value;\n        }) !== -1;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getValueAsString\",\n    value: function getValueAsString(value) {\n      if (!_lodash.default.isString(value)) {\n        value = _lodash.default.toString(value);\n      }\n\n      var option = _lodash.default.find(this.component.values, function (v) {\n        return v.value === value;\n      });\n\n      if (!value) {\n        return _lodash.default.get(option, 'label', '');\n      }\n\n      return _lodash.default.get(option, 'label', '');\n    }\n  }, {\n    key: \"setValueAt\",\n    value: function setValueAt(index, value) {\n      if (this.refs.input && this.refs.input[index] && value !== null && value !== undefined) {\n        var inputValue = this.refs.input[index].value;\n        this.refs.input[index].checked = inputValue === value.toString();\n      }\n    }\n  }, {\n    key: \"setSelectedClasses\",\n    value: function setSelectedClasses() {\n      var _this5 = this;\n\n      if (this.refs.wrapper) {\n        //add/remove selected option class\n        var value = this.dataValue;\n        this.refs.wrapper.forEach(function (wrapper, index) {\n          var input = _this5.refs.input[index];\n          var checked = input.type === 'checkbox' ? value[input.value] : input.value.toString() === value.toString();\n\n          if (checked) {\n            //add class to container when selected\n            _this5.addClass(wrapper, _this5.optionSelectedClass); //change \"checked\" attribute\n\n\n            input.setAttribute('checked', 'true');\n          } else {\n            _this5.removeClass(wrapper, _this5.optionSelectedClass);\n\n            input.removeAttribute('checked');\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(value, flags) {\n      var changed = _get(_getPrototypeOf(RadioComponent.prototype), \"updateValue\", this).call(this, value, flags);\n\n      if (changed) {\n        this.setSelectedClasses();\n      }\n\n      if (!flags || !flags.modified || !this.isRadio) {\n        return changed;\n      } // If they clicked on the radio that is currently selected, it needs to reset the value.\n\n\n      this.currentValue = this.dataValue;\n      var shouldResetValue = !(flags && flags.noUpdateEvent) && this.previousValue === this.currentValue;\n\n      if (shouldResetValue) {\n        this.resetValue();\n        this.triggerChange(flags);\n      }\n\n      this.previousValue = this.dataValue;\n      return changed;\n    }\n    /**\n     * Normalize values coming into updateValue.\n     *\n     * @param value\n     * @return {*}\n     */\n\n  }, {\n    key: \"normalizeValue\",\n    value: function normalizeValue(value) {\n      var dataType = this.component.dataType || 'auto';\n\n      if (value === this.emptyValue) {\n        return value;\n      }\n\n      switch (dataType) {\n        case 'auto':\n          if (!isNaN(parseFloat(value)) && isFinite(value)) {\n            value = +value;\n          }\n\n          if (value === 'true') {\n            value = true;\n          }\n\n          if (value === 'false') {\n            value = false;\n          }\n\n          break;\n\n        case 'number':\n          value = +value;\n          break;\n\n        case 'string':\n          if (_typeof(value) === 'object') {\n            value = JSON.stringify(value);\n          } else {\n            value = String(value);\n          }\n\n          break;\n\n        case 'boolean':\n          value = !(!value || value.toString() === 'false');\n          break;\n      }\n\n      return _get(_getPrototypeOf(RadioComponent.prototype), \"normalizeValue\", this).call(this, value);\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _Field2.default.schema.apply(_Field2.default, [{\n        type: 'radio',\n        inputType: 'radio',\n        label: 'Radio',\n        key: 'radio',\n        values: [{\n          label: '',\n          value: ''\n        }],\n        validate: {\n          onlyAvailableItems: false\n        },\n        fieldSet: false\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Radio',\n        group: 'basic',\n        icon: 'dot-circle-o',\n        weight: 80,\n        documentation: '/userguide/#radio',\n        schema: RadioComponent.schema()\n      };\n    }\n  }]);\n\n  return RadioComponent;\n}(_Field2.default);\n\nexports.default = RadioComponent;","map":null,"metadata":{},"sourceType":"script"}