{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.find\");\n\nrequire(\"core-js/modules/es.array.find-index\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.array.sort\");\n\nrequire(\"core-js/modules/es.number.constructor\");\n\nrequire(\"core-js/modules/es.object.assign\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.reflect.set\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.includes\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.match\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/es.string.split\");\n\nrequire(\"core-js/modules/es.string.starts-with\");\n\nrequire(\"core-js/modules/es.string.trim\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _Formio = require(\"../../Formio\");\n\nvar _Field2 = _interopRequireDefault(require(\"../_classes/field/Field\"));\n\nvar _Form = _interopRequireDefault(require(\"../../Form\"));\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _utils = require(\"../../utils/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction set(target, property, value, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.set) {\n    set = Reflect.set;\n  } else {\n    set = function set(target, property, value, receiver) {\n      var base = _superPropBase(target, property);\n\n      var desc;\n\n      if (base) {\n        desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.set) {\n          desc.set.call(receiver, value);\n          return true;\n        } else if (!desc.writable) {\n          return false;\n        }\n      }\n\n      desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n      if (desc) {\n        if (!desc.writable) {\n          return false;\n        }\n\n        desc.value = value;\n        Object.defineProperty(receiver, property, desc);\n      } else {\n        _defineProperty(receiver, property, value);\n      }\n\n      return true;\n    };\n  }\n\n  return set(target, property, value, receiver);\n}\n\nfunction _set(target, property, value, receiver, isStrict) {\n  var s = set(target, property, value, receiver || target);\n\n  if (!s && isStrict) {\n    throw new Error('failed to set property');\n  }\n\n  return value;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar Choices;\n\nif (typeof window !== 'undefined') {\n  Choices = require('../../utils/ChoicesWrapper').default;\n}\n\nvar SelectComponent = /*#__PURE__*/function (_Field) {\n  _inherits(SelectComponent, _Field);\n\n  var _super = _createSuper(SelectComponent);\n\n  function SelectComponent() {\n    _classCallCheck(this, SelectComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SelectComponent, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      _get(_getPrototypeOf(SelectComponent.prototype), \"init\", this).call(this);\n\n      this.templateData = {};\n      this.validators = this.validators.concat(['select', 'onlyAvailableItems']); // Trigger an update.\n\n      var updateArgs = [];\n\n      var triggerUpdate = _lodash.default.debounce(function () {\n        updateArgs = [];\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _this.updateItems.apply(_this, args);\n      }, 100);\n\n      this.triggerUpdate = function () {\n        // Make sure we always resolve the previous promise before reassign it\n        if (typeof _this.itemsLoadedResolve === 'function') {\n          _this.itemsLoadedResolve();\n        }\n\n        _this.itemsLoaded = new _nativePromiseOnly.default(function (resolve) {\n          _this.itemsLoadedResolve = resolve;\n        });\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        if (args.length) {\n          updateArgs = args;\n        }\n\n        return triggerUpdate.apply(void 0, _toConsumableArray(updateArgs));\n      }; // Keep track of the select options.\n\n\n      this.selectOptions = [];\n\n      if (this.itemsFromUrl) {\n        this.isFromSearch = false;\n        this.searchServerCount = null;\n        this.defaultServerCount = null;\n        this.isScrollLoading = false;\n        this.searchDownloadedResources = [];\n        this.defaultDownloadedResources = [];\n      } // If this component has been activated.\n\n\n      this.activated = false;\n      this.itemsLoaded = new _nativePromiseOnly.default(function (resolve) {\n        _this.itemsLoadedResolve = resolve;\n      });\n\n      if (this.isHtmlRenderMode()) {\n        this.activate();\n      } // Get the template keys for this select component.\n\n\n      this.getTemplateKeys();\n    }\n  }, {\n    key: \"dataReady\",\n    get: function get() {\n      // If the root submission has been set, and we are still not attached, then assume\n      // that our data is ready.\n      if (this.root && this.root.submissionSet && !this.attached) {\n        return _nativePromiseOnly.default.resolve();\n      }\n\n      return this.itemsLoaded;\n    }\n  }, {\n    key: \"defaultSchema\",\n    get: function get() {\n      return SelectComponent.schema();\n    }\n  }, {\n    key: \"emptyValue\",\n    get: function get() {\n      if (this.component.multiple) {\n        return [];\n      } // if select has JSON data source type, we are defining if empty value would be an object or a string by checking JSON's first item\n\n\n      if (this.component.dataSrc === 'json' && this.component.data.json) {\n        var firstItem = this.component.data.json[0];\n        var firstValue;\n\n        if (this.valueProperty) {\n          firstValue = _lodash.default.get(firstItem, this.valueProperty);\n        } else {\n          firstValue = firstItem;\n        }\n\n        if (firstValue && typeof firstValue === 'string') {\n          return '';\n        } else {\n          return {};\n        }\n      }\n\n      if (this.valueProperty) {\n        return '';\n      }\n\n      return {};\n    }\n  }, {\n    key: \"valueProperty\",\n    get: function get() {\n      if (this.component.valueProperty) {\n        return this.component.valueProperty;\n      } // Force values datasource to use values without actually setting it on the component settings.\n\n\n      if (this.component.dataSrc === 'values') {\n        return 'value';\n      }\n\n      return '';\n    }\n  }, {\n    key: \"inputInfo\",\n    get: function get() {\n      var info = _get(_getPrototypeOf(SelectComponent.prototype), \"elementInfo\", this).call(this);\n\n      info.type = 'select';\n      info.changeEvent = 'change';\n      return info;\n    }\n  }, {\n    key: \"isSelectResource\",\n    get: function get() {\n      return this.component.dataSrc === 'resource';\n    }\n  }, {\n    key: \"isSelectURL\",\n    get: function get() {\n      return this.component.dataSrc === 'url';\n    }\n  }, {\n    key: \"itemsFromUrl\",\n    get: function get() {\n      return this.isSelectResource || this.isSelectURL;\n    }\n  }, {\n    key: \"isInfiniteScrollProvided\",\n    get: function get() {\n      return this.itemsFromUrl;\n    }\n  }, {\n    key: \"shouldDisabled\",\n    get: function get() {\n      return _get(_getPrototypeOf(SelectComponent.prototype), \"shouldDisabled\", this) || this.parentDisabled;\n    }\n  }, {\n    key: \"isEntireObjectDisplay\",\n    value: function isEntireObjectDisplay() {\n      return this.component.dataSrc === 'resource' && this.valueProperty === 'data';\n    }\n  }, {\n    key: \"getSelectTemplate\",\n    value: function getSelectTemplate(data, value) {\n      if (!this.component.template) {\n        return data.label;\n      }\n\n      var options = {\n        noeval: this.itemsFromUrl,\n        data: {}\n      };\n      var template = this.sanitize(this.component.template ? this.interpolate(this.component.template, {\n        item: data\n      }) : data.label, this.shouldSanitizeValue);\n\n      if (value && !_lodash.default.isObject(value) && options.data.item) {\n        // If the value is not an object, then we need to save the template data off for when it is selected.\n        this.templateData[value] = options.data.item;\n      }\n\n      return template;\n    }\n  }, {\n    key: \"selectValueAndLabel\",\n    value: function selectValueAndLabel(data) {\n      var value = this.getOptionValue(this.itemValue(data));\n      return {\n        value: value,\n        label: this.itemTemplate(data, value)\n      };\n    }\n  }, {\n    key: \"itemTemplate\",\n    value: function itemTemplate(data, value) {\n      if (!_lodash.default.isNumber(data) && _lodash.default.isEmpty(data)) {\n        return '';\n      } // If they wish to show the value in read only mode, then just return the itemValue here.\n\n\n      if (this.options.readOnly && this.component.readOnlyValue) {\n        return this.itemValue(data);\n      } // Perform a fast interpretation if we should not use the template.\n\n\n      if (data && !this.component.template) {\n        var itemLabel = data.label || data;\n\n        var _value = typeof itemLabel === 'string' ? this.t(itemLabel, {\n          _userInput: true\n        }) : itemLabel;\n\n        return this.sanitize(_value, this.shouldSanitizeValue);\n      }\n\n      if (typeof data === 'string' || typeof data === 'number') {\n        var selectData = this.selectData;\n\n        if (selectData) {\n          data = selectData;\n        } else {\n          return this.sanitize(this.t(data, {\n            _userInput: true\n          }), this.shouldSanitizeValue);\n        }\n      }\n\n      if (data.data) {\n        // checking additional fields in the template for the selected Entire Object option\n        var hasNestedFields = /item\\.data\\.\\w*/g.test(this.component.template);\n        data.data = this.isEntireObjectDisplay() && _lodash.default.isObject(data.data) && !hasNestedFields ? JSON.stringify(data.data) : data.data;\n      }\n\n      var template = this.sanitize(this.getSelectTemplate(data, value), this.shouldSanitizeValue);\n\n      if (template) {\n        var _this$i18next;\n\n        var label = template.replace(/<\\/?[^>]+(>|$)/g, '');\n        var hasTranslator = (_this$i18next = this.i18next) === null || _this$i18next === void 0 ? void 0 : _this$i18next.translator;\n        if (!label || hasTranslator && !this.t(label, {\n          _userInput: true\n        })) return;\n        return hasTranslator ? template.replace(label, this.t(label, {\n          _userInput: true\n        })) : label;\n      } else {\n        return this.sanitize(JSON.stringify(data), this.shouldSanitizeValue);\n      }\n    }\n    /**\n     * Adds an option to the select dropdown.\n     *\n     * @param value\n     * @param label\n     */\n\n  }, {\n    key: \"addOption\",\n    value: function addOption(value, label) {\n      var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : (0, _utils.getRandomComponentId)();\n      if (_lodash.default.isNil(label)) return;\n      var idPath = this.component.idPath ? this.component.idPath.split('.').reduceRight(function (obj, key) {\n        return _defineProperty({}, key, obj);\n      }, id) : {};\n\n      var option = _objectSpread({\n        value: this.getOptionValue(value),\n        label: label\n      }, idPath);\n\n      var skipOption = this.component.uniqueOptions ? !!this.selectOptions.find(function (selectOption) {\n        return _lodash.default.isEqual(selectOption.value, option.value);\n      }) : false;\n\n      if (skipOption) {\n        return;\n      }\n\n      if (value) {\n        this.selectOptions.push(option);\n      }\n\n      if (this.refs.selectContainer && this.component.widget === 'html5') {\n        // Replace an empty Object value to an empty String.\n        if (option.value && _lodash.default.isObject(option.value) && _lodash.default.isEmpty(option.value)) {\n          option.value = '';\n        } // Add element to option so we can reference it later.\n\n\n        var div = document.createElement('div');\n        div.innerHTML = this.sanitize(this.renderTemplate('selectOption', {\n          selected: _lodash.default.isEqual(this.getOptionValue(this.dataValue), option.value),\n          option: option,\n          attrs: attrs,\n          id: id,\n          useId: this.valueProperty === '' && _lodash.default.isObject(value) && id\n        }), this.shouldSanitizeValue).trim();\n        option.element = div.firstChild;\n        this.refs.selectContainer.appendChild(option.element);\n      }\n    }\n  }, {\n    key: \"addValueOptions\",\n    value: function addValueOptions(items) {\n      items = items || [];\n      var added = false;\n\n      if (!this.selectOptions.length) {\n        // Add the currently selected choices if they don't already exist.\n        var currentChoices = Array.isArray(this.dataValue) ? this.dataValue : [this.dataValue];\n        added = this.addCurrentChoices(currentChoices, items);\n\n        if (!added && !this.component.multiple) {\n          this.addPlaceholder();\n        }\n      }\n\n      return added;\n    }\n  }, {\n    key: \"disableInfiniteScroll\",\n    value: function disableInfiniteScroll() {\n      if (!this.downloadedResources) {\n        return;\n      }\n\n      this.downloadedResources.serverCount = this.downloadedResources.length;\n      this.serverCount = this.downloadedResources.length;\n    }\n    /* eslint-disable max-statements */\n\n  }, {\n    key: \"setItems\",\n    value: function setItems(items, fromSearch) {\n      var _this2 = this,\n          _this$choices,\n          _this$choices$input; // If the items is a string, then parse as JSON.\n\n\n      if (typeof items == 'string') {\n        try {\n          items = JSON.parse(items);\n        } catch (err) {\n          console.warn(err.message);\n          items = [];\n        }\n      } // Allow js processing (needed for form builder)\n\n\n      if (this.component.onSetItems && typeof this.component.onSetItems === 'function') {\n        var newItems = this.component.onSetItems(this, items);\n\n        if (newItems) {\n          items = newItems;\n        }\n      }\n\n      if (!this.choices && this.refs.selectContainer) {\n        this.empty(this.refs.selectContainer);\n      } // If they provided select values, then we need to get them instead.\n\n\n      if (this.component.selectValues) {\n        items = _lodash.default.get(items, this.component.selectValues, items) || [];\n      }\n\n      var areItemsEqual;\n\n      if (this.itemsFromUrl) {\n        areItemsEqual = this.isSelectURL ? _lodash.default.isEqual(items, this.downloadedResources) : false;\n        var areItemsEnded = this.component.limit > items.length;\n        var areItemsDownloaded = areItemsEqual && this.downloadedResources && this.downloadedResources.length === items.length;\n\n        if (areItemsEnded) {\n          this.disableInfiniteScroll();\n        } else if (areItemsDownloaded) {\n          this.selectOptions = [];\n        } else {\n          this.serverCount = items.serverCount;\n        }\n      }\n\n      if (this.isScrollLoading && items) {\n        if (!areItemsEqual) {\n          this.downloadedResources = this.downloadedResources ? this.downloadedResources.concat(items) : items;\n        }\n\n        this.downloadedResources.serverCount = items.serverCount || this.downloadedResources.serverCount;\n      } else {\n        this.downloadedResources = items || [];\n        this.selectOptions = []; // If there is new select option with same id as already selected, set the new one\n\n        if (!_lodash.default.isEmpty(this.dataValue) && this.component.idPath) {\n          var selectedOptionId = _lodash.default.get(this.dataValue, this.component.idPath, null);\n\n          var newOptionWithSameId = !_lodash.default.isNil(selectedOptionId) && items.find(function (item) {\n            var itemId = _lodash.default.get(item, _this2.component.idPath);\n\n            return itemId === selectedOptionId;\n          });\n\n          if (newOptionWithSameId) {\n            this.setValue(newOptionWithSameId);\n          }\n        }\n      } // Add the value options.\n\n\n      if (!fromSearch) {\n        this.addValueOptions(items);\n      }\n\n      if (this.component.widget === 'html5' && !this.component.placeholder) {\n        this.addOption(null, '');\n      } // Iterate through each of the items.\n\n\n      _lodash.default.each(items, function (item, index) {\n        // preventing references of the components inside the form to the parent form when building forms\n        if (_this2.root && _this2.root.options.editForm && _this2.root.options.editForm._id && _this2.root.options.editForm._id === item._id) return;\n\n        var itemValueAndLabel = _this2.selectValueAndLabel(item);\n\n        _this2.addOption(itemValueAndLabel.value, itemValueAndLabel.label, {}, _lodash.default.get(item, _this2.component.idPath, String(index)));\n      });\n\n      if (this.choices) {\n        this.choices.setChoices(this.selectOptions, 'value', 'label', true);\n      } else if (this.loading) {// Re-attach select input.\n        // this.appendTo(this.refs.input[0], this.selectContainer);\n      } // We are no longer loading.\n\n\n      this.isScrollLoading = false;\n      this.loading = false;\n      var searching = fromSearch && ((_this$choices = this.choices) === null || _this$choices === void 0 ? void 0 : (_this$choices$input = _this$choices.input) === null || _this$choices$input === void 0 ? void 0 : _this$choices$input.isFocussed);\n\n      if (!searching) {\n        // If a value is provided, then select it.\n        if (!this.isEmpty()) {\n          this.setValue(this.dataValue, {\n            noUpdateEvent: true\n          });\n        } else if (this.shouldAddDefaultValue && !this.options.readOnly) {\n          // If a default value is provided then select it.\n          var defaultValue = this.defaultValue;\n\n          if (!this.isEmpty(defaultValue)) {\n            this.setValue(defaultValue);\n          }\n        }\n      } // Say we are done loading the items.\n\n\n      this.itemsLoadedResolve();\n    }\n  }, {\n    key: \"getSingleItemValueForHTMLMode\",\n    value: function getSingleItemValueForHTMLMode(data) {\n      var _this$selectOptions;\n\n      var option = (_this$selectOptions = this.selectOptions) === null || _this$selectOptions === void 0 ? void 0 : _this$selectOptions.find(function (_ref2) {\n        var value = _ref2.value;\n        return _lodash.default.isEqual(value, data);\n      });\n\n      if (option) {\n        return option.label || data;\n      }\n\n      return data;\n    }\n  }, {\n    key: \"itemValueForHTMLMode\",\n    value: function itemValueForHTMLMode(value) {\n      var _this3 = this;\n\n      if (!this.isHtmlRenderMode()) {\n        return _get(_getPrototypeOf(SelectComponent.prototype), \"itemValueForHTMLMode\", this).call(this, value);\n      }\n\n      if (Array.isArray(value)) {\n        var values = value.map(function (item) {\n          return Array.isArray(item) ? _this3.itemValueForHTMLMode(item) : _this3.getSingleItemValueForHTMLMode(item);\n        });\n        return values.join(', ');\n      }\n\n      return this.getSingleItemValueForHTMLMode(value);\n    }\n    /* eslint-enable max-statements */\n\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      var defaultValue = _get(_getPrototypeOf(SelectComponent.prototype), \"defaultValue\", this);\n\n      if (!defaultValue && (this.component.defaultValue === false || this.component.defaultValue === 0)) {\n        defaultValue = this.component.defaultValue;\n      }\n\n      return defaultValue;\n    }\n  }, {\n    key: \"getTemplateKeys\",\n    value: function getTemplateKeys() {\n      var _this4 = this;\n\n      this.templateKeys = [];\n\n      if (this.options.readOnly && this.component.template) {\n        var keys = this.component.template.match(/({{\\s*(.*?)\\s*}})/g);\n\n        if (keys) {\n          keys.forEach(function (key) {\n            var propKey = key.match(/{{\\s*item\\.(.*?)\\s*}}/);\n\n            if (propKey && propKey.length > 1) {\n              _this4.templateKeys.push(propKey[1]);\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"loadingError\",\n    get: function get() {\n      return !this.component.refreshOn && !this.component.refreshOnBlur && this.networkError;\n    }\n  }, {\n    key: \"selectData\",\n    get: function get() {\n      var selectData = _lodash.default.get(this.root, 'submission.metadata.selectData', {});\n\n      return _lodash.default.get(selectData, this.path);\n    }\n  }, {\n    key: \"shouldLoad\",\n    get: function get() {\n      if (this.loadingError) {\n        return false;\n      } // Live forms should always load.\n\n\n      if (!this.options.readOnly || this.options.display === 'pdf' && this.options.readOnly) {\n        return true;\n      } // If there are template keys, then we need to see if we have the data.\n\n\n      if (this.templateKeys && this.templateKeys.length) {\n        // See if we already have the data we need.\n        var dataValue = this.dataValue;\n        var selectData = this.selectData;\n        return this.templateKeys.reduce(function (shouldLoad, key) {\n          var hasValue = _lodash.default.has(dataValue, key) || _lodash.default.has(selectData, key);\n\n          return shouldLoad || !hasValue;\n        }, false);\n      } // Return that we should load.\n\n\n      return true;\n    }\n  }, {\n    key: \"loadItems\",\n    value: function loadItems(url, search, headers, options, method, body) {\n      var _this5 = this;\n\n      options = options || {}; // See if we should load items or not.\n\n      if (!this.shouldLoad || !this.itemsFromUrl && this.options.readOnly) {\n        this.isScrollLoading = false;\n        this.loading = false;\n        this.itemsLoadedResolve();\n        return;\n      } // See if they have not met the minimum search requirements.\n\n\n      var minSearch = parseInt(this.component.minSearch, 10);\n\n      if (this.component.searchField && minSearch > 0 && (!search || search.length < minSearch)) {\n        // Set empty items.\n        return this.setItems([]);\n      } // Ensure we have a method and remove any body if method is get\n\n\n      method = method || 'GET';\n\n      if (method.toUpperCase() === 'GET') {\n        body = null;\n      }\n\n      var limit = this.component.limit || 100;\n      var skip = this.isScrollLoading ? this.selectOptions.length : 0;\n      var query = this.component.disableLimit ? {} : {\n        limit: limit,\n        skip: skip\n      }; // Allow for url interpolation.\n\n      url = this.interpolate(url, {\n        formioBase: _Formio.GlobalFormio.getBaseUrl(),\n        search: search,\n        limit: limit,\n        skip: skip,\n        page: Math.abs(Math.floor(skip / limit))\n      }); // Add search capability.\n\n      if (this.component.searchField && search) {\n        if (Array.isArray(search)) {\n          query[\"\".concat(this.component.searchField)] = search.join(',');\n        } else {\n          query[\"\".concat(this.component.searchField)] = search;\n        }\n      } // If they wish to return only some fields.\n\n\n      if (this.component.selectFields) {\n        query.select = this.component.selectFields;\n      } // Add sort capability\n\n\n      if (this.component.sort) {\n        query.sort = this.component.sort;\n      }\n\n      if (!_lodash.default.isEmpty(query)) {\n        // Add the query string.\n        url += (!url.includes('?') ? '?' : '&') + _Formio.GlobalFormio.serialize(query, function (item) {\n          return _this5.interpolate(item);\n        });\n      } // Add filter capability\n\n\n      if (this.component.filter) {\n        url += (!url.includes('?') ? '?' : '&') + this.interpolate(this.component.filter);\n      } // Set ignoreCache if it is\n\n\n      options.ignoreCache = this.component.ignoreCache; // Make the request.\n\n      options.header = headers;\n      this.loading = true;\n\n      _Formio.GlobalFormio.makeRequest(this.options.formio, 'select', url, method, body, options).then(function (response) {\n        _this5.loading = false;\n        _this5.error = null;\n\n        _this5.setItems(response, !!search);\n      }).catch(function (err) {\n        if (_this5.itemsFromUrl) {\n          _this5.setItems([]);\n\n          _this5.disableInfiniteScroll();\n        }\n\n        _this5.isScrollLoading = false;\n\n        _this5.handleLoadingError(err);\n      });\n    }\n  }, {\n    key: \"handleLoadingError\",\n    value: function handleLoadingError(err) {\n      this.loading = false;\n\n      if (err.networkError) {\n        this.networkError = true;\n      }\n\n      this.itemsLoadedResolve();\n      this.emit('componentError', {\n        component: this.component,\n        message: err.toString()\n      });\n      console.warn(\"Unable to load resources for \".concat(this.key));\n    }\n    /**\n     * Get the request headers for this select dropdown.\n     */\n\n  }, {\n    key: \"requestHeaders\",\n    get: function get() {\n      var _this6 = this; // Create the headers object.\n\n\n      var headers = new _Formio.GlobalFormio.Headers(); // Add custom headers to the url.\n\n      if (this.component.data && this.component.data.headers) {\n        try {\n          _lodash.default.each(this.component.data.headers, function (header) {\n            if (header.key) {\n              headers.set(header.key, _this6.interpolate(header.value));\n            }\n          });\n        } catch (err) {\n          console.warn(err.message);\n        }\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"getCustomItems\",\n    value: function getCustomItems() {\n      var customItems = this.evaluate(this.component.data.custom, {\n        values: []\n      }, 'values');\n      this.asyncValues = (0, _utils.isPromise)(customItems);\n      return customItems;\n    }\n  }, {\n    key: \"asyncCustomValues\",\n    value: function asyncCustomValues() {\n      if (!_lodash.default.isBoolean(this.asyncValues)) {\n        this.getCustomItems();\n      }\n\n      return this.asyncValues;\n    }\n  }, {\n    key: \"updateCustomItems\",\n    value: function updateCustomItems(forceUpdate) {\n      var _this7 = this;\n\n      if (this.asyncCustomValues()) {\n        if (!forceUpdate && !this.active) {\n          this.itemsLoadedResolve();\n          return;\n        }\n\n        this.loading = true;\n        this.getCustomItems().then(function (items) {\n          _this7.loading = false;\n\n          _this7.setItems(items || []);\n        }).catch(function (err) {\n          _this7.handleLoadingError(err);\n        });\n      } else {\n        this.setItems(this.getCustomItems() || []);\n      }\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dataValue;\n      return _get(_getPrototypeOf(SelectComponent.prototype), \"isEmpty\", this).call(this, value) || value === undefined;\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh(value, _ref3) {\n      var instance = _ref3.instance;\n\n      if (this.component.clearOnRefresh && instance && !instance.pristine) {\n        this.setValue(this.emptyValue);\n      }\n\n      this.updateItems(null, true);\n    }\n  }, {\n    key: \"additionalResourcesAvailable\",\n    get: function get() {\n      return _lodash.default.isNil(this.serverCount) || this.serverCount > this.downloadedResources.length;\n    }\n  }, {\n    key: \"serverCount\",\n    get: function get() {\n      if (this.isFromSearch) {\n        return this.searchServerCount;\n      }\n\n      return this.defaultServerCount;\n    },\n    set: function set(value) {\n      if (this.isFromSearch) {\n        this.searchServerCount = value;\n      } else {\n        this.defaultServerCount = value;\n      }\n    }\n  }, {\n    key: \"downloadedResources\",\n    get: function get() {\n      if (this.isFromSearch) {\n        return this.searchDownloadedResources;\n      }\n\n      return this.defaultDownloadedResources;\n    },\n    set: function set(value) {\n      if (this.isFromSearch) {\n        this.searchDownloadedResources = value;\n      } else {\n        this.defaultDownloadedResources = value;\n      }\n    }\n    /* eslint-disable max-statements */\n\n  }, {\n    key: \"updateItems\",\n    value: function updateItems(searchInput, forceUpdate) {\n      var _this8 = this;\n\n      if (!this.component.data) {\n        console.warn(\"Select component \".concat(this.key, \" does not have data configuration.\"));\n        this.itemsLoadedResolve();\n        return;\n      } // Only load the data if it is visible.\n\n\n      if (!this.visible) {\n        this.itemsLoadedResolve();\n        return;\n      }\n\n      switch (this.component.dataSrc) {\n        case 'values':\n          this.setItems(this.component.data.values);\n          break;\n\n        case 'json':\n          this.setItems(this.component.data.json);\n          break;\n\n        case 'custom':\n          this.updateCustomItems(forceUpdate);\n          break;\n\n        case 'resource':\n          {\n            // If there is no resource, or we are lazyLoading, wait until active.\n            if (!this.component.data.resource || !forceUpdate && !this.active) {\n              this.itemsLoadedResolve();\n              return;\n            }\n\n            var resourceUrl = this.options.formio ? this.options.formio.formsUrl : \"\".concat(_Formio.GlobalFormio.getProjectUrl(), \"/form\");\n            resourceUrl += \"/\".concat(this.component.data.resource, \"/submission\");\n\n            if (forceUpdate || this.additionalResourcesAvailable || !this.serverCount) {\n              try {\n                this.loadItems(resourceUrl, searchInput, this.requestHeaders);\n              } catch (err) {\n                console.warn(\"Unable to load resources for \".concat(this.key));\n              }\n            } else {\n              this.setItems(this.downloadedResources);\n            }\n\n            break;\n          }\n\n        case 'url':\n          {\n            if (!forceUpdate && !this.active && !this.calculatedValue) {\n              // If we are lazyLoading, wait until activated.\n              this.itemsLoadedResolve();\n              return;\n            }\n\n            var url = this.component.data.url;\n            var method;\n            var body;\n\n            if (url.startsWith('/')) {\n              // if URL starts with '/project', we should use base URL to avoid issues with URL formed like <base_url>/<project_name>/project/<project_id>/...\n              var baseUrl = url.startsWith('/project') ? _Formio.GlobalFormio.getBaseUrl() : _Formio.GlobalFormio.getProjectUrl() || _Formio.GlobalFormio.getBaseUrl();\n              url = baseUrl + url;\n            }\n\n            if (!this.component.data.method) {\n              method = 'GET';\n            } else {\n              method = this.component.data.method;\n\n              if (method.toUpperCase() === 'POST') {\n                body = this.component.data.body;\n              } else {\n                body = null;\n              }\n            }\n\n            var options = this.component.authenticate ? {} : {\n              noToken: true\n            };\n            this.loadItems(url, searchInput, this.requestHeaders, options, method, body);\n            break;\n          }\n\n        case 'indexeddb':\n          {\n            if (typeof window === 'undefined') {\n              return;\n            }\n\n            if (!window.indexedDB) {\n              window.alert(\"Your browser doesn't support current version of indexedDB\");\n            }\n\n            if (this.component.indexeddb && this.component.indexeddb.database && this.component.indexeddb.table) {\n              var request = window.indexedDB.open(this.component.indexeddb.database);\n\n              request.onupgradeneeded = function (event) {\n                if (_this8.component.customOptions) {\n                  var db = event.target.result;\n                  var objectStore = db.createObjectStore(_this8.component.indexeddb.table, {\n                    keyPath: 'myKey',\n                    autoIncrement: true\n                  });\n\n                  objectStore.transaction.oncomplete = function () {\n                    var transaction = db.transaction(_this8.component.indexeddb.table, 'readwrite');\n\n                    _this8.component.customOptions.forEach(function (item) {\n                      transaction.objectStore(_this8.component.indexeddb.table).put(item);\n                    });\n                  };\n                }\n              };\n\n              request.onerror = function () {\n                window.alert(request.errorCode);\n              };\n\n              request.onsuccess = function (event) {\n                var db = event.target.result;\n                var transaction = db.transaction(_this8.component.indexeddb.table, 'readwrite');\n                var objectStore = transaction.objectStore(_this8.component.indexeddb.table);\n                new _nativePromiseOnly.default(function (resolve) {\n                  var responseItems = [];\n\n                  objectStore.getAll().onsuccess = function (event) {\n                    event.target.result.forEach(function (item) {\n                      responseItems.push(item);\n                    });\n                    resolve(responseItems);\n                  };\n                }).then(function (items) {\n                  if (!_lodash.default.isEmpty(_this8.component.indexeddb.filter)) {\n                    items = _lodash.default.filter(items, _this8.component.indexeddb.filter);\n                  }\n\n                  _this8.setItems(items);\n                });\n              };\n            }\n          }\n      }\n    }\n    /* eslint-enable max-statements */\n\n  }, {\n    key: \"addPlaceholder\",\n    value: function addPlaceholder() {\n      if (!this.component.placeholder) {\n        return;\n      }\n\n      this.addOption('', this.component.placeholder, {\n        placeholder: true\n      });\n    }\n    /**\n     * Activate this select control.\n     */\n\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      if (this.loading || !this.active) {\n        this.setLoadingItem();\n      }\n\n      if (this.active) {\n        return;\n      }\n\n      this.activated = true;\n      this.triggerUpdate();\n    }\n  }, {\n    key: \"setLoadingItem\",\n    value: function setLoadingItem() {\n      var addToCurrentList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (this.choices) {\n        if (addToCurrentList) {\n          this.choices.setChoices([{\n            value: \"\".concat(this.id, \"-loading\"),\n            label: 'Loading...',\n            disabled: true\n          }], 'value', 'label');\n        } else {\n          this.choices.setChoices([{\n            value: '',\n            label: \"<i class=\\\"\".concat(this.iconClass('refresh'), \"\\\" style=\\\"font-size:1.3em;\\\"></i>\"),\n            disabled: true\n          }], 'value', 'label', true);\n        }\n      } else if (this.component.dataSrc === 'url' || this.component.dataSrc === 'resource') {\n        this.addOption('', this.t('loading...'));\n      }\n    }\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !this.component.lazyLoad || this.activated;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var info = this.inputInfo;\n      info.attr = info.attr || {};\n      info.multiple = this.component.multiple;\n      return _get(_getPrototypeOf(SelectComponent.prototype), \"render\", this).call(this, this.wrapElement(this.renderTemplate('select', {\n        input: info,\n        selectOptions: '',\n        index: null\n      })));\n    }\n  }, {\n    key: \"wrapElement\",\n    value: function wrapElement(element) {\n      return this.component.addResource && !this.options.readOnly ? this.renderTemplate('resourceAdd', {\n        element: element\n      }) : element;\n    }\n  }, {\n    key: \"choicesOptions\",\n    value: function choicesOptions() {\n      var useSearch = this.component.hasOwnProperty('searchEnabled') ? this.component.searchEnabled : true;\n      var placeholderValue = this.t(this.component.placeholder, {\n        _userInput: true\n      });\n      var customOptions = this.component.customOptions || {};\n\n      if (typeof customOptions == 'string') {\n        try {\n          customOptions = JSON.parse(customOptions);\n        } catch (err) {\n          console.warn(err.message);\n          customOptions = {};\n        }\n      }\n\n      var commonFuseOptions = {\n        maxPatternLength: 1000,\n        distance: 1000\n      };\n      return _objectSpread({\n        removeItemButton: this.component.disabled ? false : _lodash.default.get(this.component, 'removeItemButton', true),\n        itemSelectText: '',\n        classNames: {\n          containerOuter: 'choices form-group formio-choices',\n          containerInner: this.transform('class', 'form-control ui fluid selection dropdown')\n        },\n        addItemText: false,\n        placeholder: !!this.component.placeholder,\n        placeholderValue: placeholderValue,\n        noResultsText: this.t('No results found'),\n        noChoicesText: this.t('No choices to choose from'),\n        searchPlaceholderValue: this.t('Type to search'),\n        shouldSort: false,\n        position: this.component.dropdown || 'auto',\n        searchEnabled: useSearch,\n        searchChoices: !this.component.searchField,\n        searchFields: _lodash.default.get(this, 'component.searchFields', ['label']),\n        shadowRoot: this.root ? this.root.shadowRoot : null,\n        fuseOptions: this.component.useExactSearch ? _objectSpread({\n          tokenize: true,\n          matchAllTokens: true\n        }, commonFuseOptions) : Object.assign({}, _lodash.default.get(this, 'component.fuseOptions', {}), _objectSpread({\n          include: 'score',\n          threshold: _lodash.default.get(this, 'component.selectThreshold', 0.3)\n        }, commonFuseOptions)),\n        valueComparer: _lodash.default.isEqual,\n        resetScrollPosition: false\n      }, customOptions);\n    }\n    /* eslint-disable max-statements */\n\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this9 = this,\n          _this$choices2,\n          _this$choices2$contai,\n          _this$choices2$contai2;\n\n      var superAttach = _get(_getPrototypeOf(SelectComponent.prototype), \"attach\", this).call(this, element);\n\n      this.loadRefs(element, {\n        selectContainer: 'single',\n        addResource: 'single',\n        autocompleteInput: 'single'\n      }); //enable autocomplete for select\n\n      var autocompleteInput = this.refs.autocompleteInput;\n\n      if (autocompleteInput) {\n        this.addEventListener(autocompleteInput, 'change', function (event) {\n          _this9.setValue(event.target.value);\n        });\n      }\n\n      var input = this.refs.selectContainer;\n\n      if (!input) {\n        return;\n      }\n\n      this.addEventListener(input, this.inputInfo.changeEvent, function () {\n        return _this9.updateValue(null, {\n          modified: true\n        });\n      });\n      this.attachRefreshOnBlur();\n\n      if (this.component.widget === 'html5') {\n        this.triggerUpdate(null, true);\n\n        if (this.visible) {\n          this.setItems(this.selectOptions || []);\n        }\n\n        this.focusableElement = input;\n        this.addEventListener(input, 'focus', function () {\n          return _this9.update();\n        });\n        this.addEventListener(input, 'keydown', function (event) {\n          var key = event.key;\n\n          if (['Backspace', 'Delete'].includes(key)) {\n            _this9.setValue(_this9.emptyValue);\n          }\n        });\n        return;\n      }\n\n      var tabIndex = input.tabIndex;\n      this.addPlaceholder();\n      input.setAttribute('dir', this.i18next.dir());\n\n      if ((_this$choices2 = this.choices) !== null && _this$choices2 !== void 0 && (_this$choices2$contai = _this$choices2.containerOuter) !== null && _this$choices2$contai !== void 0 && (_this$choices2$contai2 = _this$choices2$contai.element) !== null && _this$choices2$contai2 !== void 0 && _this$choices2$contai2.parentNode) {\n        this.choices.destroy();\n      }\n\n      var choicesOptions = this.choicesOptions();\n\n      if (Choices) {\n        this.choices = new Choices(input, choicesOptions);\n\n        if (this.selectOptions && this.selectOptions.length) {\n          this.choices.setChoices(this.selectOptions, 'value', 'label', true);\n        }\n\n        if (this.component.multiple) {\n          this.focusableElement = this.choices.input.element;\n        } else {\n          this.focusableElement = this.choices.containerInner.element;\n          this.choices.containerOuter.element.setAttribute('tabIndex', '-1');\n\n          if (choicesOptions.searchEnabled) {\n            this.addEventListener(this.choices.containerOuter.element, 'focus', function () {\n              return _this9.focusableElement.focus();\n            });\n          }\n        }\n\n        if (this.itemsFromUrl) {\n          this.scrollList = this.choices.choiceList.element;\n          this.addEventListener(this.scrollList, 'scroll', function () {\n            return _this9.onScroll();\n          });\n        }\n      }\n\n      this.focusableElement.setAttribute('tabIndex', tabIndex); // If a search field is provided, then add an event listener to update items on search.\n\n      if (this.component.searchField) {\n        // Make sure to clear the search when no value is provided.\n        if (this.choices && this.choices.input && this.choices.input.element) {\n          this.addEventListener(this.choices.input.element, 'input', function (event) {\n            _this9.isFromSearch = !!event.target.value;\n\n            if (!event.target.value) {\n              _this9.triggerUpdate();\n            } else {\n              _this9.serverCount = null;\n              _this9.downloadedResources = [];\n            }\n          });\n        }\n\n        this.addEventListener(input, 'choice', function () {\n          if (_this9.component.multiple && _this9.component.dataSrc === 'resource' && _this9.isFromSearch) {\n            _this9.triggerUpdate();\n          }\n\n          _this9.isFromSearch = false;\n        }); // avoid spamming the resource/url endpoint when we have server side filtering enabled.\n\n        var debounceTimeout = this.component.searchField && (this.isSelectResource || this.isSelectURL) ? (this.component.searchDebounce === 0 ? 0 : this.component.searchDebounce || this.defaultSchema.searchDebounce) * 1000 : 0;\n\n        var updateComponent = function updateComponent(evt) {\n          _this9.triggerUpdate(evt.detail.value);\n        };\n\n        this.addEventListener(input, 'search', _lodash.default.debounce(updateComponent, debounceTimeout));\n        this.addEventListener(input, 'stopSearch', function () {\n          return _this9.triggerUpdate();\n        });\n        this.addEventListener(input, 'hideDropdown', function () {\n          if (_this9.choices && _this9.choices.input && _this9.choices.input.element) {\n            _this9.choices.input.element.value = '';\n          }\n\n          _this9.updateItems(null, true);\n        });\n      }\n\n      this.addEventListener(input, 'showDropdown', function () {\n        return _this9.update();\n      });\n\n      if (this.choices && choicesOptions.placeholderValue && this.choices._isSelectOneElement) {\n        this.addPlaceholderItem(choicesOptions.placeholderValue);\n        this.addEventListener(input, 'removeItem', function () {\n          _this9.addPlaceholderItem(choicesOptions.placeholderValue);\n        });\n      } // Add value options.\n\n\n      this.addValueOptions();\n      this.setChoicesValue(this.dataValue);\n\n      if (this.isSelectResource && this.refs.addResource) {\n        this.addEventListener(this.refs.addResource, 'click', function (event) {\n          event.preventDefault();\n\n          var formioForm = _this9.ce('div');\n\n          var dialog = _this9.createModal(formioForm);\n\n          var projectUrl = _lodash.default.get(_this9.root, 'formio.projectUrl', _Formio.GlobalFormio.getProjectUrl());\n\n          var formUrl = \"\".concat(projectUrl, \"/form/\").concat(_this9.component.data.resource);\n          new _Form.default(formioForm, formUrl, {}).ready.then(function (form) {\n            form.on('submit', function (submission) {\n              // If valueProperty is set, replace the submission with the corresponding value\n              var value = _this9.valueProperty ? _lodash.default.get(submission, _this9.valueProperty) : submission;\n\n              if (_this9.component.multiple) {\n                value = [].concat(_toConsumableArray(_this9.dataValue), [value]);\n              }\n\n              _this9.setValue(value);\n\n              _this9.triggerUpdate();\n\n              dialog.close();\n            });\n          });\n        });\n      } // Force the disabled state with getters and setters.\n\n\n      this.disabled = this.shouldDisabled;\n      this.triggerUpdate();\n      return superAttach;\n    }\n  }, {\n    key: \"isLoadingAvailable\",\n    get: function get() {\n      return !this.isScrollLoading && this.additionalResourcesAvailable;\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll() {\n      if (this.isLoadingAvailable) {\n        this.isScrollLoading = true;\n        this.setLoadingItem(true);\n        this.triggerUpdate(this.choices.input.element.value);\n      }\n    }\n  }, {\n    key: \"attachRefreshOnBlur\",\n    value: function attachRefreshOnBlur() {\n      var _this10 = this;\n\n      if (this.component.refreshOnBlur) {\n        this.on('blur', function (instance) {\n          _this10.checkRefreshOn([{\n            instance: instance,\n            value: instance.dataValue\n          }], {\n            fromBlur: true\n          });\n        });\n      }\n    }\n  }, {\n    key: \"addPlaceholderItem\",\n    value: function addPlaceholderItem(placeholderValue) {\n      var items = this.choices._store.activeItems;\n\n      if (!items.length) {\n        this.choices._addItem({\n          value: placeholderValue,\n          label: placeholderValue,\n          choiceId: 0,\n          groupId: -1,\n          customProperties: null,\n          placeholder: true,\n          keyCode: null\n        });\n      }\n    }\n    /* eslint-enable max-statements */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.component.dataSrc === 'custom') {\n        this.updateCustomItems();\n      } // Activate the control.\n\n\n      this.activate();\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return _get(_getPrototypeOf(SelectComponent.prototype), \"disabled\", this);\n    },\n    set: function set(disabled) {\n      _set(_getPrototypeOf(SelectComponent.prototype), \"disabled\", disabled, this, true);\n\n      if (!this.choices) {\n        return;\n      }\n\n      if (disabled) {\n        this.setDisabled(this.choices.containerInner.element, true);\n        this.focusableElement.removeAttribute('tabIndex');\n        this.choices.disable();\n      } else {\n        this.setDisabled(this.choices.containerInner.element, false);\n        this.focusableElement.setAttribute('tabIndex', this.component.tabindex || 0);\n        this.choices.enable();\n      }\n    }\n  }, {\n    key: \"visible\",\n    get: function get() {\n      return _get(_getPrototypeOf(SelectComponent.prototype), \"visible\", this);\n    }\n    /**\n     * @param {*} value\n     * @param {Array} items\n     */\n    ,\n    set: function set(value) {\n      // If we go from hidden to visible, trigger a refresh.\n      if (value && !this._visible !== !value) {\n        this.triggerUpdate();\n      }\n\n      _set(_getPrototypeOf(SelectComponent.prototype), \"visible\", value, this, true);\n    }\n  }, {\n    key: \"addCurrentChoices\",\n    value: function addCurrentChoices(values, items, keyValue) {\n      var _this11 = this;\n\n      if (!values) {\n        return false;\n      }\n\n      var notFoundValuesToAdd = [];\n      var added = values.reduce(function (defaultAdded, value) {\n        if (!value || _lodash.default.isEmpty(value)) {\n          return defaultAdded;\n        }\n\n        var found = false; // Make sure that `items` and `this.selectOptions` points\n        // to the same reference. Because `this.selectOptions` is\n        // internal property and all items are populated by\n        // `this.addOption` method, we assume that items has\n        // 'label' and 'value' properties. This assumption allows\n        // us to read correct value from the item.\n\n        var isSelectOptions = items === _this11.selectOptions;\n\n        if (items && items.length) {\n          _lodash.default.each(items, function (choice) {\n            if (choice._id && value._id && choice._id === value._id) {\n              found = true;\n              return false;\n            }\n\n            var itemValue = keyValue ? choice.value : _this11.itemValue(choice, isSelectOptions);\n            found |= _lodash.default.isEqual(itemValue, value);\n            return found ? false : true;\n          });\n        } // Add the default option if no item is found.\n\n\n        if (!found) {\n          notFoundValuesToAdd.push(_this11.selectValueAndLabel(value));\n          return true;\n        }\n\n        return found || defaultAdded;\n      }, false);\n\n      if (notFoundValuesToAdd.length) {\n        if (this.choices) {\n          this.choices.setChoices(notFoundValuesToAdd, 'value', 'label');\n        }\n\n        notFoundValuesToAdd.map(function (notFoundValue) {\n          _this11.addOption(notFoundValue.value, notFoundValue.label);\n        });\n      }\n\n      return added;\n    }\n  }, {\n    key: \"getValueAsString\",\n    value: function getValueAsString(data) {\n      return this.component.multiple && Array.isArray(data) ? data.map(this.asString.bind(this)).join(', ') : this.asString(data);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      // If the widget isn't active.\n      if (this.viewOnly || this.loading || !this.component.lazyLoad && !this.selectOptions.length || !this.element) {\n        return this.dataValue;\n      }\n\n      var value = this.emptyValue;\n\n      if (this.choices) {\n        value = this.choices.getValue(true); // Make sure we don't get the placeholder\n\n        if (!this.component.multiple && this.component.placeholder && value === this.t(this.component.placeholder, {\n          _userInput: true\n        })) {\n          value = this.emptyValue;\n        }\n      } else if (this.refs.selectContainer) {\n        value = this.refs.selectContainer.value;\n\n        if (this.valueProperty === '') {\n          if (value === '') {\n            return {};\n          }\n\n          var option = this.selectOptions[value];\n\n          if (option && _lodash.default.isObject(option.value)) {\n            value = option.value;\n          }\n        }\n      } else {\n        value = this.dataValue;\n      } // Choices will return undefined if nothing is selected. We really want '' to be empty.\n\n\n      if (value === undefined || value === null) {\n        value = '';\n      }\n\n      return value;\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      var done = _get(_getPrototypeOf(SelectComponent.prototype), \"redraw\", this).call(this);\n\n      this.triggerUpdate();\n      return done;\n    }\n  }, {\n    key: \"normalizeSingleValue\",\n    value: function normalizeSingleValue(value, retainObject) {\n      var _this$root;\n\n      if (_lodash.default.isNil(value)) {\n        return;\n      }\n\n      var valueIsObject = _lodash.default.isObject(value); //check if value equals to default emptyValue\n\n\n      if (valueIsObject && Object.keys(value).length === 0) {\n        return value;\n      } // Check to see if we need to save off the template data into our metadata.\n\n\n      if (value && !valueIsObject && this.templateData[value] && (_this$root = this.root) !== null && _this$root !== void 0 && _this$root.submission) {\n        var submission = this.root.submission;\n\n        if (!submission.metadata) {\n          submission.metadata = {};\n        }\n\n        if (!submission.metadata.selectData) {\n          submission.metadata.selectData = {};\n        }\n\n        _lodash.default.set(submission.metadata.selectData, this.path, this.templateData[value]);\n      }\n\n      var displayEntireObject = this.isEntireObjectDisplay();\n      var dataType = this.component.dataType || 'auto';\n      var normalize = {\n        value: value,\n        number: function number() {\n          var numberValue = Number(this.value);\n          var isEquivalent = value.toString() === numberValue.toString();\n\n          if (!Number.isNaN(numberValue) && Number.isFinite(numberValue) && value !== '' && isEquivalent) {\n            this.value = numberValue;\n          }\n\n          return this;\n        },\n        boolean: function boolean() {\n          if (_lodash.default.isString(this.value) && (this.value.toLowerCase() === 'true' || this.value.toLowerCase() === 'false')) {\n            this.value = this.value.toLowerCase() === 'true';\n          }\n\n          return this;\n        },\n        string: function string() {\n          this.value = String(this.value);\n          return this;\n        },\n        object: function object() {\n          if (_lodash.default.isObject(this.value) && displayEntireObject && !retainObject) {\n            this.value = JSON.stringify(this.value);\n          }\n\n          return this;\n        },\n        auto: function auto() {\n          if (_lodash.default.isObject(this.value)) {\n            this.value = this.object().value;\n          } else {\n            this.value = this.string().number().boolean().value;\n          }\n\n          return this;\n        }\n      };\n\n      try {\n        return normalize[dataType]().value;\n      } catch (err) {\n        console.warn('Failed to normalize value', err);\n        return value;\n      }\n    }\n    /**\n     * Normalize values coming into updateValue.\n     *\n     * @param value\n     * @return {*}\n     */\n\n  }, {\n    key: \"normalizeValue\",\n    value: function normalizeValue(value) {\n      var _this12 = this;\n\n      if (this.component.multiple && Array.isArray(value)) {\n        return value.map(function (singleValue) {\n          return _this12.normalizeSingleValue(singleValue, true);\n        });\n      }\n\n      return _get(_getPrototypeOf(SelectComponent.prototype), \"normalizeValue\", this).call(this, this.normalizeSingleValue(value, true));\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var _this13 = this;\n\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var previousValue = this.dataValue;\n\n      if (this.component.widget === 'html5' && (_lodash.default.isEqual(value, previousValue) || _lodash.default.isEqual(previousValue, {}) && _lodash.default.isEqual(flags, {}))) {\n        return false;\n      }\n\n      var changed = this.updateValue(value, flags);\n      value = this.dataValue;\n      var hasPreviousValue = !this.isEmpty(previousValue);\n      var hasValue = !this.isEmpty(value); // Undo typing when searching to set the value.\n\n      if (this.component.multiple && Array.isArray(value)) {\n        value = value.map(function (value) {\n          if (typeof value === 'boolean' || typeof value === 'number') {\n            return value.toString();\n          }\n\n          return value;\n        });\n      } else {\n        if (typeof value === 'boolean' || typeof value === 'number') {\n          value = value.toString();\n        }\n      }\n\n      if (this.isHtmlRenderMode() && flags && flags.fromSubmission && changed) {\n        this.itemsLoaded.then(function () {\n          _this13.redraw();\n        });\n        return changed;\n      } // Do not set the value if we are loading... that will happen after it is done.\n\n\n      if (this.loading) {\n        return changed;\n      } // Determine if we need to perform an initial lazyLoad api call if searchField is provided.\n\n\n      if (this.isInitApiCallNeeded(hasValue)) {\n        this.loading = true;\n        this.lazyLoadInit = true;\n        var searchProperty = this.component.searchField || this.component.valueProperty;\n        this.triggerUpdate(_lodash.default.get(value.data || value, searchProperty, value), true);\n        return changed;\n      } // Add the value options.\n\n\n      this.itemsLoaded.then(function () {\n        _this13.addValueOptions();\n\n        _this13.setChoicesValue(value, hasPreviousValue, flags);\n      });\n      return changed;\n    }\n  }, {\n    key: \"isInitApiCallNeeded\",\n    value: function isInitApiCallNeeded(hasValue) {\n      return this.component.lazyLoad && !this.lazyLoadInit && !this.active && !this.selectOptions.length && hasValue && this.shouldLoad && this.visible && (this.component.searchField || this.component.valueProperty);\n    }\n  }, {\n    key: \"setChoicesValue\",\n    value: function setChoicesValue(value, hasPreviousValue) {\n      var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var hasValue = !this.isEmpty(value) || flags.fromSubmission;\n      hasPreviousValue = hasPreviousValue === undefined ? true : hasPreviousValue;\n\n      if (this.choices) {\n        // Now set the value.\n        if (hasValue) {\n          this.choices.removeActiveItems(); // Add the currently selected choices if they don't already exist.\n\n          var currentChoices = Array.isArray(value) ? value : [value];\n\n          if (!this.addCurrentChoices(currentChoices, this.selectOptions, true)) {\n            this.choices.setChoices(this.selectOptions, 'value', 'label', true);\n          }\n\n          this.choices.setChoiceByValue(value);\n        } else if (hasPreviousValue || flags.resetValue) {\n          this.choices.removeActiveItems();\n        }\n      } else {\n        if (hasValue) {\n          var values = Array.isArray(value) ? value : [value];\n\n          if (!_lodash.default.isEqual(this.dataValue, this.defaultValue) && this.selectOptions.length < 2) {\n            var _this$selectValueAndL = this.selectValueAndLabel(this.dataValue),\n                _value2 = _this$selectValueAndL.value,\n                label = _this$selectValueAndL.label;\n\n            this.addOption(_value2, label);\n          }\n\n          _lodash.default.each(this.selectOptions, function (selectOption) {\n            _lodash.default.each(values, function (val) {\n              if (selectOption.value === '') {\n                selectOption.value = {};\n              }\n\n              if (_lodash.default.isEqual(val, selectOption.value) && selectOption.element) {\n                selectOption.element.selected = true;\n                selectOption.element.setAttribute('selected', 'selected');\n                return false;\n              }\n            });\n          });\n        } else {\n          _lodash.default.each(this.selectOptions, function (selectOption) {\n            if (selectOption.element) {\n              selectOption.element.selected = false;\n              selectOption.element.removeAttribute('selected');\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"itemsLoaded\",\n    get: function get() {\n      return this._itemsLoaded || _nativePromiseOnly.default.resolve();\n    },\n    set: function set(promise) {\n      this._itemsLoaded = promise;\n    }\n  }, {\n    key: \"validateValueAvailability\",\n    value: function validateValueAvailability(setting, value) {\n      var _this14 = this;\n\n      if (!(0, _utils.boolValue)(setting) || !value) {\n        return true;\n      }\n\n      var values = this.getOptionsValues();\n\n      if (values) {\n        if (_lodash.default.isObject(value)) {\n          var compareComplexValues = function compareComplexValues(optionValue) {\n            var normalizedOptionValue = _this14.normalizeSingleValue(optionValue, true);\n\n            if (!_lodash.default.isObject(normalizedOptionValue)) {\n              return false;\n            }\n\n            try {\n              return JSON.stringify(normalizedOptionValue) === JSON.stringify(value);\n            } catch (err) {\n              console.warn.error('Error while comparing items', err);\n              return false;\n            }\n          };\n\n          return values.findIndex(function (optionValue) {\n            return compareComplexValues(optionValue);\n          }) !== -1;\n        }\n\n        return values.findIndex(function (optionValue) {\n          return _this14.normalizeSingleValue(optionValue) === value;\n        }) !== -1;\n      }\n\n      return false;\n    }\n    /**\n     * Performs required transformations on the initial value to use in selectOptions\n     * @param {*} value\n     */\n\n  }, {\n    key: \"getOptionValue\",\n    value: function getOptionValue(value) {\n      return _lodash.default.isObject(value) && this.isEntireObjectDisplay() ? this.normalizeSingleValue(value) : _lodash.default.isObject(value) && (this.valueProperty || this.component.key !== 'resource') ? value : _lodash.default.isObject(value) && !this.valueProperty ? this.interpolate(this.component.template, {\n        item: value\n      }).replace(/<\\/?[^>]+(>|$)/g, '') : _lodash.default.isNull(value) ? this.emptyValue : String(this.normalizeSingleValue(value));\n    }\n    /**\n     * If component has static values (values, json) or custom values, returns an array of them\n     * @returns {Array<*>|undefined}\n     */\n\n  }, {\n    key: \"getOptionsValues\",\n    value: function getOptionsValues() {\n      var _this15 = this;\n\n      var rawItems = [];\n\n      switch (this.component.dataSrc) {\n        case 'values':\n          rawItems = this.component.data.values;\n          break;\n\n        case 'json':\n          rawItems = this.component.data.json;\n          break;\n\n        case 'custom':\n          rawItems = this.getCustomItems();\n          break;\n      }\n\n      if (typeof rawItems === 'string') {\n        try {\n          rawItems = JSON.parse(rawItems);\n        } catch (err) {\n          console.warn(err.message);\n          rawItems = [];\n        }\n      }\n\n      if (!Array.isArray(rawItems)) {\n        return;\n      }\n\n      return rawItems.map(function (item) {\n        return _this15.getOptionValue(_this15.itemValue(item));\n      });\n    }\n    /**\n     * Deletes the value of the component.\n     */\n\n  }, {\n    key: \"deleteValue\",\n    value: function deleteValue() {\n      this.setValue('', {\n        noUpdateEvent: true\n      });\n      this.unset();\n    }\n    /**\n     * Check if a component is eligible for multiple validation\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"validateMultiple\",\n    value: function validateMultiple() {\n      // Select component will contain one input when flagged as multiple.\n      return false;\n    }\n    /**\n     * Output this select dropdown as a string value.\n     * @return {*}\n     */\n\n  }, {\n    key: \"isBooleanOrNumber\",\n    value: function isBooleanOrNumber(value) {\n      return typeof value === 'number' || typeof value === 'boolean';\n    }\n  }, {\n    key: \"getNormalizedValues\",\n    value: function getNormalizedValues() {\n      var _this16 = this;\n\n      if (!this.component || !this.component.data || !this.component.data.values) {\n        return;\n      }\n\n      return this.component.data.values.map(function (value) {\n        return {\n          label: value.label,\n          value: String(_this16.normalizeSingleValue(value.value))\n        };\n      });\n    }\n  }, {\n    key: \"asString\",\n    value: function asString(value) {\n      var _value3,\n          _this17 = this;\n\n      value = (_value3 = value) !== null && _value3 !== void 0 ? _value3 : this.getValue(); //need to convert values to strings to be able to compare values with available options that are strings\n\n      var convertToString = function convertToString(data, valueProperty) {\n        if (valueProperty) {\n          if (Array.isArray(data)) {\n            data.forEach(function (item) {\n              return item[valueProperty] = item[valueProperty].toString();\n            });\n          } else {\n            data[valueProperty] = data[valueProperty].toString();\n          }\n\n          return data;\n        }\n\n        if (_this17.isBooleanOrNumber(data)) {\n          data = data.toString();\n        }\n\n        if (Array.isArray(data) && data.some(function (item) {\n          return _this17.isBooleanOrNumber(item);\n        })) {\n          data = data.map(function (item) {\n            if (_this17.isBooleanOrNumber(item)) {\n              item = item.toString();\n            }\n          });\n        }\n\n        return data;\n      };\n\n      value = convertToString(value);\n\n      if (['values', 'custom'].includes(this.component.dataSrc) && !this.asyncCustomValues()) {\n        var _getFromValues;\n\n        var _ref4 = this.component.dataSrc === 'values' ? {\n          items: convertToString(this.getNormalizedValues(), 'value'),\n          valueProperty: 'value'\n        } : {\n          items: convertToString(this.getCustomItems(), this.valueProperty),\n          valueProperty: this.valueProperty\n        },\n            items = _ref4.items,\n            valueProperty = _ref4.valueProperty;\n\n        var getFromValues = function getFromValues() {\n          var initialValue = _lodash.default.find(items, [valueProperty, value]);\n\n          var values = _this17.defaultSchema.data.values || [];\n          return _lodash.default.isEqual(initialValue, values[0]) ? '-' : initialValue;\n        };\n\n        value = this.component.multiple && Array.isArray(value) ? _lodash.default.filter(items, function (item) {\n          return value.includes(item.value);\n        }) : valueProperty ? (_getFromValues = getFromValues()) !== null && _getFromValues !== void 0 ? _getFromValues : {\n          value: value,\n          label: value\n        } : value;\n      }\n\n      if (_lodash.default.isString(value)) {\n        return value;\n      }\n\n      if (Array.isArray(value)) {\n        var _items = [];\n        value.forEach(function (item) {\n          return _items.push(_this17.itemTemplate(item));\n        });\n        return _items.length > 0 ? _items.join('<br />') : '-';\n      }\n\n      return !_lodash.default.isNil(value) ? this.itemTemplate(value) : '-';\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      _get(_getPrototypeOf(SelectComponent.prototype), \"detach\", this).call(this);\n\n      if (this.choices) {\n        var _this$choices$contain, _this$choices$contain2;\n\n        if ((_this$choices$contain = this.choices.containerOuter) !== null && _this$choices$contain !== void 0 && (_this$choices$contain2 = _this$choices$contain.element) !== null && _this$choices$contain2 !== void 0 && _this$choices$contain2.parentNode) {\n          this.choices.destroy();\n        }\n\n        this.choices = null;\n      }\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (this.focusableElement) {\n        _get(_getPrototypeOf(SelectComponent.prototype), \"focus\", this).call(this);\n\n        this.focusableElement.focus();\n      }\n    }\n  }, {\n    key: \"setErrorClasses\",\n    value: function setErrorClasses(elements, dirty, hasError, hasMessages) {\n      var element = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.element;\n\n      _get(_getPrototypeOf(SelectComponent.prototype), \"setErrorClasses\", this).call(this, elements, dirty, hasError, hasMessages, element);\n\n      if (this.choices) {\n        _get(_getPrototypeOf(SelectComponent.prototype), \"setErrorClasses\", this).call(this, [this.choices.containerInner.element], dirty, hasError, hasMessages, element);\n      } else {\n        _get(_getPrototypeOf(SelectComponent.prototype), \"setErrorClasses\", this).call(this, [this.refs.selectContainer], dirty, hasError, hasMessages, element);\n      }\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len3 = arguments.length, extend = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        extend[_key3] = arguments[_key3];\n      }\n\n      return _Field2.default.schema.apply(_Field2.default, [{\n        type: 'select',\n        label: 'Select',\n        key: 'select',\n        idPath: 'id',\n        data: {\n          values: [{\n            label: '',\n            value: ''\n          }],\n          json: '',\n          url: '',\n          resource: '',\n          custom: ''\n        },\n        clearOnRefresh: false,\n        limit: 100,\n        dataSrc: 'values',\n        valueProperty: '',\n        lazyLoad: true,\n        filter: '',\n        searchEnabled: true,\n        searchDebounce: 0.3,\n        searchField: '',\n        minSearch: 0,\n        readOnlyValue: false,\n        authenticate: false,\n        ignoreCache: false,\n        template: '<span>{{ item.label }}</span>',\n        selectFields: '',\n        selectThreshold: 0.3,\n        uniqueOptions: false,\n        tableView: true,\n        fuseOptions: {\n          include: 'score',\n          threshold: 0.3\n        },\n        validate: {\n          onlyAvailableItems: false\n        },\n        indexeddb: {\n          filter: {}\n        },\n        customOptions: {},\n        useExactSearch: false\n      }].concat(extend));\n    }\n  }, {\n    key: \"builderInfo\",\n    get: function get() {\n      return {\n        title: 'Select',\n        group: 'basic',\n        icon: 'th-list',\n        weight: 70,\n        documentation: '/userguide/#select',\n        schema: SelectComponent.schema()\n      };\n    }\n  }]);\n\n  return SelectComponent;\n}(_Field2.default);\n\nexports.default = SelectComponent;","map":null,"metadata":{},"sourceType":"script"}