{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.object.assign\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.string.includes\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.split\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _compareVersions = _interopRequireDefault(require(\"compare-versions\"));\n\nvar _EventEmitter = _interopRequireDefault(require(\"./EventEmitter\"));\n\nvar _i18next = _interopRequireDefault(require(\"i18next\"));\n\nvar _i18n = _interopRequireDefault(require(\"./i18n\"));\n\nvar _Formio = require(\"./Formio\");\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _Components = _interopRequireDefault(require(\"./components/Components\"));\n\nvar _NestedDataComponent2 = _interopRequireDefault(require(\"./components/_classes/nesteddata/NestedDataComponent\"));\n\nvar _utils = require(\"./utils/utils\");\n\nvar _formUtils = require(\"./utils/formUtils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // Initialize the available forms.\n\n\n_Formio.GlobalFormio.forms = {}; // Allow people to register components.\n\n_Formio.GlobalFormio.registerComponent = _Components.default.setComponent;\n\nfunction getIconSet(icons) {\n  if (icons === 'fontawesome') {\n    return 'fa';\n  }\n\n  return icons || '';\n}\n\nfunction getOptions(options) {\n  options = _lodash.default.defaults(options, {\n    submitOnEnter: false,\n    iconset: getIconSet(options && options.icons ? options.icons : _Formio.GlobalFormio.icons),\n    i18next: _i18next.default,\n    saveDraft: false,\n    alwaysDirty: false,\n    saveDraftThrottle: 5000,\n    display: 'form'\n  });\n\n  if (!options.events) {\n    options.events = new _EventEmitter.default();\n  }\n\n  return options;\n}\n/**\n * Renders a Form.io form within the webpage.\n */\n\n\nvar Webform = /*#__PURE__*/function (_NestedDataComponent) {\n  _inherits(Webform, _NestedDataComponent);\n\n  var _super = _createSuper(Webform);\n  /**\n   * Creates a new Form instance.\n   *\n   * @param {Object} options - The options to create a new form instance.\n   * @param {boolean} options.saveDraft - Set this if you would like to enable the save draft feature.\n   * @param {boolean} options.saveDraftThrottle - The throttle for the save draft feature.\n   * @param {boolean} options.readOnly - Set this form to readOnly\n   * @param {boolean} options.noAlerts - Set to true to disable the alerts dialog.\n   * @param {boolean} options.i18n - The translation file for this rendering. @see https://github.com/formio/formio.js/blob/master/i18n.js\n   * @param {boolean} options.template - Provides a way to inject custom logic into the creation of every element rendered within the form.\n   */\n\n  /* eslint-disable max-statements */\n\n\n  function Webform() {\n    var _this2;\n\n    _classCallCheck(this, Webform);\n\n    var element, options;\n\n    if (arguments[0] instanceof HTMLElement || arguments[1]) {\n      element = arguments[0];\n      options = arguments[1];\n    } else {\n      options = arguments[0];\n    }\n\n    _this2 = _super.call(this, null, getOptions(options));\n\n    _defineProperty(_assertThisInitialized(_this2), \"executeShortcuts\", function (event) {\n      var target = event.target;\n\n      if (!_this2.keyboardCatchableElement(target)) {\n        return;\n      }\n\n      var ctrl = event.ctrlKey || event.metaKey;\n      var keyCode = event.keyCode;\n      var char = '';\n\n      if (65 <= keyCode && keyCode <= 90) {\n        char = String.fromCharCode(keyCode);\n      } else if (keyCode === 13) {\n        char = 'Enter';\n      } else if (keyCode === 27) {\n        char = 'Esc';\n      }\n\n      _lodash.default.each(_this2.shortcuts, function (shortcut) {\n        if (shortcut.ctrl && !ctrl) {\n          return;\n        }\n\n        if (shortcut.shortcut === char) {\n          shortcut.element.click();\n          event.preventDefault();\n        }\n      });\n    });\n\n    _this2.element = element; // Keep track of all available forms globally.\n\n    _Formio.GlobalFormio.forms[_this2.id] = _assertThisInitialized(_this2); // Set the base url.\n\n    if (_this2.options.baseUrl) {\n      _Formio.GlobalFormio.setBaseUrl(_this2.options.baseUrl);\n    }\n    /**\n     * The i18n configuration for this component.\n     */\n\n\n    var i18n = _i18n.default;\n\n    if (options && options.i18n && !options.i18nReady) {\n      // Support legacy way of doing translations.\n      if (options.i18n.resources) {\n        i18n = options.i18n;\n      } else {\n        _lodash.default.each(options.i18n, function (lang, code) {\n          if (code === 'options') {\n            _lodash.default.merge(i18n, lang);\n          } else if (!i18n.resources[code]) {\n            // extend the default translations (validations, buttons etc.) in case they are not in the options.\n            i18n.resources[code] = {\n              translation: _lodash.default.assign((0, _utils.fastCloneDeep)(_i18n.default.resources.en.translation), lang)\n            };\n          } else {\n            _lodash.default.assign(i18n.resources[code].translation, lang);\n          }\n        });\n      }\n\n      options.i18n = i18n;\n      options.i18nReady = true;\n    }\n\n    if (options && options.i18n) {\n      _this2.options.i18n = options.i18n;\n    } else {\n      _this2.options.i18n = i18n;\n    } // Set the language.\n\n\n    if (_this2.options.language) {\n      _this2.options.i18n.lng = _this2.options.language;\n    }\n    /**\n     * The type of this element.\n     * @type {string}\n     */\n\n\n    _this2.type = 'form';\n    _this2._src = '';\n    _this2._loading = false;\n    _this2._form = {};\n    _this2.draftEnabled = false;\n    _this2.savingDraft = true;\n\n    if (_this2.options.saveDraftThrottle) {\n      _this2.triggerSaveDraft = _lodash.default.throttle(_this2.saveDraft.bind(_assertThisInitialized(_this2)), _this2.options.saveDraftThrottle);\n    } else {\n      _this2.triggerSaveDraft = _this2.saveDraft.bind(_assertThisInitialized(_this2));\n    }\n\n    _this2.customErrors = [];\n    /**\n     * Determines if this form should submit the API on submit.\n     * @type {boolean}\n     */\n\n    _this2.nosubmit = false;\n    /**\n     * Determines if the form has tried to be submitted, error or not.\n     *\n     * @type {boolean}\n     */\n\n    _this2.submitted = false;\n    /**\n     * Determines if the form is being submitted at the moment.\n     *\n     * @type {boolean}\n     */\n\n    _this2.submitting = false;\n    /**\n     * The Formio instance for this form.\n     * @type {Formio}\n     */\n\n    _this2.formio = null;\n    /**\n     * The loader HTML element.\n     * @type {HTMLElement}\n     */\n\n    _this2.loader = null;\n    /**\n     * The alert HTML element\n     * @type {HTMLElement}\n     */\n\n    _this2.alert = null;\n    /**\n     * Promise that is triggered when the submission is done loading.\n     * @type {Promise}\n     */\n\n    _this2.onSubmission = null;\n    /**\n     * Determines if this submission is explicitly set.\n     * @type {boolean}\n     */\n\n    _this2.submissionSet = false;\n    /**\n     * Promise that executes when the form is ready and rendered.\n     * @type {Promise}\n     *\n     * @example\n     * import Webform from 'formiojs/Webform';\n     * let form = new Webform(document.getElementById('formio'));\n     * form.formReady.then(() => {\n     *   console.log('The form is ready!');\n     * });\n     * form.src = 'https://examples.form.io/example';\n     */\n\n    _this2.formReady = new _nativePromiseOnly.default(function (resolve, reject) {\n      /**\n       * Called when the formReady state of this form has been resolved.\n       *\n       * @type {function}\n       */\n      _this2.formReadyResolve = resolve;\n      /**\n       * Called when this form could not load and is rejected.\n       *\n       * @type {function}\n       */\n\n      _this2.formReadyReject = reject;\n    });\n    /**\n     * Promise that executes when the submission is ready and rendered.\n     * @type {Promise}\n     *\n     * @example\n     * import Webform from 'formiojs/Webform';\n     * let form = new Webform(document.getElementById('formio'));\n     * form.submissionReady.then(() => {\n     *   console.log('The submission is ready!');\n     * });\n     * form.src = 'https://examples.form.io/example/submission/234234234234234243';\n     */\n\n    _this2.submissionReady = new _nativePromiseOnly.default(function (resolve, reject) {\n      /**\n       * Called when the formReady state of this form has been resolved.\n       *\n       * @type {function}\n       */\n      _this2.submissionReadyResolve = resolve;\n      /**\n       * Called when this form could not load and is rejected.\n       *\n       * @type {function}\n       */\n\n      _this2.submissionReadyReject = reject;\n    });\n    _this2.shortcuts = []; // Set language after everything is established.\n\n    _this2.localize().then(function () {\n      _this2.language = _this2.options.language;\n    }); // See if we need to restore the draft from a user.\n\n\n    if (_this2.options.saveDraft && !_this2.options.skipDraftRestore) {\n      var user = _Formio.GlobalFormio.getUser(); // Only restore a draft if the submission isn't explicitly set.\n\n\n      if (user && !_this2.submissionSet) {\n        _this2.restoreDraft(user._id);\n      }\n    }\n\n    _this2.component.clearOnHide = false; // Ensure the root is set to this component.\n\n    _this2.root = _assertThisInitialized(_this2);\n    _this2.localRoot = _assertThisInitialized(_this2);\n    return _this2;\n  }\n  /* eslint-enable max-statements */\n\n\n  _createClass(Webform, [{\n    key: \"language\",\n    get: function get() {\n      return this.options.language;\n    }\n    /**\n     * Sets the language for this form.\n     *\n     * @param lang\n     * @return {Promise}\n     */\n    ,\n    set: function set(lang) {\n      var _this3 = this;\n\n      this.options.language = lang;\n\n      if (this.i18next.language === lang) {\n        return;\n      }\n\n      try {\n        this.i18next.changeLanguage(lang, function (err) {\n          if (err) {\n            return;\n          }\n\n          _this3.redraw();\n\n          _this3.emit('languageChanged');\n        });\n      } catch (err) {\n        return;\n      }\n    }\n  }, {\n    key: \"componentComponents\",\n    get: function get() {\n      return this.form.components;\n    }\n  }, {\n    key: \"shadowRoot\",\n    get: function get() {\n      return this.options.shadowRoot;\n    }\n    /**\n     * Add a language for translations\n     *\n     * @param code\n     * @param lang\n     * @param active\n     * @return {*}\n     */\n\n  }, {\n    key: \"addLanguage\",\n    value: function addLanguage(code, lang) {\n      var active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      var translations = _lodash.default.assign((0, _utils.fastCloneDeep)(_i18n.default.resources.en.translation), lang);\n\n      this.i18next.addResourceBundle(code, 'translation', translations, true, true);\n\n      if (active) {\n        this.language = code;\n      }\n    }\n    /**\n     * Perform the localization initialization.\n     * @returns {*}\n     */\n\n  }, {\n    key: \"localize\",\n    value: function localize() {\n      var _this4 = this;\n\n      if (this.i18next.initialized) {\n        return _nativePromiseOnly.default.resolve(this.i18next);\n      }\n\n      this.i18next.initialized = true;\n      return new _nativePromiseOnly.default(function (resolve, reject) {\n        try {\n          _this4.i18next.init(_objectSpread(_objectSpread({}, _this4.options.i18n), {\n            compatibilityJSON: 'v3'\n          }), function (err) {\n            // Get language but remove any ;q=1 that might exist on it.\n            _this4.options.language = _this4.i18next.language.split(';')[0];\n\n            if (err) {\n              return reject(err);\n            }\n\n            resolve(_this4.i18next);\n          });\n        } catch (err) {\n          return reject(err);\n        }\n      });\n    }\n  }, {\n    key: \"keyboardCatchableElement\",\n    value: function keyboardCatchableElement(element) {\n      if (element.nodeName === 'TEXTAREA') {\n        return false;\n      }\n\n      if (element.nodeName === 'INPUT') {\n        return ['text', 'email', 'password'].indexOf(element.type) === -1;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"addShortcut\",\n    value: function addShortcut(element, shortcut) {\n      if (!shortcut || !/^([A-Z]|Enter|Esc)$/i.test(shortcut)) {\n        return;\n      }\n\n      shortcut = _lodash.default.capitalize(shortcut);\n\n      if (shortcut === 'Enter' || shortcut === 'Esc') {\n        // Restrict Enter and Esc only for buttons\n        if (element.tagName !== 'BUTTON') {\n          return;\n        }\n\n        this.shortcuts.push({\n          shortcut: shortcut,\n          element: element\n        });\n      } else {\n        this.shortcuts.push({\n          ctrl: true,\n          shortcut: shortcut,\n          element: element\n        });\n      }\n    }\n  }, {\n    key: \"removeShortcut\",\n    value: function removeShortcut(element, shortcut) {\n      if (!shortcut || !/^([A-Z]|Enter|Esc)$/i.test(shortcut)) {\n        return;\n      }\n\n      _lodash.default.remove(this.shortcuts, {\n        shortcut: shortcut,\n        element: element\n      });\n    }\n    /**\n     * Get the embed source of the form.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"src\",\n    get: function get() {\n      return this._src;\n    }\n    /**\n     * Loads the submission if applicable.\n     */\n    ,\n    set:\n    /**\n     * Set the Form source, which is typically the Form.io embed URL.\n     *\n     * @param {string} value - The value of the form embed url.\n     *\n     * @example\n     * import Webform from 'formiojs/Webform';\n     * let form = new Webform(document.getElementById('formio'));\n     * form.formReady.then(() => {\n     *   console.log('The form is formReady!');\n     * });\n     * form.src = 'https://examples.form.io/example';\n     */\n    function set(value) {\n      this.setSrc(value);\n    }\n    /**\n     * Get the embed source of the form.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"loadSubmission\",\n    value: function loadSubmission() {\n      var _this5 = this;\n\n      this.loadingSubmission = true;\n\n      if (this.formio.submissionId) {\n        this.onSubmission = this.formio.loadSubmission().then(function (submission) {\n          return _this5.setSubmission(submission);\n        }, function (err) {\n          return _this5.submissionReadyReject(err);\n        }).catch(function (err) {\n          return _this5.submissionReadyReject(err);\n        });\n      } else {\n        this.submissionReadyResolve();\n      }\n\n      return this.submissionReady;\n    }\n    /**\n     * Set the src of the form renderer.\n     *\n     * @param value\n     * @param options\n     */\n\n  }, {\n    key: \"setSrc\",\n    value: function setSrc(value, options) {\n      var _this6 = this;\n\n      if (this.setUrl(value, options)) {\n        this.nosubmit = false;\n        return this.formio.loadForm({\n          params: {\n            live: 1\n          }\n        }).then(function (form) {\n          var setForm = _this6.setForm(form);\n\n          _this6.loadSubmission();\n\n          return setForm;\n        }).catch(function (err) {\n          console.warn(err);\n\n          _this6.formReadyReject(err);\n        });\n      }\n\n      return _nativePromiseOnly.default.resolve();\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return this._src;\n    }\n    /**\n     * Sets the url of the form renderer.\n     *\n     * @param value\n     * @param options\n     */\n    ,\n    set:\n    /**\n     * Set the form source but don't initialize the form and submission from the url.\n     *\n     * @param {string} value - The value of the form embed url.\n     */\n    function set(value) {\n      this.setUrl(value);\n    }\n    /**\n     * Called when both the form and submission have been loaded.\n     *\n     * @returns {Promise} - The promise to trigger when both form and submission have loaded.\n     */\n\n  }, {\n    key: \"setUrl\",\n    value: function setUrl(value, options) {\n      if (!value || typeof value !== 'string' || value === this._src) {\n        return false;\n      }\n\n      this._src = value;\n      this.nosubmit = true;\n      this.formio = this.options.formio = new _Formio.GlobalFormio(value, options);\n\n      if (this.type === 'form') {\n        // Set the options source so this can be passed to other components.\n        this.options.src = value;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"ready\",\n    get: function get() {\n      var _this7 = this;\n\n      return this.formReady.then(function () {\n        return _get(_getPrototypeOf(Webform.prototype), \"ready\", _this7).then(function () {\n          return _this7.loadingSubmission ? _this7.submissionReady : true;\n        });\n      });\n    }\n    /**\n     * Returns if this form is loading.\n     *\n     * @returns {boolean} - TRUE means the form is loading, FALSE otherwise.\n     */\n\n  }, {\n    key: \"loading\",\n    get: function get() {\n      return this._loading;\n    }\n    /**\n     * Set the loading state for this form, and also show the loader spinner.\n     *\n     * @param {boolean} loading - If this form should be \"loading\" or not.\n     */\n    ,\n    set: function set(loading) {\n      if (this._loading !== loading) {\n        this._loading = loading;\n\n        if (!this.loader && loading) {\n          this.loader = this.ce('div', {\n            class: 'loader-wrapper'\n          });\n          var spinner = this.ce('div', {\n            class: 'loader text-center'\n          });\n          this.loader.appendChild(spinner);\n        }\n        /* eslint-disable max-depth */\n\n\n        if (this.loader) {\n          try {\n            if (loading) {\n              this.prependTo(this.loader, this.wrapper);\n            } else {\n              this.removeChildFrom(this.loader, this.wrapper);\n            }\n          } catch (err) {// ingore\n          }\n        }\n        /* eslint-enable max-depth */\n\n      }\n    }\n    /**\n     * Sets the JSON schema for the form to be rendered.\n     *\n     * @example\n     * import Webform from 'formiojs/Webform';\n     * let form = new Webform(document.getElementById('formio'));\n     * form.setForm({\n     *   components: [\n     *     {\n     *       type: 'textfield',\n     *       key: 'firstName',\n     *       label: 'First Name',\n     *       placeholder: 'Enter your first name.',\n     *       input: true\n     *     },\n     *     {\n     *       type: 'textfield',\n     *       key: 'lastName',\n     *       label: 'Last Name',\n     *       placeholder: 'Enter your last name',\n     *       input: true\n     *     },\n     *     {\n     *       type: 'button',\n     *       action: 'submit',\n     *       label: 'Submit',\n     *       theme: 'primary'\n     *     }\n     *   ]\n     * });\n     *\n     * @param {Object} form - The JSON schema of the form @see https://examples.form.io/example for an example JSON schema.\n     * @param flags\n     * @returns {*}\n     */\n\n  }, {\n    key: \"setForm\",\n    value: function setForm(form, flags) {\n      var _this$_form$component,\n          _this8 = this;\n\n      var isFormAlreadySet = this._form && ((_this$_form$component = this._form.components) === null || _this$_form$component === void 0 ? void 0 : _this$_form$component.length);\n\n      try {\n        var _this$parent, _this$parent$componen; // Do not set the form again if it has been already set\n\n\n        if (isFormAlreadySet && JSON.stringify(this._form) === JSON.stringify(form)) {\n          return _nativePromiseOnly.default.resolve();\n        } // Create the form.\n\n\n        this._form = flags !== null && flags !== void 0 && flags.keepAsReference ? form : _lodash.default.cloneDeep(form);\n\n        if (this.onSetForm) {\n          this.onSetForm(_lodash.default.cloneDeep(this._form), form);\n        }\n\n        if ((_this$parent = this.parent) !== null && _this$parent !== void 0 && (_this$parent$componen = _this$parent.component) !== null && _this$parent$componen !== void 0 && _this$parent$componen.modalEdit) {\n          return _nativePromiseOnly.default.resolve();\n        }\n      } catch (err) {\n        console.warn(err); // If provided form is not a valid JSON object, do not set it too\n\n        return _nativePromiseOnly.default.resolve();\n      } // Allow the form to provide component overrides.\n\n\n      if (form && form.settings && form.settings.components) {\n        this.options.components = form.settings.components;\n      }\n\n      if (form && form.properties) {\n        this.options.properties = form.properties;\n      }\n\n      if ('schema' in form && (0, _compareVersions.default)(form.schema, '1.x') > 0) {\n        this.ready.then(function () {\n          _this8.setAlert('alert alert-danger', 'Form schema is for a newer version, please upgrade your renderer. Some functionality may not work.');\n        });\n      } // See if they pass a module, and evaluate it if so.\n\n\n      if (form && form.module) {\n        var formModule = null;\n\n        if (typeof form.module === 'string') {\n          try {\n            formModule = this.evaluate(\"return \".concat(form.module));\n          } catch (err) {\n            console.warn(err);\n          }\n        } else {\n          formModule = form.module;\n        }\n\n        if (formModule) {\n          _Formio.GlobalFormio.use(formModule); // Since we got here after instantiation, we need to manually apply form options.\n\n\n          if (formModule.options && formModule.options.form) {\n            this.options = Object.assign(this.options, formModule.options.form);\n          }\n        }\n      }\n\n      this.initialized = false;\n\n      var rebuild = this.rebuild() || _nativePromiseOnly.default.resolve();\n\n      return rebuild.then(function () {\n        _this8.emit('formLoad', form);\n\n        _this8.triggerRecaptcha(); // Make sure to trigger onChange after a render event occurs to speed up form rendering.\n\n\n        setTimeout(function () {\n          _this8.onChange(flags);\n\n          _this8.formReadyResolve();\n        }, 0);\n        return _this8.formReady;\n      });\n    }\n    /**\n     * Gets the form object.\n     *\n     * @returns {Object} - The form JSON schema.\n     */\n\n  }, {\n    key: \"form\",\n    get: function get() {\n      if (!this._form) {\n        this._form = {\n          components: []\n        };\n      }\n\n      return this._form;\n    }\n    /**\n     * Sets the form value.\n     *\n     * @alias setForm\n     * @param {Object} form - The form schema object.\n     */\n    ,\n    set: function set(form) {\n      this.setForm(form);\n    }\n    /**\n     * Returns the submission object that was set within this form.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"submission\",\n    get: function get() {\n      return this.getValue();\n    }\n    /**\n     * Sets the submission of a form.\n     *\n     * @example\n     * import Webform from 'formiojs/Webform';\n     * let form = new Webform(document.getElementById('formio'));\n     * form.src = 'https://examples.form.io/example';\n     * form.submission = {data: {\n     *   firstName: 'Joe',\n     *   lastName: 'Smith',\n     *   email: 'joe@example.com'\n     * }};\n     *\n     * @param {Object} submission - The Form.io submission object.\n     */\n    ,\n    set: function set(submission) {\n      this.setSubmission(submission);\n    }\n    /**\n     * Sets a submission and returns the promise when it is ready.\n     * @param submission\n     * @param flags\n     * @return {Promise.<TResult>}\n     */\n\n  }, {\n    key: \"setSubmission\",\n    value: function setSubmission(submission) {\n      var _this9 = this;\n\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      flags = _objectSpread(_objectSpread({}, flags), {}, {\n        fromSubmission: _lodash.default.has(flags, 'fromSubmission') ? flags.fromSubmission : true\n      });\n      return this.onSubmission = this.formReady.then(function (resolveFlags) {\n        if (resolveFlags) {\n          flags = _objectSpread(_objectSpread({}, flags), resolveFlags);\n        }\n\n        _this9.submissionSet = true;\n\n        _this9.triggerChange(flags);\n\n        _this9.setValue(submission, flags);\n\n        return _this9.submissionReadyResolve(submission);\n      }, function (err) {\n        return _this9.submissionReadyReject(err);\n      }).catch(function (err) {\n        return _this9.submissionReadyReject(err);\n      });\n    }\n    /**\n     * Saves a submission draft.\n     */\n\n  }, {\n    key: \"saveDraft\",\n    value: function saveDraft() {\n      var _this10 = this;\n\n      if (!this.draftEnabled) {\n        return;\n      }\n\n      if (!this.formio) {\n        console.warn(this.t('saveDraftInstanceError'));\n        return;\n      }\n\n      if (!_Formio.GlobalFormio.getUser()) {\n        console.warn(this.t('saveDraftAuthError'));\n        return;\n      }\n\n      var draft = (0, _utils.fastCloneDeep)(this.submission);\n      draft.state = 'draft';\n\n      if (!this.savingDraft) {\n        this.emit('saveDraftBegin');\n        this.savingDraft = true;\n        this.formio.saveSubmission(draft).then(function (sub) {\n          // Set id to submission to avoid creating new draft submission\n          _this10.submission._id = sub._id;\n          _this10.savingDraft = false;\n\n          _this10.emit('saveDraft', sub);\n        });\n      }\n    }\n    /**\n     * Restores a draft submission based on the user who is authenticated.\n     *\n     * @param {userId} - The user id where we need to restore the draft from.\n     */\n\n  }, {\n    key: \"restoreDraft\",\n    value: function restoreDraft(userId) {\n      var _this11 = this;\n\n      if (!this.formio) {\n        console.warn(this.t('restoreDraftInstanceError'));\n        return;\n      }\n\n      this.savingDraft = true;\n      this.formio.loadSubmissions({\n        params: {\n          state: 'draft',\n          owner: userId\n        }\n      }).then(function (submissions) {\n        if (submissions.length > 0 && !_this11.options.skipDraftRestore) {\n          var draft = (0, _utils.fastCloneDeep)(submissions[0]);\n          return _this11.setSubmission(draft).then(function () {\n            _this11.draftEnabled = true;\n            _this11.savingDraft = false;\n\n            _this11.emit('restoreDraft', draft);\n          });\n        } // Enable drafts so that we can keep track of changes.\n\n\n        _this11.draftEnabled = true;\n        _this11.savingDraft = false;\n\n        _this11.emit('restoreDraft', null);\n      });\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      var schema = (0, _utils.fastCloneDeep)(_lodash.default.omit(this._form, ['components']));\n      schema.components = [];\n      this.eachComponent(function (component) {\n        return schema.components.push(component.schema);\n      });\n      return schema;\n    }\n  }, {\n    key: \"mergeData\",\n    value: function mergeData(_this, _that) {\n      _lodash.default.mergeWith(_this, _that, function (thisValue, thatValue) {\n        if (Array.isArray(thisValue) && Array.isArray(thatValue) && thisValue.length !== thatValue.length) {\n          return thatValue;\n        }\n      });\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(submission) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!submission || !submission.data) {\n        submission = {\n          data: {}\n        };\n      } // Metadata needs to be available before setValue\n\n\n      this._submission.metadata = submission.metadata || {};\n      this.editing = !!submission._id; // Set the timezone in the options if available.\n\n      if (!this.options.submissionTimezone && submission.metadata && submission.metadata.timezone) {\n        this.options.submissionTimezone = submission.metadata.timezone;\n      }\n\n      var changed = _get(_getPrototypeOf(Webform.prototype), \"setValue\", this).call(this, submission.data, flags);\n\n      if (!flags.sanitize) {\n        this.mergeData(this.data, submission.data);\n      }\n\n      submission.data = this.data;\n      this._submission = submission;\n      return changed;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      if (!this._submission.data) {\n        this._submission.data = {};\n      }\n\n      if (this.viewOnly) {\n        return this._submission;\n      }\n\n      var submission = this._submission;\n      submission.data = this.data;\n      return this._submission;\n    }\n    /**\n     * Build the form.\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this12 = this;\n\n      this._submission = this._submission || {\n        data: {}\n      }; // Remove any existing components.\n\n      if (this.components && this.components.length) {\n        this.destroyComponents();\n        this.components = [];\n      }\n\n      if (this.component) {\n        this.component.components = this.form ? this.form.components : [];\n      } else {\n        this.component = this.form;\n      }\n\n      this.component.type = 'form';\n      this.component.input = false;\n      this.addComponents();\n      this.on('submitButton', function (options) {\n        _this12.submit(false, options).catch(function (e) {\n          return e !== false && console.log(e);\n        });\n      }, true);\n      this.on('checkValidity', function (data) {\n        return _this12.checkValidity(data, true, data);\n      }, true);\n      this.on('requestUrl', function (args) {\n        return _this12.submitUrl(args.url, args.headers);\n      }, true);\n      this.on('resetForm', function () {\n        return _this12.resetValue();\n      }, true);\n      this.on('deleteSubmission', function () {\n        return _this12.deleteSubmission();\n      }, true);\n      this.on('refreshData', function () {\n        return _this12.updateValue();\n      }, true);\n      this.executeFormController();\n      return this.formReady;\n    }\n  }, {\n    key: \"executeFormController\",\n    value: function executeFormController() {\n      var _this13 = this; // If no controller value or\n      // hidden and set to clearOnHide (Don't calculate a value for a hidden field set to clear when hidden)\n\n\n      if (!this.form || !this.form.controller || (!this.visible || this.component.hidden) && this.component.clearOnHide && !this.rootPristine) {\n        return false;\n      }\n\n      this.formReady.then(function () {\n        setTimeout(function () {\n          _this13.evaluate(_this13.form.controller, {\n            components: _this13.components\n          });\n        });\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var deleteFromGlobal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.off('submitButton');\n      this.off('checkValidity');\n      this.off('requestUrl');\n      this.off('resetForm');\n      this.off('deleteSubmission');\n      this.off('refreshData');\n\n      if (deleteFromGlobal) {\n        this.emit('formDelete', this.id);\n        delete _Formio.GlobalFormio.forms[this.id];\n      }\n\n      return _get(_getPrototypeOf(Webform.prototype), \"destroy\", this).call(this);\n    }\n  }, {\n    key: \"build\",\n    value: function build(element) {\n      var _this14 = this;\n\n      if (element || this.element) {\n        return this.ready.then(function () {\n          element = element || _this14.element;\n\n          _get(_getPrototypeOf(Webform.prototype), \"build\", _this14).call(_this14, element);\n        });\n      }\n\n      return this.ready;\n    }\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      var classes = 'formio-form';\n\n      if (this.options.readOnly) {\n        classes += ' formio-read-only';\n      }\n\n      return classes;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _get(_getPrototypeOf(Webform.prototype), \"render\", this).call(this, this.renderTemplate('webform', {\n        classes: this.getClassName(),\n        children: this.renderComponents()\n      }), this.builderMode ? 'builder' : 'form', true);\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      // Don't bother if we have not built yet.\n      if (!this.element) {\n        return _nativePromiseOnly.default.resolve();\n      }\n\n      this.clear();\n      this.setContent(this.element, this.render());\n      return this.attach(this.element);\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      var _this15 = this;\n\n      this.element = element;\n      this.loadRefs(element, {\n        webform: 'single'\n      });\n      var childPromise = this.attachComponents(this.refs.webform);\n      this.addEventListener(document, 'keydown', this.executeShortcuts);\n      this.currentForm = this;\n      this.hook('attachWebform', element, this);\n      return childPromise.then(function () {\n        _this15.emit('render', _this15.element);\n\n        return _this15.setValue(_this15._submission, {\n          noUpdateEvent: true\n        });\n      });\n    }\n  }, {\n    key: \"hasRequiredFields\",\n    value: function hasRequiredFields() {\n      var result = false;\n      (0, _formUtils.eachComponent)(this.form.components, function (component) {\n        if (component.validate.required) {\n          result = true;\n          return true;\n        }\n      }, true);\n      return result;\n    }\n  }, {\n    key: \"resetValue\",\n    value: function resetValue() {\n      _lodash.default.each(this.getComponents(), function (comp) {\n        return comp.resetValue();\n      });\n\n      this.setPristine(true);\n      this.onChange();\n    }\n    /**\n     * Sets a new alert to display in the error dialog of the form.\n     *\n     * @param {string} type - The type of alert to display. \"danger\", \"success\", \"warning\", etc.\n     * @param {string} message - The message to show in the alert.\n     * @param {Object} options\n     */\n\n  }, {\n    key: \"setAlert\",\n    value: function setAlert(type, message, options) {\n      var _this16 = this;\n\n      if (!type && this.submitted) {\n        if (this.alert) {\n          if (this.refs.errorRef && this.refs.errorRef.length) {\n            this.refs.errorRef.forEach(function (el) {\n              _this16.removeEventListener(el, 'click');\n\n              _this16.removeEventListener(el, 'keypress');\n            });\n          }\n\n          this.removeChild(this.alert);\n          this.alert = null;\n        }\n\n        return;\n      }\n\n      if (this.options.noAlerts) {\n        if (!message) {\n          this.emit('error', false);\n        }\n\n        return;\n      }\n\n      if (this.alert) {\n        try {\n          if (this.refs.errorRef && this.refs.errorRef.length) {\n            this.refs.errorRef.forEach(function (el) {\n              _this16.removeEventListener(el, 'click');\n\n              _this16.removeEventListener(el, 'keypress');\n            });\n          }\n\n          this.removeChild(this.alert);\n          this.alert = null;\n        } catch (err) {// ignore\n        }\n      }\n\n      if (message) {\n        var attrs = {\n          class: options && options.classes || \"alert alert-\".concat(type),\n          id: \"error-list-\".concat(this.id)\n        };\n        var templateOptions = {\n          message: message instanceof HTMLElement ? message.outerHTML : message,\n          attrs: attrs,\n          type: type\n        };\n        this.alert = (0, _utils.convertStringToHTMLElement)(this.renderTemplate('alert', templateOptions), \"#\".concat(attrs.id));\n      }\n\n      if (!this.alert) {\n        return;\n      }\n\n      this.loadRefs(this.alert, {\n        errorRef: 'multiple'\n      });\n\n      if (this.refs.errorRef && this.refs.errorRef.length) {\n        this.refs.errorRef.forEach(function (el) {\n          _this16.addEventListener(el, 'click', function (e) {\n            var key = e.currentTarget.dataset.componentKey;\n\n            _this16.focusOnComponent(key);\n          });\n\n          _this16.addEventListener(el, 'keydown', function (e) {\n            if (e.keyCode === 13) {\n              e.preventDefault();\n              var key = e.currentTarget.dataset.componentKey;\n\n              _this16.focusOnComponent(key);\n            }\n          });\n        });\n      }\n\n      this.prepend(this.alert);\n    }\n    /**\n     * Focus on selected component.\n     *\n     * @param {string} key - The key of selected component.\n     * @returns {*}\n     */\n\n  }, {\n    key: \"focusOnComponent\",\n    value: function focusOnComponent(key) {\n      if (key) {\n        var component = this.getComponent(key);\n\n        if (component) {\n          component.focus();\n        }\n      }\n    }\n    /**\n     * Show the errors of this form within the alert dialog.\n     *\n     * @param {Object} error - An optional additional error to display along with the component errors.\n     * @returns {*}\n     */\n\n    /* eslint-disable no-unused-vars */\n\n  }, {\n    key: \"showErrors\",\n    value: function showErrors(error, triggerEvent, onChange) {\n      var _this17 = this;\n\n      this.loading = false;\n      var errors = this.errors;\n\n      if (error) {\n        if (Array.isArray(error)) {\n          errors = errors.concat(error);\n        } else {\n          errors.push(error);\n        }\n      } else {\n        errors = _get(_getPrototypeOf(Webform.prototype), \"errors\", this);\n      }\n\n      errors = errors.concat(this.customErrors);\n\n      if (!errors.length) {\n        this.setAlert(false);\n        return;\n      } // Mark any components as invalid if in a custom message.\n\n\n      errors.forEach(function (err) {\n        var _err$components = err.components,\n            components = _err$components === void 0 ? [] : _err$components;\n\n        if (err.component) {\n          components.push(err.component);\n        }\n\n        if (err.path) {\n          components.push(err.path);\n        }\n\n        components.forEach(function (path) {\n          var originalPath = _this17._parentPath + (0, _utils.getStringFromComponentPath)(path);\n\n          var component = _this17.getComponent(path, _lodash.default.identity, originalPath);\n\n          if (err.fromServer) {\n            if (component.serverErrors) {\n              component.serverErrors.push(err);\n            } else {\n              component.serverErrors = [err];\n            }\n          }\n\n          var components = _lodash.default.compact(Array.isArray(component) ? component : [component]);\n\n          components.forEach(function (component) {\n            return component.setCustomValidity(err.message, true);\n          });\n        });\n      });\n      var displayedErrors = [];\n      errors.forEach(function (err) {\n        if (err) {\n          var createListItem = function createListItem(message, index) {\n            var messageFromIndex = !_lodash.default.isUndefined(index) && err.messages && err.messages[index];\n            var keyOrPath = messageFromIndex && messageFromIndex.formattedKeyOrPath || messageFromIndex.path || err.component && err.component.key || err.fromServer && err.path;\n            var formattedKeyOrPath = keyOrPath ? (0, _utils.getStringFromComponentPath)(keyOrPath) : '';\n            formattedKeyOrPath = _this17._parentPath + formattedKeyOrPath;\n\n            if (typeof err !== 'string' && !err.formattedKeyOrPath) {\n              err.formattedKeyOrPath = formattedKeyOrPath;\n            }\n\n            return {\n              message: (0, _utils.unescapeHTML)(message),\n              keyOrPath: formattedKeyOrPath\n            };\n          };\n\n          err.messages = _lodash.default.uniqBy(err.messages, function (message) {\n            return message.message;\n          });\n\n          if (err.messages && err.messages.length) {\n            var component = err.component;\n            err.messages.forEach(function (_ref, index) {\n              var message = _ref.message,\n                  context = _ref.context,\n                  fromServer = _ref.fromServer;\n              var text = context !== null && context !== void 0 && context.hasLabel || fromServer ? _this17.t('alertMessage', {\n                message: _this17.t(message)\n              }) : _this17.t('alertMessageWithLabel', {\n                label: _this17.t(component.label),\n                message: _this17.t(message)\n              });\n              displayedErrors.push(createListItem(text, index));\n            });\n          } else if (err) {\n            var message = _lodash.default.isObject(err) ? _this17.t('alertMessage', {\n              message: _this17.t(err.message || '')\n            }) : _this17.t('alertMessage', {\n              message: _this17.t(err)\n            });\n            displayedErrors.push(createListItem(message));\n          }\n        }\n      });\n      var errorsList = this.renderTemplate('errorsList', {\n        errors: displayedErrors\n      });\n      this.root.setAlert('danger', errorsList);\n\n      if (triggerEvent) {\n        this.emit('error', errors);\n      }\n\n      return errors;\n    }\n    /* eslint-enable no-unused-vars */\n\n    /**\n     * Called when the submission has completed, or if the submission needs to be sent to an external library.\n     *\n     * @param {Object} submission - The submission object.\n     * @param {boolean} saved - Whether or not this submission was saved to the server.\n     * @returns {object} - The submission object.\n     */\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(submission, saved) {\n      var _this$triggerSaveDraf;\n\n      this.loading = false;\n      this.submitting = false;\n      this.setPristine(true); // We want to return the submitted submission and setValue will mutate the submission so cloneDeep it here.\n\n      this.setValue((0, _utils.fastCloneDeep)(submission), {\n        noValidate: true,\n        noCheck: true\n      });\n      this.setAlert('success', \"<p>\".concat(this.t('complete'), \"</p>\")); // Cancel triggered saveDraft to prevent overriding the submitted state\n\n      if (this.draftEnabled && (_this$triggerSaveDraf = this.triggerSaveDraft) !== null && _this$triggerSaveDraf !== void 0 && _this$triggerSaveDraf.cancel) {\n        this.triggerSaveDraft.cancel();\n      }\n\n      this.emit('submit', submission, saved);\n\n      if (saved) {\n        this.emit('submitDone', submission);\n      }\n\n      return submission;\n    }\n  }, {\n    key: \"normalizeError\",\n    value: function normalizeError(error) {\n      if (error) {\n        if (_typeof(error) === 'object' && 'details' in error) {\n          error = error.details;\n        }\n\n        if (typeof error === 'string') {\n          error = {\n            message: error\n          };\n        }\n      }\n\n      return error;\n    }\n    /**\n     * Called when an error occurs during the submission.\n     *\n     * @param {Object} error - The error that occured.\n     */\n\n  }, {\n    key: \"onSubmissionError\",\n    value: function onSubmissionError(error) {\n      error = this.normalizeError(error);\n      this.submitting = false;\n      this.setPristine(false);\n      this.emit('submitError', error); // Allow for silent cancellations (no error message, no submit button error state)\n\n      if (error && error.silent) {\n        this.emit('change', {\n          isValid: true\n        }, {\n          silent: true\n        });\n        return false;\n      }\n\n      var errors = this.showErrors(error, true);\n\n      if (this.root && this.root.alert) {\n        this.scrollIntoView(this.root.alert);\n      }\n\n      return errors;\n    }\n    /**\n     * Trigger the change event for this form.\n     *\n     * @param changed\n     * @param flags\n     */\n\n  }, {\n    key: \"onChange\",\n    value: function onChange(flags, changed, modified, changes) {\n      flags = flags || {};\n      var isChangeEventEmitted = false; // For any change events, clear any custom errors for that component.\n\n      if (changed && changed.component) {\n        this.customErrors = this.customErrors.filter(function (err) {\n          return err.component && err.component !== changed.component.key;\n        });\n      }\n\n      _get(_getPrototypeOf(Webform.prototype), \"onChange\", this).call(this, flags, true);\n\n      var value = _lodash.default.clone(this.submission);\n\n      flags.changed = value.changed = changed;\n      flags.changes = changes;\n\n      if (modified && this.pristine) {\n        this.pristine = false;\n      }\n\n      value.isValid = this.checkData(value.data, flags);\n      this.loading = false;\n\n      if (this.submitted) {\n        this.showErrors();\n      } // See if we need to save the draft of the form.\n\n\n      if (modified && this.options.saveDraft) {\n        this.triggerSaveDraft();\n      }\n\n      if (!flags || !flags.noEmit) {\n        this.emit('change', value, flags, modified);\n        isChangeEventEmitted = true;\n      } // The form is initialized after the first change event occurs.\n\n\n      if (isChangeEventEmitted && !this.initialized) {\n        this.emit('initialized');\n        this.initialized = true;\n      }\n    }\n  }, {\n    key: \"checkData\",\n    value: function checkData(data) {\n      var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var valid = _get(_getPrototypeOf(Webform.prototype), \"checkData\", this).call(this, data, flags);\n\n      if ((_lodash.default.isEmpty(flags) || flags.noValidate) && this.submitted) {\n        this.showErrors();\n      }\n\n      return valid;\n    }\n    /**\n     * Send a delete request to the server.\n     */\n\n  }, {\n    key: \"deleteSubmission\",\n    value: function deleteSubmission() {\n      var _this18 = this;\n\n      return this.formio.deleteSubmission().then(function () {\n        _this18.emit('submissionDeleted', _this18.submission);\n\n        _this18.resetValue();\n      });\n    }\n    /**\n     * Cancels the submission.\n     *\n     * @alias reset\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(noconfirm) {\n      var shouldReset = this.hook('beforeCancel', true);\n\n      if (shouldReset && (noconfirm || confirm(this.t('confirmCancel')))) {\n        this.resetValue();\n        return true;\n      } else {\n        this.emit('cancelSubmit');\n        return false;\n      }\n    }\n  }, {\n    key: \"setMetadata\",\n    value: function setMetadata(submission) {\n      // Add in metadata about client submitting the form\n      submission.metadata = submission.metadata || {};\n\n      _lodash.default.defaults(submission.metadata, {\n        timezone: _lodash.default.get(this, '_submission.metadata.timezone', (0, _utils.currentTimezone)()),\n        offset: parseInt(_lodash.default.get(this, '_submission.metadata.offset', (0, _moment.default)().utcOffset()), 10),\n        origin: document.location.origin,\n        referrer: document.referrer,\n        browserName: navigator.appName,\n        userAgent: navigator.userAgent,\n        pathName: window.location.pathname,\n        onLine: navigator.onLine\n      });\n    }\n  }, {\n    key: \"submitForm\",\n    value: function submitForm() {\n      var _this19 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.clearServerErrors();\n      return new _nativePromiseOnly.default(function (resolve, reject) {\n        // Read-only forms should never submit.\n        if (_this19.options.readOnly) {\n          return resolve({\n            submission: _this19.submission,\n            saved: false\n          });\n        }\n\n        var submission = (0, _utils.fastCloneDeep)(_this19.submission || {});\n\n        _this19.setMetadata(submission);\n\n        submission.state = options.state || 'submitted';\n        var isDraft = submission.state === 'draft';\n\n        _this19.hook('beforeSubmit', _objectSpread(_objectSpread({}, submission), {}, {\n          component: options.component\n        }), function (err, data) {\n          if (err) {\n            return reject(err);\n          }\n\n          submission._vnote = data && data._vnote ? data._vnote : '';\n\n          if (!isDraft && !submission.data) {\n            return reject('Invalid Submission');\n          }\n\n          if (!isDraft && !_this19.checkValidity(submission.data, true)) {\n            return reject();\n          }\n\n          _this19.everyComponent(function (comp) {\n            var persistent = comp.component.persistent;\n\n            if (persistent === 'client-only') {\n              _lodash.default.unset(submission.data, comp.path);\n            }\n          });\n\n          _this19.hook('customValidation', _objectSpread(_objectSpread({}, submission), {}, {\n            component: options.component\n          }), function (err) {\n            if (err) {\n              // If string is returned, cast to object.\n              if (typeof err === 'string') {\n                err = {\n                  message: err\n                };\n              } // Ensure err is an array.\n\n\n              err = Array.isArray(err) ? err : [err]; // Set as custom errors.\n\n              _this19.customErrors = err;\n              return reject();\n            }\n\n            _this19.loading = true; // Use the form action to submit the form if available.\n\n            if (_this19._form && _this19._form.action) {\n              var method = submission.data._id && _this19._form.action.includes(submission.data._id) ? 'PUT' : 'POST';\n              return _Formio.GlobalFormio.makeStaticRequest(_this19._form.action, method, submission, _this19.formio ? _this19.formio.options : {}).then(function (result) {\n                return resolve({\n                  submission: result,\n                  saved: true\n                });\n              }).catch(function (error) {\n                _this19.setServerErrors(error);\n\n                return reject(error);\n              });\n            }\n\n            var submitFormio = _this19.formio;\n\n            if (_this19.nosubmit || !submitFormio) {\n              return resolve({\n                submission: submission,\n                saved: false\n              });\n            } // If this is an actionUrl, then make sure to save the action and not the submission.\n\n\n            var submitMethod = submitFormio.actionUrl ? 'saveAction' : 'saveSubmission';\n            submitFormio[submitMethod](submission).then(function (result) {\n              return resolve({\n                submission: result,\n                saved: true\n              });\n            }).catch(function (error) {\n              _this19.setServerErrors(error);\n\n              return reject(error);\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"setServerErrors\",\n    value: function setServerErrors(error) {\n      if (error.details) {\n        this.serverErrors = error.details.filter(function (err) {\n          return err.level ? err.level === 'error' : err;\n        }).map(function (err) {\n          err.fromServer = true;\n          return err;\n        });\n      }\n    }\n  }, {\n    key: \"executeSubmit\",\n    value: function executeSubmit(options) {\n      var _this20 = this;\n\n      this.submitted = true;\n      this.submitting = true;\n      return this.submitForm(options).then(function (_ref2) {\n        var submission = _ref2.submission,\n            saved = _ref2.saved;\n        return _this20.onSubmit(submission, saved);\n      }).then(function (results) {\n        _this20.submissionInProcess = false;\n        return results;\n      }).catch(function (err) {\n        _this20.submissionInProcess = false;\n        return _nativePromiseOnly.default.reject(_this20.onSubmissionError(err));\n      });\n    }\n  }, {\n    key: \"clearServerErrors\",\n    value: function clearServerErrors() {\n      var _this$serverErrors,\n          _this21 = this;\n\n      (_this$serverErrors = this.serverErrors) === null || _this$serverErrors === void 0 ? void 0 : _this$serverErrors.forEach(function (error) {\n        if (error.path) {\n          var pathArray = (0, _utils.getArrayFromComponentPath)(error.path);\n\n          var component = _this21.getComponent(pathArray, _lodash.default.identity, error.formattedKeyOrPath);\n\n          if (component) {\n            component.serverErrors = [];\n          }\n        }\n      });\n      this.serverErrors = [];\n    }\n    /**\n     * Submits the form.\n     *\n     * @example\n     * import Webform from 'formiojs/Webform';\n     * let form = new Webform(document.getElementById('formio'));\n     * form.src = 'https://examples.form.io/example';\n     * form.submission = {data: {\n     *   firstName: 'Joe',\n     *   lastName: 'Smith',\n     *   email: 'joe@example.com'\n     * }};\n     * form.submit().then((submission) => {\n     *   console.log(submission);\n     * });\n     *\n     * @param {boolean} before - If this submission occured from the before handlers.\n     *\n     * @returns {Promise} - A promise when the form is done submitting.\n     */\n\n  }, {\n    key: \"submit\",\n    value: function submit(before, options) {\n      var _this22 = this;\n\n      this.submissionInProcess = true;\n\n      if (!before) {\n        return this.beforeSubmit(options).then(function () {\n          return _this22.executeSubmit(options);\n        });\n      } else {\n        return this.executeSubmit(options);\n      }\n    }\n  }, {\n    key: \"submitUrl\",\n    value: function submitUrl(URL, headers) {\n      var _this23 = this;\n\n      if (!URL) {\n        return console.warn('Missing URL argument');\n      }\n\n      var submission = this.submission || {};\n      var API_URL = URL;\n      var settings = {\n        method: 'POST',\n        headers: {}\n      };\n\n      if (headers && headers.length > 0) {\n        headers.map(function (e) {\n          if (e.header !== '' && e.value !== '') {\n            settings.headers[e.header] = _this23.interpolate(e.value, submission);\n          }\n        });\n      }\n\n      if (API_URL && settings) {\n        _Formio.GlobalFormio.makeStaticRequest(API_URL, settings.method, submission, {\n          headers: settings.headers\n        }).then(function () {\n          _this23.emit('requestDone');\n\n          _this23.setAlert('success', '<p> Success </p>');\n        }).catch(function (e) {\n          _this23.showErrors(\"\".concat(e.statusText ? e.statusText : '', \" \").concat(e.status ? e.status : e));\n\n          _this23.emit('error', \"\".concat(e.statusText ? e.statusText : '', \" \").concat(e.status ? e.status : e));\n\n          console.error(\"\".concat(e.statusText ? e.statusText : '', \" \").concat(e.status ? e.status : e));\n\n          _this23.setAlert('danger', \"<p> \".concat(e.statusText ? e.statusText : '', \" \").concat(e.status ? e.status : e, \" </p>\"));\n        });\n      } else {\n        this.emit('error', 'You should add a URL to this button.');\n        this.setAlert('warning', 'You should add a URL to this button.');\n        return console.warn('You should add a URL to this button.');\n      }\n    }\n  }, {\n    key: \"triggerRecaptcha\",\n    value: function triggerRecaptcha() {\n      if (!this || !this.components) {\n        return;\n      }\n\n      var recaptchaComponent = (0, _utils.searchComponents)(this.components, {\n        'component.type': 'recaptcha',\n        'component.eventType': 'formLoad'\n      });\n\n      if (recaptchaComponent.length > 0) {\n        recaptchaComponent[0].verify(\"\".concat(this.form.name ? this.form.name : 'form', \"Load\"));\n      }\n    }\n  }, {\n    key: \"nosubmit\",\n    get: function get() {\n      return this._nosubmit || false;\n    },\n    set: function set(value) {\n      this._nosubmit = !!value;\n      this.emit('nosubmit', this._nosubmit);\n    }\n  }, {\n    key: \"conditions\",\n    get: function get() {\n      var _this$schema$settings, _this$schema$settings2;\n\n      return (_this$schema$settings = (_this$schema$settings2 = this.schema.settings) === null || _this$schema$settings2 === void 0 ? void 0 : _this$schema$settings2.conditions) !== null && _this$schema$settings !== void 0 ? _this$schema$settings : [];\n    }\n  }, {\n    key: \"variables\",\n    get: function get() {\n      var _this$schema$settings3, _this$schema$settings4;\n\n      return (_this$schema$settings3 = (_this$schema$settings4 = this.schema.settings) === null || _this$schema$settings4 === void 0 ? void 0 : _this$schema$settings4.variables) !== null && _this$schema$settings3 !== void 0 ? _this$schema$settings3 : [];\n    }\n  }]);\n\n  return Webform;\n}(_NestedDataComponent2.default);\n\nexports.default = Webform;\nWebform.setBaseUrl = _Formio.GlobalFormio.setBaseUrl;\nWebform.setApiUrl = _Formio.GlobalFormio.setApiUrl;\nWebform.setAppUrl = _Formio.GlobalFormio.setAppUrl;","map":null,"metadata":{},"sourceType":"script"}