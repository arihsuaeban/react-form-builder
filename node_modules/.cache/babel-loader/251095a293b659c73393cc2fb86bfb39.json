{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.filter\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es.object.keys\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _utils = require(\"../../../utils/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nvar ComponentModal = /*#__PURE__*/function () {\n  function ComponentModal(component, element, isOpened, currentValue) {\n    _classCallCheck(this, ComponentModal);\n\n    this.isOpened = isOpened;\n    this.component = component;\n    this.element = element;\n    this.currentValue = (0, _utils.fastCloneDeep)(currentValue !== null && currentValue !== void 0 ? currentValue : this.component.getValue());\n    this.dataLoaded = false;\n    this.init();\n  }\n\n  _createClass(ComponentModal, [{\n    key: \"refs\",\n    get: function get() {\n      return this.component.refs;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      this.openModalListener = this.openModalHandler.bind(this);\n\n      this.showDialogListener = function (event) {\n        if (_this.isValueChanged() && !_this.component.disabled) {\n          _this.showDialog();\n        } else {\n          _this.closeModalHandler(event);\n        }\n      };\n\n      this.closeModalListener = this.closeModalHandler.bind(this);\n      this.saveModalListener = this.saveModalValueHandler.bind(this);\n      this.closeDialogListener = this.closeDialog.bind(this);\n      this.saveDialogListener = this.saveDialog.bind(this);\n      this.loadRefs();\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      if (this.dataLoaded) {\n        return;\n      }\n\n      this.currentValue = (0, _utils.fastCloneDeep)(value);\n      this.dataLoaded = true;\n      this.updateView();\n    }\n  }, {\n    key: \"setOpenModalElement\",\n    value: function setOpenModalElement(template) {\n      var _this$component;\n\n      if ((_this$component = this.component) !== null && _this$component !== void 0 && _this$component.visible) {\n        this.openModalTemplate = template;\n        this.component.setContent(this.refs.openModalWrapper, template);\n        this.loadRefs();\n        this.setEventListeners();\n\n        if (this.isOpened) {\n          this.refs.modalWrapper.classList.add('formio-dialog-disabled-animation');\n          this.openModal();\n        }\n      }\n    }\n  }, {\n    key: \"templateRefs\",\n    get: function get() {\n      return {\n        modalOverlay: 'single',\n        modalContents: 'single',\n        modalClose: 'single',\n        openModalWrapper: 'single',\n        openModal: 'single',\n        modalSave: 'single',\n        modalWrapper: 'single'\n      };\n    }\n  }, {\n    key: \"loadRefs\",\n    value: function loadRefs() {\n      this.component.loadRefs(this.element, this.templateRefs);\n    }\n  }, {\n    key: \"removeEventListeners\",\n    value: function removeEventListeners() {\n      this.component.removeEventListener(this.refs.openModal, 'click', this.openModalListener);\n      this.component.removeEventListener(this.refs.modalOverlay, 'click', this.refs.modalSave ? this.showDialogListener : this.saveModalListener);\n      this.component.removeEventListener(this.refs.modalClose, 'click', this.showDialogListener);\n      this.component.removeEventListener(this.refs.modalSave, 'click', this.saveModalListener);\n    }\n  }, {\n    key: \"setEventListeners\",\n    value: function setEventListeners() {\n      this.removeEventListeners();\n      this.component.addEventListener(this.refs.openModal, 'click', this.openModalListener);\n      this.component.addEventListener(this.refs.modalOverlay, 'click', this.refs.modalSave ? this.showDialogListener : this.saveModalListener);\n      this.component.addEventListener(this.refs.modalClose, 'click', this.showDialogListener);\n      this.component.addEventListener(this.refs.modalSave, 'click', this.saveModalListener);\n    }\n  }, {\n    key: \"isValueChanged\",\n    value: function isValueChanged() {\n      var componentValue = this.component.getValue();\n      var currentValue = this.currentValue; //excluding metadata comparison for components that have it in dataValue (for ex. nested forms)\n\n      if (componentValue && componentValue.data && componentValue.metadata) {\n        componentValue = this.component.getValue().data;\n        currentValue = this.currentValue.data;\n      }\n\n      return !_lodash.default.isEqual((0, _utils.fastCloneDeep)(componentValue), currentValue);\n    }\n  }, {\n    key: \"setOpenEventListener\",\n    value: function setOpenEventListener() {\n      var _this$refs$openModalW;\n\n      this.component.removeEventListener(this.refs.openModal, 'click', this.openModalListener);\n      this.component.loadRefs((_this$refs$openModalW = this.refs.openModalWrapper) !== null && _this$refs$openModalW !== void 0 ? _this$refs$openModalW : this.element, {\n        'openModal': 'single'\n      });\n      this.component.addEventListener(this.refs.openModal, 'click', this.openModalListener);\n    }\n  }, {\n    key: \"openModalHandler\",\n    value: function openModalHandler(event) {\n      event.preventDefault();\n      this.openModal();\n    }\n  }, {\n    key: \"positionOverElement\",\n    value: function positionOverElement() {\n      // Position the modal just over the element on the page.\n      var elementOffset = this.element.getBoundingClientRect().top;\n      var modalHeight = this.refs.modalContents.getBoundingClientRect().height;\n      var modalTop = elementOffset - modalHeight - 10;\n      modalTop = modalTop > 0 ? modalTop : 10;\n      this.refs.modalWrapper.style.paddingTop = \"\".concat(modalTop, \"px\");\n    }\n  }, {\n    key: \"openModal\",\n    value: function openModal() {\n      this.isOpened = true;\n      this.refs.modalWrapper.classList.remove('component-rendering-hidden');\n\n      if (this.component.component.type === 'signature') {\n        // Position signature modals just above the signature button.\n        this.positionOverElement();\n      }\n    }\n  }, {\n    key: \"updateView\",\n    value: function updateView() {\n      var template = _lodash.default.isEqual(this.currentValue, this.component.defaultValue) ? this.openModalTemplate : this.component.getModalPreviewTemplate();\n      this.component.setContent(this.refs.openModalWrapper, template);\n      this.setOpenEventListener();\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal() {\n      this.refs.modalWrapper.classList.remove('formio-dialog-disabled-animation');\n      this.refs.modalWrapper.classList.add('component-rendering-hidden');\n      this.isOpened = false;\n      this.updateView();\n    }\n  }, {\n    key: \"closeModalHandler\",\n    value: function closeModalHandler(event) {\n      event.preventDefault();\n\n      if (!this.component.disabled) {\n        this.component.setValue(_lodash.default.cloneDeep(this.currentValue), {\n          resetValue: true\n        });\n      }\n\n      this.closeModal();\n    }\n  }, {\n    key: \"showDialog\",\n    value: function showDialog() {\n      this.dialogElement = this.component.ce('div');\n      var dialogContent = \"\\n      <h3 ref=\\\"dialogHeader\\\">\".concat(this.component.t('Do you want to clear changes?'), \"</h3>\\n      <div style=\\\"display:flex; justify-content: flex-end;\\\">\\n        <button ref=\\\"dialogCancelButton\\\" class=\\\"btn btn-secondary\\\">\").concat(this.component.t('Cancel'), \"</button>\\n        <button ref=\\\"dialogYesButton\\\" class=\\\"btn btn-danger\\\">\").concat(this.component.t('Yes, delete it'), \"</button>\\n      </div>\\n    \");\n      this.dialogElement.innerHTML = dialogContent;\n      this.dialogElement.refs = {};\n      this.component.loadRefs.call(this.dialogElement, this.dialogElement, {\n        dialogHeader: 'single',\n        dialogCancelButton: 'single',\n        dialogYesButton: 'single'\n      });\n      this.dialog = this.component.createModal(this.dialogElement);\n      this.component.addEventListener(this.dialogElement.refs.dialogYesButton, 'click', this.saveDialogListener);\n      this.component.addEventListener(this.dialogElement.refs.dialogCancelButton, 'click', this.closeDialogListener);\n    }\n  }, {\n    key: \"closeDialog\",\n    value: function closeDialog(event) {\n      event.preventDefault();\n      this.dialog.close();\n      this.component.removeEventListener(this.dialogElement.refs.dialogYesButton, 'click', this.saveDialogListener);\n      this.component.removeEventListener(this.dialogElement.refs.dialogCancelButton, 'click', this.closeDialogListener);\n    }\n  }, {\n    key: \"saveDialog\",\n    value: function saveDialog(event) {\n      this.closeDialog(event);\n      this.closeModalHandler(event);\n    }\n  }, {\n    key: \"saveModalValueHandler\",\n    value: function saveModalValueHandler(event) {\n      var _this$component$dataV;\n\n      event.preventDefault();\n      this.currentValue = (0, _utils.fastCloneDeep)((_this$component$dataV = this.component.dataValue) !== null && _this$component$dataV !== void 0 ? _this$component$dataV : this.component.getValue());\n      this.closeModal();\n    }\n  }], [{\n    key: \"render\",\n    value: function render(component, data, topLevel) {\n      var children = component.renderTemplate('component', data, topLevel);\n      var isOpened = this;\n      return component.renderTemplate('componentModal', _objectSpread(_objectSpread({}, data), {}, {\n        children: children,\n        isOpened: isOpened\n      }));\n    }\n  }]);\n\n  return ComponentModal;\n}();\n\nexports.default = ComponentModal;","map":null,"metadata":{},"sourceType":"script"}