{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.find\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.map\");\n\nrequire(\"core-js/modules/es.object.get-own-property-descriptor\");\n\nrequire(\"core-js/modules/es.object.get-prototype-of\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.reflect.get\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nrequire(\"core-js/modules/es.string.split\");\n\nrequire(\"core-js/modules/es.string.trim\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Multivalue2 = _interopRequireDefault(require(\"../multivalue/Multivalue\"));\n\nvar _utils = require(\"../../../utils/utils\");\n\nvar _widgets = _interopRequireDefault(require(\"../../../widgets\"));\n\nvar _nativePromiseOnly = _interopRequireDefault(require(\"native-promise-only\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar Input = /*#__PURE__*/function (_Multivalue) {\n  _inherits(Input, _Multivalue);\n\n  var _super = _createSuper(Input);\n\n  function Input(component, options, data) {\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    _this = _super.call(this, component, options, data);\n    _this.triggerUpdateValueAt = _lodash.default.debounce(_this.updateValueAt.bind(_assertThisInitialized(_this)), 100);\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"inputInfo\",\n    get: function get() {\n      var attr = {\n        name: this.options.name,\n        type: this.component.inputType || 'text',\n        class: 'form-control',\n        lang: this.options.language\n      };\n\n      if (this.component.inputMode) {\n        attr.inputmode = this.component.inputMode;\n      }\n\n      if (this.component.placeholder) {\n        attr.placeholder = this.t(this.component.placeholder, {\n          _userInput: true\n        });\n      }\n\n      if (this.component.tabindex) {\n        attr.tabindex = this.component.tabindex;\n      }\n\n      if (this.disabled) {\n        attr.disabled = 'disabled';\n      }\n\n      if (this.component.autocomplete) {\n        attr.autocomplete = this.component.autocomplete;\n      }\n\n      _lodash.default.defaults(attr, this.component.attributes);\n\n      return {\n        id: this.key,\n        type: 'input',\n        changeEvent: 'input',\n        content: '',\n        attr: attr\n      };\n    }\n  }, {\n    key: \"maskOptions\",\n    get: function get() {\n      return _lodash.default.map(this.component.inputMasks, function (mask) {\n        return {\n          label: mask.label,\n          value: mask.label\n        };\n      });\n    }\n  }, {\n    key: \"isMultipleMasksField\",\n    get: function get() {\n      return this.component.allowMultipleMasks && !!this.component.inputMasks && !!this.component.inputMasks.length;\n    }\n  }, {\n    key: \"getMaskByName\",\n    value: function getMaskByName(maskName) {\n      var inputMask = _lodash.default.find(this.component.inputMasks, function (inputMask) {\n        return inputMask.label === maskName;\n      });\n\n      return inputMask ? inputMask.mask : undefined;\n    }\n  }, {\n    key: \"setInputMask\",\n    value: function setInputMask(input, inputMask) {\n      var mask = inputMask || this.component.displayMask || this.component.inputMask;\n      return _get(_getPrototypeOf(Input.prototype), \"setInputMask\", this).call(this, input, mask, !this.component.placeholder);\n    }\n  }, {\n    key: \"getMaskOptions\",\n    value: function getMaskOptions() {\n      return this.component.inputMasks.map(function (mask) {\n        return {\n          label: mask.label,\n          value: mask.label\n        };\n      });\n    }\n  }, {\n    key: \"getWordCount\",\n    value: function getWordCount(value) {\n      return !value ? 0 : value.trim().split(/\\s+/).length;\n    }\n  }, {\n    key: \"remainingWords\",\n    get: function get() {\n      var maxWords = _lodash.default.parseInt(_lodash.default.get(this.component, 'validate.maxWords'), 10);\n\n      var wordCount = this.getWordCount(this.dataValue);\n      return maxWords - wordCount;\n    }\n  }, {\n    key: \"prefix\",\n    get: function get() {\n      return this.component.prefix;\n    }\n  }, {\n    key: \"suffix\",\n    get: function get() {\n      if (this.component.widget && this.component.widget.type === 'calendar') {\n        var calendarIcon = this.renderTemplate('icon', {\n          ref: 'icon',\n          // After font-awesome would be updated to v5.x, \"clock-o\" should be replaced with \"clock\"\n          className: this.iconClass(this.component.enableDate || this.component.widget.enableDate ? 'calendar' : 'clock-o'),\n          styles: '',\n          content: ''\n        }).trim();\n\n        if (this.component.prefix !== calendarIcon) {\n          // converting string to HTML markup to render correctly DateTime component in portal.form.io\n          return (0, _utils.convertStringToHTMLElement)(calendarIcon, '[ref=\"icon\"]');\n        }\n      }\n\n      return this.component.suffix;\n    }\n  }, {\n    key: \"renderElement\",\n    value: function renderElement(value, index) {\n      // Double quotes cause the input value to close so replace them with html quote char.\n      if (value && typeof value === 'string') {\n        value = value.replace(/\"/g, '&quot;');\n      }\n\n      var info = this.inputInfo;\n      info.attr = info.attr || {};\n      info.attr.value = this.getValueAsString(this.formatValue(this.parseValue(value))).replace(/\"/g, '&quot;');\n      var valueMask = this.component.inputMask;\n      var displayMask = this.component.displayMask;\n      var hasDifferentDisplayAndSaveFormats = valueMask && displayMask && valueMask !== displayMask;\n\n      if (this.isMultipleMasksField) {\n        info.attr.class += ' formio-multiple-mask-input';\n      }\n\n      return this.isMultipleMasksField ? this.renderTemplate('multipleMasksInput', {\n        input: info,\n        value: value,\n        index: index,\n        selectOptions: this.getMaskOptions() || []\n      }, this.isHtmlRenderMode() ? 'html' : null) : this.renderTemplate('input', {\n        prefix: this.prefix,\n        suffix: this.suffix,\n        input: info,\n        value: this.formatValue(this.parseValue(value)),\n        hasValueMaskInput: hasDifferentDisplayAndSaveFormats,\n        index: index\n      }, this.isHtmlRenderMode() ? 'html' : null);\n    }\n  }, {\n    key: \"setCounter\",\n    value: function setCounter(type, element, count, max) {\n      if (max) {\n        var remaining = max - count;\n\n        if (remaining > 0) {\n          this.removeClass(element, 'text-danger');\n        } else {\n          this.addClass(element, 'text-danger');\n        }\n\n        this.setContent(element, this.t(\"{{ remaining }} \".concat(type, \" remaining.\"), {\n          remaining: remaining\n        }));\n      } else {\n        this.setContent(element, this.t(\"{{ count }} \".concat(type), {\n          count: count\n        }));\n      }\n    }\n  }, {\n    key: \"updateValueAt\",\n    value: function updateValueAt(value, flags, index) {\n      flags = flags || {};\n\n      if (_lodash.default.get(this.component, 'showWordCount', false)) {\n        if (this.refs.wordcount && this.refs.wordcount[index]) {\n          var maxWords = _lodash.default.parseInt(_lodash.default.get(this.component, 'validate.maxWords', 0), 10);\n\n          this.setCounter(this.t('words'), this.refs.wordcount[index], this.getWordCount(value), maxWords);\n        }\n      }\n\n      if (_lodash.default.get(this.component, 'showCharCount', false)) {\n        if (this.refs.charcount && this.refs.charcount[index]) {\n          var maxChars = _lodash.default.parseInt(_lodash.default.get(this.component, 'validate.maxLength', 0), 10);\n\n          this.setCounter(this.t('characters'), this.refs.charcount[index], value.length, maxChars);\n        }\n      }\n    }\n  }, {\n    key: \"getValueAt\",\n    value: function getValueAt(index) {\n      var input = this.performInputMapping(this.refs.input[index]);\n\n      if (input && input.widget) {\n        return input.widget.getValue();\n      }\n\n      return input ? input.value : undefined;\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(value, flags, index) {\n      flags = flags || {};\n\n      var changed = _get(_getPrototypeOf(Input.prototype), \"updateValue\", this).call(this, value, flags);\n\n      this.triggerUpdateValueAt(this.dataValue, flags, index);\n      return changed;\n    }\n  }, {\n    key: \"parseValue\",\n    value: function parseValue(value) {\n      return value;\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value) {\n      return value;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(element) {\n      this.loadRefs(element, {\n        charcount: 'multiple',\n        wordcount: 'multiple',\n        prefix: 'multiple',\n        suffix: 'multiple'\n      });\n      return _get(_getPrototypeOf(Input.prototype), \"attach\", this).call(this, element);\n    }\n  }, {\n    key: \"getWidget\",\n    value: function getWidget(index) {\n      index = index || 0;\n\n      if (this.refs.input && this.refs.input[index]) {\n        return this.refs.input[index].widget;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"attachElement\",\n    value: function attachElement(element, index) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(Input.prototype), \"attachElement\", this).call(this, element, index);\n\n      if (element.widget) {\n        element.widget.destroy();\n      } // Attach the widget.\n\n\n      var promise = _nativePromiseOnly.default.resolve();\n\n      element.widget = this.createWidget(index);\n\n      if (element.widget) {\n        promise = element.widget.attach(element);\n\n        if (this.refs.prefix && this.refs.prefix[index]) {\n          element.widget.addPrefix(this.refs.prefix[index]);\n        }\n\n        if (this.refs.suffix && this.refs.suffix[index]) {\n          element.widget.addSuffix(this.refs.suffix[index]);\n        }\n      } // Add focus and blur events.\n\n\n      this.addFocusBlurEvents(element);\n\n      if (this.options.submitOnEnter) {\n        this.addEventListener(element, 'keypress', function (event) {\n          var key = event.keyCode || event.which;\n\n          if (key === 13) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            _this2.emit('submitButton');\n          }\n        });\n      }\n\n      return promise;\n    }\n    /**\n     * Creates an instance of a widget for this component.\n     *\n     * @return {null}\n     */\n\n  }, {\n    key: \"createWidget\",\n    value: function createWidget(index) {\n      var _this$root,\n          _this3 = this; // Return null if no widget is found.\n\n\n      if (!this.component.widget) {\n        return null;\n      } // Get the widget settings.\n\n\n      var settings = typeof this.component.widget === 'string' ? {\n        type: this.component.widget\n      } : this.component.widget;\n\n      if ((_this$root = this.root) !== null && _this$root !== void 0 && _this$root.shadowRoot) {\n        var _this$root2;\n\n        settings.shadowRoot = (_this$root2 = this.root) === null || _this$root2 === void 0 ? void 0 : _this$root2.shadowRoot;\n      } // Make sure we have a widget.\n\n\n      if (!_widgets.default.hasOwnProperty(settings.type)) {\n        return null;\n      } // Create the widget.\n\n\n      var widget = new _widgets.default[settings.type](settings, this.component, this, index);\n      widget.on('update', function () {\n        return _this3.updateValue(_this3.getValue(), {\n          modified: true\n        }, index);\n      }, true);\n      widget.on('redraw', function () {\n        return _this3.redraw();\n      }, true);\n      return widget;\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      _get(_getPrototypeOf(Input.prototype), \"detach\", this).call(this);\n\n      if (this.refs && this.refs.input) {\n        for (var i = 0; i <= this.refs.input.length; i++) {\n          var widget = this.getWidget(i);\n\n          if (widget) {\n            widget.destroy();\n          }\n        }\n      }\n\n      this.refs.input = [];\n    }\n  }, {\n    key: \"addFocusBlurEvents\",\n    value: function addFocusBlurEvents(element) {\n      var _this4 = this;\n\n      this.addEventListener(element, 'focus', function () {\n        if (_this4.root.focusedComponent !== _this4) {\n          if (_this4.root.pendingBlur) {\n            _this4.root.pendingBlur();\n          }\n\n          _this4.root.focusedComponent = _this4;\n\n          _this4.emit('focus', _this4);\n        } else if (_this4.root.focusedComponent === _this4 && _this4.root.pendingBlur) {\n          _this4.root.pendingBlur.cancel();\n\n          _this4.root.pendingBlur = null;\n        }\n      });\n      this.addEventListener(element, 'blur', function () {\n        _this4.root.pendingBlur = (0, _utils.delay)(function () {\n          _this4.emit('blur', _this4);\n\n          if (_this4.component.validateOn === 'blur') {\n            _this4.root.triggerChange({\n              fromBlur: true\n            }, {\n              instance: _this4,\n              component: _this4.component,\n              value: _this4.dataValue,\n              flags: {\n                fromBlur: true\n              }\n            });\n          }\n\n          _this4.root.focusedComponent = null;\n          _this4.root.pendingBlur = null;\n        });\n      });\n    }\n  }], [{\n    key: \"schema\",\n    value: function schema() {\n      for (var _len = arguments.length, extend = new Array(_len), _key = 0; _key < _len; _key++) {\n        extend[_key] = arguments[_key];\n      }\n\n      return _Multivalue2.default.schema.apply(_Multivalue2.default, [{\n        widget: {\n          type: 'input'\n        }\n      }].concat(extend));\n    }\n  }]);\n\n  return Input;\n}(_Multivalue2.default);\n\nexports.default = Input;","map":null,"metadata":{},"sourceType":"script"}