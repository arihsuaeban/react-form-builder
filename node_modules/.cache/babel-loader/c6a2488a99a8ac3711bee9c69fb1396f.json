{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.object.assign\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = _interopRequireDefault(require(\"./utils\"));\n\nvar _utils2 = require(\"../../../../utils/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-disable quotes, max-len */\n\n\nvar _default = [{\n  weight: 0,\n  input: true,\n  label: 'Advanced Logic',\n  key: 'logic',\n  templates: {\n    header: '<div class=\"row\"> \\n  <div class=\"col-sm-6\">\\n    <strong>{{ value.length }} {{ ctx.t(\"Advanced Logic Configured\") }}</strong>\\n  </div>\\n</div>',\n    row: '<div class=\"row\"> \\n  <div class=\"col-sm-6\">\\n    <div>{{ row.name }} </div>\\n  </div>\\n  <div class=\"col-sm-2\"> \\n    <div class=\"btn-group pull-right\"> \\n      <button class=\"btn btn-default editRow\">{{ ctx.t(\"Edit\") }}</button> \\n      <button class=\"btn btn-danger removeRow\">{{ ctx.t(\"Delete\") }}</button> \\n    </div> \\n  </div> \\n</div>',\n    footer: ''\n  },\n  type: 'editgrid',\n  addAnother: 'Add Logic',\n  saveRow: 'Save Logic',\n  components: [{\n    weight: 0,\n    input: true,\n    inputType: 'text',\n    label: 'Logic Name',\n    key: 'name',\n    validate: {\n      required: true\n    },\n    type: 'textfield'\n  }, {\n    weight: 10,\n    key: 'triggerPanel',\n    input: false,\n    title: 'Trigger',\n    tableView: false,\n    components: [{\n      weight: 0,\n      input: true,\n      tableView: false,\n      components: [{\n        weight: 0,\n        input: true,\n        label: 'Type',\n        key: 'type',\n        tableView: false,\n        data: {\n          values: [{\n            value: 'simple',\n            label: 'Simple'\n          }, {\n            value: 'javascript',\n            label: 'Javascript'\n          }, {\n            value: 'json',\n            label: 'JSON Logic'\n          }, {\n            value: 'event',\n            label: 'Event'\n          }]\n        },\n        dataSrc: 'values',\n        template: '<span>{{ item.label }}</span>',\n        type: 'select'\n      }, {\n        weight: 10,\n        label: '',\n        key: 'simple',\n        type: 'container',\n        tableView: false,\n        customConditional: function customConditional(_ref) {\n          var row = _ref.row;\n          return row.type === 'simple';\n        },\n        components: [{\n          input: true,\n          key: 'show',\n          label: 'Show',\n          type: 'hidden',\n          tableView: false,\n          calculateValue: function calculateValue() {\n            return true;\n          }\n        }, {\n          type: 'select',\n          input: true,\n          label: 'When the form component:',\n          key: 'when',\n          dataSrc: 'custom',\n          valueProperty: 'value',\n          tableView: false,\n          data: {\n            custom: function custom(context) {\n              return (0, _utils2.getContextComponents)(context);\n            }\n          }\n        }, {\n          type: 'textfield',\n          input: true,\n          label: 'Has the value:',\n          key: 'eq',\n          tableView: false\n        }]\n      }, {\n        weight: 10,\n        type: 'textarea',\n        key: 'javascript',\n        rows: 5,\n        editor: 'ace',\n        as: 'javascript',\n        input: true,\n        tableView: false,\n        placeholder: \"result = (data['mykey'] > 1);\",\n        description: '\"row\", \"data\", and \"component\" variables are available. Return \"result\".',\n        customConditional: function customConditional(_ref2) {\n          var row = _ref2.row;\n          return row.type === 'javascript';\n        }\n      }, {\n        weight: 10,\n        type: 'textarea',\n        key: 'json',\n        rows: 5,\n        editor: 'ace',\n        label: 'JSON Logic',\n        as: 'json',\n        input: true,\n        tableView: false,\n        placeholder: \"{ ... }\",\n        description: '\"row\", \"data\", \"component\" and \"_\" variables are available. Return the result to be passed to the action if truthy.',\n        customConditional: function customConditional(_ref3) {\n          var row = _ref3.row;\n          return row.type === 'json';\n        }\n      }, {\n        weight: 10,\n        type: 'textfield',\n        key: 'event',\n        label: 'Event Name',\n        placeholder: 'event',\n        description: 'The event that will trigger this logic. You can trigger events externally or via a button.',\n        tableView: false,\n        customConditional: function customConditional(_ref4) {\n          var row = _ref4.row;\n          return row.type === 'event';\n        }\n      }],\n      key: 'trigger',\n      type: 'container'\n    }],\n    type: 'panel'\n  }, {\n    weight: 20,\n    input: true,\n    label: 'Actions',\n    key: 'actions',\n    tableView: false,\n    templates: {\n      header: '<div class=\"row\"> \\n  <div class=\"col-sm-6\"><strong>{{ value.length }} {{ ctx.t(\"actions\") }}</strong></div>\\n</div>',\n      row: '<div class=\"row\"> \\n  <div class=\"col-sm-6\">\\n    <div>{{ row.name }} </div>\\n  </div>\\n  <div class=\"col-sm-2\"> \\n    <div class=\"btn-group pull-right\"> \\n      <button class=\"btn btn-default editRow\">{{ ctx.t(\"Edit\") }}</button> \\n      <button class=\"btn btn-danger removeRow\">{{ ctx.t(\"Delete\") }}</button> \\n    </div> \\n  </div> \\n</div>',\n      footer: ''\n    },\n    type: 'editgrid',\n    addAnother: 'Add Action',\n    saveRow: 'Save Action',\n    components: [{\n      weight: 0,\n      title: 'Action',\n      input: false,\n      key: 'actionPanel',\n      type: 'panel',\n      components: [{\n        weight: 0,\n        input: true,\n        inputType: 'text',\n        label: 'Action Name',\n        key: 'name',\n        validate: {\n          required: true\n        },\n        type: 'textfield'\n      }, {\n        weight: 10,\n        input: true,\n        label: 'Type',\n        key: 'type',\n        data: {\n          values: [{\n            value: 'property',\n            label: 'Property'\n          }, {\n            value: 'value',\n            label: 'Value'\n          }, {\n            label: 'Merge Component Schema',\n            value: 'mergeComponentSchema'\n          }, {\n            label: 'Custom Action',\n            value: 'customAction'\n          }]\n        },\n        dataSrc: 'values',\n        template: '<span>{{ item.label }}</span>',\n        type: 'select'\n      }, {\n        weight: 20,\n        type: 'select',\n        template: '<span>{{ item.label }}</span>',\n        dataSrc: 'json',\n        tableView: false,\n        data: {\n          json: [{\n            label: 'Hidden',\n            value: 'hidden',\n            type: 'boolean'\n          }, {\n            label: 'Required',\n            value: 'validate.required',\n            type: 'boolean'\n          }, {\n            label: 'Disabled',\n            value: 'disabled',\n            type: 'boolean'\n          }, {\n            label: 'Label',\n            value: 'label',\n            type: 'string'\n          }, {\n            label: 'Title',\n            value: 'title',\n            type: 'string'\n          }, {\n            label: 'Prefix',\n            value: 'prefix',\n            type: 'string'\n          }, {\n            label: 'Suffix',\n            value: 'suffix',\n            type: 'string'\n          }, {\n            label: 'Tooltip',\n            value: 'tooltip',\n            type: 'string'\n          }, {\n            label: 'Description',\n            value: 'description',\n            type: 'string'\n          }, {\n            label: 'Placeholder',\n            value: 'placeholder',\n            type: 'string'\n          }, {\n            label: 'Input Mask',\n            value: 'inputMask',\n            type: 'string'\n          }, {\n            label: 'CSS Class',\n            value: 'className',\n            type: 'string'\n          }, {\n            label: 'Container Custom Class',\n            value: 'customClass',\n            type: 'string'\n          }]\n        },\n        key: 'property',\n        label: 'Component Property',\n        input: true,\n        customConditional: function customConditional(_ref5) {\n          var row = _ref5.row;\n          return row.type === 'property';\n        }\n      }, {\n        weight: 30,\n        input: true,\n        label: 'Set State',\n        key: 'state',\n        tableView: false,\n        data: {\n          values: [{\n            label: 'True',\n            value: 'true'\n          }, {\n            label: 'False',\n            value: 'false'\n          }]\n        },\n        dataSrc: 'values',\n        template: '<span>{{ item.label }}</span>',\n        type: 'select',\n        customConditional: function customConditional(_ref6) {\n          var row = _ref6.row;\n          return row.type === 'property' && row.hasOwnProperty('property') && row.property.type === 'boolean';\n        }\n      }, {\n        weight: 30,\n        type: 'textfield',\n        key: 'text',\n        label: 'Text',\n        inputType: 'text',\n        input: true,\n        tableView: false,\n        description: 'Can use templating with {{ data.myfield }}. \"data\", \"row\", \"component\" and \"result\" variables are available.',\n        customConditional: function customConditional(_ref7) {\n          var row = _ref7.row;\n          return row.type === 'property' && row.hasOwnProperty('property') && row.property.type === 'string' && !row.property.component;\n        }\n      }, {\n        weight: 20,\n        input: true,\n        label: 'Value (Javascript)',\n        key: 'value',\n        editor: 'ace',\n        as: 'javascript',\n        rows: 5,\n        placeholder: \"value = data.myfield;\",\n        type: 'textarea',\n        tableView: false,\n        description: '\"row\", \"data\", \"component\", and \"result\" variables are available. Return the value.',\n        customConditional: function customConditional(_ref8) {\n          var row = _ref8.row;\n          return row.type === 'value';\n        }\n      }, {\n        weight: 20,\n        input: true,\n        label: 'Schema Defenition',\n        key: 'schemaDefinition',\n        editor: 'ace',\n        as: 'javascript',\n        rows: 5,\n        placeholder: \"schema = { label: 'Updated' };\",\n        type: 'textarea',\n        tableView: false,\n        description: '\"row\", \"data\", \"component\", and \"result\" variables are available. Return the schema.',\n        customConditional: function customConditional(_ref9) {\n          var row = _ref9.row;\n          return row.type === 'mergeComponentSchema';\n        }\n      }, Object.assign(_utils.default.logicVariablesTable('<tr><th>input</th><td>The value that was input into this component</td></tr>'), {\n        customConditional: function customConditional(_ref10) {\n          var row = _ref10.row;\n          return row.type === 'customAction';\n        }\n      }), {\n        weight: 20,\n        input: true,\n        label: 'Custom Action (Javascript)',\n        key: 'customAction',\n        editor: 'ace',\n        rows: 5,\n        placeholder: \"value = data.myfield;\",\n        type: 'textarea',\n        tableView: false,\n        customConditional: function customConditional(_ref11) {\n          var row = _ref11.row;\n          return row.type === 'customAction';\n        }\n      }]\n    }]\n  }]\n}];\n/* eslint-enable quotes, max-len */\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}